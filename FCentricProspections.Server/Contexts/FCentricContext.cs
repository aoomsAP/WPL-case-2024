// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using FCentricProspections.Server.DataModels;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using FCentricProspections.Server.DomainModels;

namespace FCentricProspections.Server.Contexts;

public partial class FCentricContext : DbContext
{
    public FCentricContext(DbContextOptions<FCentricContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<Appointment> Appointments { get; set; }

    public virtual DbSet<AppointmentState> AppointmentStates { get; set; }

    public virtual DbSet<Brand> Brands { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<CompetitorBrand> CompetitorBrands { get; set; }

    public virtual DbSet<Contact> Contacts { get; set; }

    public virtual DbSet<ContactChannel> ContactChannels { get; set; }

    public virtual DbSet<ContactChannelDescription> ContactChannelDescriptions { get; set; }

    public virtual DbSet<ContactType> ContactTypes { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerShop> CustomerShops { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<FashionDocumentShop> FashionDocumentShops { get; set; }

    public virtual DbSet<FashionDocument> FashionDocuments { get; set; }

    public virtual DbSet<ProductLine> ProductLines { get; set; }

    public virtual DbSet<ProductLineDelivery> ProductLineDeliveries { get; set; }

    public virtual DbSet<Prospection> Prospections { get; set; }

    public virtual DbSet<ProspectionBrand> ProspectionBrands { get; set; }

    public virtual DbSet<ProspectionBrandInterest> ProspectionBrandInterests { get; set; }

    public virtual DbSet<ProspectionCompetitorBrand> ProspectionCompetitorBrands { get; set; }

    public virtual DbSet<ProspectionContactType> ProspectionContactTypes { get; set; }

    public virtual DbSet<ProspectionToDo> ProspectionToDos { get; set; }

    public virtual DbSet<ProspectionVisitType> ProspectionVisitTypes { get; set; }

    public virtual DbSet<SalesPeriod> SalesPeriods { get; set; }

    public virtual DbSet<Shop> Shops { get; set; }

    public virtual DbSet<ShopContact> ShopContacts { get; set; }

    public virtual DbSet<ShopDelivery> ShopDeliveries { get; set; }

    public virtual DbSet<ToDo> ToDoes { get; set; }

    public virtual DbSet<ToDoStatus> ToDoStatus { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<ShopDetailsView> ShopDetailsView { get; set; }


    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<ProspectionContactType>().HasData(
            new ProspectionContactType { Id = 1, Name = "Owner" },
            new ProspectionContactType { Id = 2, Name = "Buyer" },
            new ProspectionContactType { Id = 3, Name = "Salesperson" },
            new ProspectionContactType { Id = 4, Name = "Other" }
        );

        modelBuilder.Entity<ProspectionVisitType>().HasData(
            new ProspectionVisitType { Id = 1, Name = "Prospection" },
            new ProspectionVisitType { Id = 2, Name = "Swap" },
            new ProspectionVisitType { Id = 3, Name = "Key account meeting" },
            new ProspectionVisitType { Id = 4, Name = "Other" }
        );

        modelBuilder.Entity<Prospection>(entity =>
        {
            entity.HasKey(e => e.Id);
            entity.HasOne(d => d.Shop).WithMany(p => p.Prospections)
                .HasForeignKey(d => d.ShopId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Prospections_dbo.Shops_ShopId");
        });

        // to implement ?

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}