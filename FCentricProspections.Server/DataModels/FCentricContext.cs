// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace FCentricProspections.Server.DataModels;

public partial class FCentricContext : DbContext
{
    public FCentricContext(DbContextOptions<FCentricContext> options)
        : base(options)
    {
    }

    public virtual DbSet<AccountingCode> AccountingCodes { get; set; }

    public virtual DbSet<AccountingSession> AccountingSessions { get; set; }

    public virtual DbSet<AccountingSessionDocument> AccountingSessionDocuments { get; set; }

    public virtual DbSet<AccountingSessionType> AccountingSessionTypes { get; set; }

    public virtual DbSet<Action> Actions { get; set; }

    public virtual DbSet<ActionList> ActionLists { get; set; }

    public virtual DbSet<Address> Addresses { get; set; }

    public virtual DbSet<AdvancedPayment> AdvancedPayments { get; set; }

    public virtual DbSet<AdvancedPaymentState> AdvancedPaymentStates { get; set; }

    public virtual DbSet<AgeCategory> AgeCategories { get; set; }

    public virtual DbSet<Agent> Agents { get; set; }

    public virtual DbSet<AgentContact> AgentContacts { get; set; }

    public virtual DbSet<AgentProductLineDelivery> AgentProductLineDeliveries { get; set; }

    public virtual DbSet<AgentRegion> AgentRegions { get; set; }

    public virtual DbSet<App> Apps { get; set; }

    public virtual DbSet<AppVersion> AppVersions { get; set; }

    public virtual DbSet<Appointment> Appointments { get; set; }

    public virtual DbSet<AppointmentCaresponsible> AppointmentCaresponsibles { get; set; }

    public virtual DbSet<AppointmentContact> AppointmentContacts { get; set; }

    public virtual DbSet<AppointmentDepartmentResponsible> AppointmentDepartmentResponsibles { get; set; }

    public virtual DbSet<AppointmentSalesResponsible> AppointmentSalesResponsibles { get; set; }

    public virtual DbSet<AppointmentState> AppointmentStates { get; set; }

    public virtual DbSet<AvailabilityDay> AvailabilityDays { get; set; }

    public virtual DbSet<AvailabilityType> AvailabilityTypes { get; set; }

    public virtual DbSet<Barcode> Barcodes { get; set; }

    public virtual DbSet<BiEmployeeDailyBarcodeResult> BiEmployeeDailyBarcodeResults { get; set; }

    public virtual DbSet<BiEmployeeDailyGeneralResult> BiEmployeeDailyGeneralResults { get; set; }

    public virtual DbSet<BiEmployeeDailyGroupResult> BiEmployeeDailyGroupResults { get; set; }

    public virtual DbSet<BiEmployeeDailyGroupSeasonResult> BiEmployeeDailyGroupSeasonResults { get; set; }

    public virtual DbSet<BiShopDailySeasonalBrandResult> BiShopDailySeasonalBrandResults { get; set; }

    public virtual DbSet<BleckmannImportedFile> BleckmannImportedFiles { get; set; }

    public virtual DbSet<BleckmannSkuSync> BleckmannSkuSyncs { get; set; }

    public virtual DbSet<BleckmannTransportState> BleckmannTransportStates { get; set; }

    public virtual DbSet<BlockedByFdiReason> BlockedByFdiReasons { get; set; }

    public virtual DbSet<BlockedType> BlockedTypes { get; set; }

    public virtual DbSet<Brand> Brands { get; set; }

    public virtual DbSet<City> Cities { get; set; }

    public virtual DbSet<CityPriceRegion> CityPriceRegions { get; set; }

    public virtual DbSet<CollectionDelivery> CollectionDeliveries { get; set; }

    public virtual DbSet<CollectionDeliveryCategory> CollectionDeliveryCategories { get; set; }

    public virtual DbSet<CollectionDeliveryLocation> CollectionDeliveryLocations { get; set; }

    public virtual DbSet<CollectionDeliveryType> CollectionDeliveryTypes { get; set; }

    public virtual DbSet<CollectionDeliveryWarehouse> CollectionDeliveryWarehouses { get; set; }

    public virtual DbSet<CollectionSaleInvitationSendRange> CollectionSaleInvitationSendRanges { get; set; }

    public virtual DbSet<CollectionSaleSignUp> CollectionSaleSignUps { get; set; }

    public virtual DbSet<CollectionSalesInvitation> CollectionSalesInvitations { get; set; }

    public virtual DbSet<CollectionSalesInvitationType> CollectionSalesInvitationTypes { get; set; }

    public virtual DbSet<Color> Colors { get; set; }

    public virtual DbSet<CommercialLocation> CommercialLocations { get; set; }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<CompetitorBrand> CompetitorBrands { get; set; }

    public virtual DbSet<ConfigurationSetting> ConfigurationSettings { get; set; }

    public virtual DbSet<Contact> Contacts { get; set; }

    public virtual DbSet<ContactChannel> ContactChannels { get; set; }

    public virtual DbSet<ContactChannelDescription> ContactChannelDescriptions { get; set; }

    public virtual DbSet<ContactChannelInterest> ContactChannelInterests { get; set; }

    public virtual DbSet<ContactChannelInterestType> ContactChannelInterestTypes { get; set; }

    public virtual DbSet<ContactChannelOptIn> ContactChannelOptIns { get; set; }

    public virtual DbSet<ContactChannelType> ContactChannelTypes { get; set; }

    public virtual DbSet<ContactType> ContactTypes { get; set; }

    public virtual DbSet<ContractState> ContractStates { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Currency> Currencies { get; set; }

    public virtual DbSet<Customer> Customers { get; set; }

    public virtual DbSet<CustomerBlockedRule> CustomerBlockedRules { get; set; }

    public virtual DbSet<CustomerCode> CustomerCodes { get; set; }

    public virtual DbSet<CustomerContact> CustomerContacts { get; set; }

    public virtual DbSet<CustomerGuarantee> CustomerGuarantees { get; set; }

    public virtual DbSet<CustomerInvitation> CustomerInvitations { get; set; }

    public virtual DbSet<CustomerLegalHistory> CustomerLegalHistories { get; set; }

    public virtual DbSet<CustomerLoyalty> CustomerLoyalties { get; set; }

    public virtual DbSet<CustomerOptIn> CustomerOptIns { get; set; }

    public virtual DbSet<CustomerReportConfiguration> CustomerReportConfigurations { get; set; }

    public virtual DbSet<CustomerRule> CustomerRules { get; set; }

    public virtual DbSet<CustomerShop> CustomerShops { get; set; }

    public virtual DbSet<CustomerType> CustomerTypes { get; set; }

    public virtual DbSet<CustomerTypeFeature> CustomerTypeFeatures { get; set; }

    public virtual DbSet<CustomerWifiCode> CustomerWifiCodes { get; set; }

    public virtual DbSet<CustomerWpsStatus> CustomerWpsStatuses { get; set; }

    public virtual DbSet<DataQueryLog> DataQueryLogs { get; set; }

    public virtual DbSet<DedicatedSalesRule> DedicatedSalesRules { get; set; }

    public virtual DbSet<DelayedDeliveryProposedRule> DelayedDeliveryProposedRules { get; set; }

    public virtual DbSet<DelayedDeliveryProposedRuleShop> DelayedDeliveryProposedRuleShops { get; set; }

    public virtual DbSet<DelayedDeliveryRule> DelayedDeliveryRules { get; set; }

    public virtual DbSet<DelayedDeliveryRuleProductLineDelivery> DelayedDeliveryRuleProductLineDeliveries { get; set; }

    public virtual DbSet<DelayedDeliveryRuleShop> DelayedDeliveryRuleShops { get; set; }

    public virtual DbSet<DelayedDeliveryRuleSupplier> DelayedDeliveryRuleSuppliers { get; set; }

    public virtual DbSet<DeliveryLocationType> DeliveryLocationTypes { get; set; }

    public virtual DbSet<DeliveryMethod> DeliveryMethods { get; set; }

    public virtual DbSet<DeliveryRemarksRule> DeliveryRemarksRules { get; set; }

    public virtual DbSet<DeliveryRemarksRuleProductLineDelivery> DeliveryRemarksRuleProductLineDeliveries { get; set; }

    public virtual DbSet<DeliveryRemarksRuleShop> DeliveryRemarksRuleShops { get; set; }

    public virtual DbSet<DeliveryWindow> DeliveryWindows { get; set; }

    public virtual DbSet<Department> Departments { get; set; }

    public virtual DbSet<DiscountCampaign> DiscountCampaigns { get; set; }

    public virtual DbSet<DiscountCampaignLine> DiscountCampaignLines { get; set; }

    public virtual DbSet<DiscountCampaignLineDetail> DiscountCampaignLineDetails { get; set; }

    public virtual DbSet<DiscountRuleRule> DiscountRuleRules { get; set; }

    public virtual DbSet<DiscountRuleSupplier> DiscountRuleSuppliers { get; set; }

    public virtual DbSet<Document> Documents { get; set; }

    public virtual DbSet<DocumentBleckmannTransportState> DocumentBleckmannTransportStates { get; set; }

    public virtual DbSet<DocumentDeliveryState> DocumentDeliveryStates { get; set; }

    public virtual DbSet<DocumentFlow> DocumentFlows { get; set; }

    public virtual DbSet<DocumentImportConfiguration> DocumentImportConfigurations { get; set; }

    public virtual DbSet<DocumentImportConfigurationMapping> DocumentImportConfigurationMappings { get; set; }

    public virtual DbSet<DocumentImportMeta> DocumentImportMetas { get; set; }

    public virtual DbSet<DocumentImportMetaDetail> DocumentImportMetaDetails { get; set; }

    public virtual DbSet<DocumentImportMetaError> DocumentImportMetaErrors { get; set; }

    public virtual DbSet<DocumentImportMetaStatus> DocumentImportMetaStatuses { get; set; }

    public virtual DbSet<DocumentImportMetaWarning> DocumentImportMetaWarnings { get; set; }

    public virtual DbSet<DocumentLine> DocumentLines { get; set; }

    public virtual DbSet<DocumentLineDetail> DocumentLineDetails { get; set; }

    public virtual DbSet<DocumentPayment> DocumentPayments { get; set; }

    public virtual DbSet<DocumentPaymentType> DocumentPaymentTypes { get; set; }

    public virtual DbSet<DocumentRelation> DocumentRelations { get; set; }

    public virtual DbSet<DocumentRule> DocumentRules { get; set; }

    public virtual DbSet<DocumentSnapshot> DocumentSnapshots { get; set; }

    public virtual DbSet<DocumentState> DocumentStates { get; set; }

    public virtual DbSet<DocumentTransfer> DocumentTransfers { get; set; }

    public virtual DbSet<DocumentType> DocumentTypes { get; set; }

    public virtual DbSet<EdiMessage> EdiMessages { get; set; }

    public virtual DbSet<EliBudget> EliBudgets { get; set; }

    public virtual DbSet<EliOrderDate> EliOrderDates { get; set; }

    public virtual DbSet<EmailTemplate> EmailTemplates { get; set; }

    public virtual DbSet<EmailTemplatePlaceholder> EmailTemplatePlaceholders { get; set; }

    public virtual DbSet<Employee> Employees { get; set; }

    public virtual DbSet<EmployeeSeasonalCost> EmployeeSeasonalCosts { get; set; }

    public virtual DbSet<EnemyRule> EnemyRules { get; set; }

    public virtual DbSet<Expense> Expenses { get; set; }

    public virtual DbSet<ExpenseOpiPrintRequest> ExpenseOpiPrintRequests { get; set; }

    public virtual DbSet<ExpenseType> ExpenseTypes { get; set; }

    public virtual DbSet<ExternalDataImportBatch> ExternalDataImportBatches { get; set; }

    public virtual DbSet<ExternalDataImportBatchLog> ExternalDataImportBatchLogs { get; set; }

    public virtual DbSet<ExternalDataImportBatchSchedule> ExternalDataImportBatchSchedules { get; set; }

    public virtual DbSet<ExternalDataImportBatchStatus> ExternalDataImportBatchStatuses { get; set; }

    public virtual DbSet<ExternalDataImportType> ExternalDataImportTypes { get; set; }

    public virtual DbSet<ExternalPo> ExternalPos { get; set; }

    public virtual DbSet<ExternalPosAccountingCodeMap> ExternalPosAccountingCodeMaps { get; set; }

    public virtual DbSet<ExternalPosJournal> ExternalPosJournals { get; set; }

    public virtual DbSet<ExternalPosJournalEntry> ExternalPosJournalEntries { get; set; }

    public virtual DbSet<ExternalPosJournalEntryType> ExternalPosJournalEntryTypes { get; set; }

    public virtual DbSet<ExternalPosJournalExpense> ExternalPosJournalExpenses { get; set; }

    public virtual DbSet<ExternalPosJournalInvoice> ExternalPosJournalInvoices { get; set; }

    public virtual DbSet<ExternalPosJournalVoucher> ExternalPosJournalVouchers { get; set; }

    public virtual DbSet<ExternalSalesPlatform> ExternalSalesPlatforms { get; set; }

    public virtual DbSet<ExternalSalesPlatformFashionProductColor> ExternalSalesPlatformFashionProductColors { get; set; }

    public virtual DbSet<ExternalSalesPlatformStockSyncLog> ExternalSalesPlatformStockSyncLogs { get; set; }

    public virtual DbSet<FashionBarcode> FashionBarcodes { get; set; }

    public virtual DbSet<FashionDocument> FashionDocuments { get; set; }

    public virtual DbSet<FashionDocumentPicture> FashionDocumentPictures { get; set; }

    public virtual DbSet<FashionDocumentShop> FashionDocumentShops { get; set; }

    public virtual DbSet<FashionProduct> FashionProducts { get; set; }

    public virtual DbSet<FashionProductColor> FashionProductColors { get; set; }

    public virtual DbSet<FashionProductPicture> FashionProductPictures { get; set; }

    public virtual DbSet<FashionProductSize> FashionProductSizes { get; set; }

    public virtual DbSet<FashionProductSizePack> FashionProductSizePacks { get; set; }

    public virtual DbSet<FashionProductSizeRegion> FashionProductSizeRegions { get; set; }

    public virtual DbSet<FashionReturnDocument> FashionReturnDocuments { get; set; }

    public virtual DbSet<FdiExportSession> FdiExportSessions { get; set; }

    public virtual DbSet<FdiExportSessionDocument> FdiExportSessionDocuments { get; set; }

    public virtual DbSet<Feature> Features { get; set; }

    public virtual DbSet<FileImportLog> FileImportLogs { get; set; }

    public virtual DbSet<FileImportLogError> FileImportLogErrors { get; set; }

    public virtual DbSet<FileImportLogErrorType> FileImportLogErrorTypes { get; set; }

    public virtual DbSet<FileImportLogType> FileImportLogTypes { get; set; }

    public virtual DbSet<FinancialSupervisionByFcRule> FinancialSupervisionByFcRules { get; set; }

    public virtual DbSet<FinancialSupervisionByFcRuleProductLineDelivery> FinancialSupervisionByFcRuleProductLineDeliveries { get; set; }

    public virtual DbSet<FinancialSupervisionByFcRuleShop> FinancialSupervisionByFcRuleShops { get; set; }

    public virtual DbSet<FreeTextOnInvoiceRule> FreeTextOnInvoiceRules { get; set; }

    public virtual DbSet<FreeTextOnInvoiceRuleProductLineDelivery> FreeTextOnInvoiceRuleProductLineDeliveries { get; set; }

    public virtual DbSet<FreeTextOnInvoiceRuleShop> FreeTextOnInvoiceRuleShops { get; set; }

    public virtual DbSet<Gender> Genders { get; set; }

    public virtual DbSet<GridConfiguration> GridConfigurations { get; set; }

    public virtual DbSet<GridConfigurationGroup> GridConfigurationGroups { get; set; }

    public virtual DbSet<History> Histories { get; set; }

    public virtual DbSet<IntraMirrorConfig> IntraMirrorConfigs { get; set; }

    public virtual DbSet<IntraMirrorProductLineDelivery> IntraMirrorProductLineDeliveries { get; set; }

    public virtual DbSet<Invitation> Invitations { get; set; }

    public virtual DbSet<InvitationType> InvitationTypes { get; set; }

    public virtual DbSet<InvoiceCompare> InvoiceCompares { get; set; }

    public virtual DbSet<KlaviyoCollectionSaleCustomerSync> KlaviyoCollectionSaleCustomerSyncs { get; set; }

    public virtual DbSet<KlaviyoDocumentSync> KlaviyoDocumentSyncs { get; set; }

    public virtual DbSet<KlaviyoRetailDocumentSync> KlaviyoRetailDocumentSyncs { get; set; }

    public virtual DbSet<KlaviyoShopSync> KlaviyoShopSyncs { get; set; }

    public virtual DbSet<LabelPrintJob> LabelPrintJobs { get; set; }

    public virtual DbSet<LabelPrintJobItem> LabelPrintJobItems { get; set; }

    public virtual DbSet<LabelPrinter> LabelPrinters { get; set; }

    public virtual DbSet<Language> Languages { get; set; }

    public virtual DbSet<LegalForm> LegalForms { get; set; }

    public virtual DbSet<Line> Lines { get; set; }

    public virtual DbSet<LiuJoBudget> LiuJoBudgets { get; set; }

    public virtual DbSet<LiuJoConfirmationDetail> LiuJoConfirmationDetails { get; set; }

    public virtual DbSet<LiuJoProduct> LiuJoProducts { get; set; }

    public virtual DbSet<LiuJoShoe> LiuJoShoes { get; set; }

    public virtual DbSet<LiuJoShopCode> LiuJoShopCodes { get; set; }

    public virtual DbSet<LoyaltyType> LoyaltyTypes { get; set; }

    public virtual DbSet<MailLog> MailLogs { get; set; }

    public virtual DbSet<ManualDocumentTransfer> ManualDocumentTransfers { get; set; }

    public virtual DbSet<MigrationHistory> MigrationHistories { get; set; }

    public virtual DbSet<MiscDocumentLine> MiscDocumentLines { get; set; }

    public virtual DbSet<MobileDeviceLogin> MobileDeviceLogins { get; set; }

    public virtual DbSet<ModificationType> ModificationTypes { get; set; }

    public virtual DbSet<NoDeliveryRule> NoDeliveryRules { get; set; }

    public virtual DbSet<NoDeliveryRuleSupplier> NoDeliveryRuleSuppliers { get; set; }

    public virtual DbSet<NosCoType> NosCoTypes { get; set; }

    public virtual DbSet<OptInSource> OptInSources { get; set; }

    public virtual DbSet<OptInType> OptInTypes { get; set; }

    public virtual DbSet<PaymentCondition> PaymentConditions { get; set; }

    public virtual DbSet<Permission> Permissions { get; set; }

    public virtual DbSet<Picture> Pictures { get; set; }

    public virtual DbSet<Po> Pos { get; set; }

    public virtual DbSet<PosAccount> PosAccounts { get; set; }

    public virtual DbSet<PosAccountingCode> PosAccountingCodes { get; set; }

    public virtual DbSet<PosAccountingCodeMap> PosAccountingCodeMaps { get; set; }

    public virtual DbSet<PosAccountingCodeType> PosAccountingCodeTypes { get; set; }

    public virtual DbSet<PosAccountingSession> PosAccountingSessions { get; set; }

    public virtual DbSet<PosAccountingSessionEntry> PosAccountingSessionEntries { get; set; }

    public virtual DbSet<PosDiscountReason> PosDiscountReasons { get; set; }

    public virtual DbSet<PosDocumentLine> PosDocumentLines { get; set; }

    public virtual DbSet<PosEjournal> PosEjournals { get; set; }

    public virtual DbSet<PosOptIn> PosOptIns { get; set; }

    public virtual DbSet<PosPinPadLog> PosPinPadLogs { get; set; }

    public virtual DbSet<PosPinPadMessage> PosPinPadMessages { get; set; }

    public virtual DbSet<PosSession> PosSessions { get; set; }

    public virtual DbSet<PosTicketCancellationReason> PosTicketCancellationReasons { get; set; }

    public virtual DbSet<PrivacyGdprLog> PrivacyGdprLogs { get; set; }

    public virtual DbSet<Product> Products { get; set; }

    public virtual DbSet<ProductAlias> ProductAliases { get; set; }

    public virtual DbSet<ProductCategory> ProductCategories { get; set; }

    public virtual DbSet<ProductCategoryAlias> ProductCategoryAliases { get; set; }

    public virtual DbSet<ProductDeliveryWindow> ProductDeliveryWindows { get; set; }

    public virtual DbSet<ProductGroup> ProductGroups { get; set; }

    public virtual DbSet<ProductLine> ProductLines { get; set; }

    public virtual DbSet<ProductLineDelivery> ProductLineDeliveries { get; set; }

    public virtual DbSet<ProductMatrix> ProductMatrices { get; set; }

    public virtual DbSet<ProposedRule> ProposedRules { get; set; }

    public virtual DbSet<Province> Provinces { get; set; }

    public virtual DbSet<PublicHoliday> PublicHolidays { get; set; }

    public virtual DbSet<Publication> Publications { get; set; }

    public virtual DbSet<PublicationCountry> PublicationCountries { get; set; }

    public virtual DbSet<RatingType> RatingTypes { get; set; }

    public virtual DbSet<RecomaticsInvoice> RecomaticsInvoices { get; set; }

    public virtual DbSet<RecomaticsInvoiceCollectionDelivery> RecomaticsInvoiceCollectionDeliveries { get; set; }

    public virtual DbSet<RecomaticsInvoiceFileImportLog> RecomaticsInvoiceFileImportLogs { get; set; }

    public virtual DbSet<RecurringAppointment> RecurringAppointments { get; set; }

    public virtual DbSet<Region> Regions { get; set; }

    public virtual DbSet<ReportContext> ReportContexts { get; set; }

    public virtual DbSet<ReportDefinition> ReportDefinitions { get; set; }

    public virtual DbSet<ReportShare> ReportShares { get; set; }

    public virtual DbSet<ReturnApprovedState> ReturnApprovedStates { get; set; }

    public virtual DbSet<ReturnDestination> ReturnDestinations { get; set; }

    public virtual DbSet<ReturnReason> ReturnReasons { get; set; }

    public virtual DbSet<ReturnRule> ReturnRules { get; set; }

    public virtual DbSet<ReturnState> ReturnStates { get; set; }

    public virtual DbSet<ReturnStateAction> ReturnStateActions { get; set; }

    public virtual DbSet<ReturnSupplierAction> ReturnSupplierActions { get; set; }

    public virtual DbSet<ReturnTracking> ReturnTrackings { get; set; }

    public virtual DbSet<RoadAppointment> RoadAppointments { get; set; }

    public virtual DbSet<RoadAppointmentProductLine> RoadAppointmentProductLines { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<Rule> Rules { get; set; }

    public virtual DbSet<SalesCondition> SalesConditions { get; set; }

    public virtual DbSet<SalesConditionDiscount> SalesConditionDiscounts { get; set; }

    public virtual DbSet<SalesConditionDiscountExcludedProduct> SalesConditionDiscountExcludedProducts { get; set; }

    public virtual DbSet<SalesConditionEmployee> SalesConditionEmployees { get; set; }

    public virtual DbSet<SalesConditionGroup> SalesConditionGroups { get; set; }

    public virtual DbSet<SalesConditionPeriod> SalesConditionPeriods { get; set; }

    public virtual DbSet<SalesConditionPlanning> SalesConditionPlannings { get; set; }

    public virtual DbSet<SalesConditionShowroom> SalesConditionShowrooms { get; set; }

    public virtual DbSet<SalesConditionType> SalesConditionTypes { get; set; }

    public virtual DbSet<SalesPeriod> SalesPeriods { get; set; }

    public virtual DbSet<SalesPeriodCurrencyCourse> SalesPeriodCurrencyCourses { get; set; }

    public virtual DbSet<SalesPeriodType> SalesPeriodTypes { get; set; }

    public virtual DbSet<SampleDestination> SampleDestinations { get; set; }

    public virtual DbSet<SegmentType> SegmentTypes { get; set; }

    public virtual DbSet<Shop> Shops { get; set; }

    public virtual DbSet<ShopAgeCategory> ShopAgeCategories { get; set; }

    public virtual DbSet<ShopAvailability> ShopAvailabilities { get; set; }

    public virtual DbSet<ShopCommercialLocation> ShopCommercialLocations { get; set; }

    public virtual DbSet<ShopCompetitorBrand> ShopCompetitorBrands { get; set; }

    public virtual DbSet<ShopCompetitorProductLine> ShopCompetitorProductLines { get; set; }

    public virtual DbSet<ShopContact> ShopContacts { get; set; }

    public virtual DbSet<ShopDelivery> ShopDeliveries { get; set; }

    public virtual DbSet<ShopDeliveryOrigin> ShopDeliveryOrigins { get; set; }

    public virtual DbSet<ShopDeliveryState> ShopDeliveryStates { get; set; }

    public virtual DbSet<ShopDeliveryType> ShopDeliveryTypes { get; set; }

    public virtual DbSet<ShopGender> ShopGenders { get; set; }

    public virtual DbSet<ShopLine> ShopLines { get; set; }

    public virtual DbSet<ShopPicture> ShopPictures { get; set; }

    public virtual DbSet<ShopSegmentType> ShopSegmentTypes { get; set; }

    public virtual DbSet<ShopSupplierCode> ShopSupplierCodes { get; set; }

    public virtual DbSet<ShopType> ShopTypes { get; set; }

    public virtual DbSet<ShopVisit> ShopVisits { get; set; }

    public virtual DbSet<ShopifyFashionProductColor> ShopifyFashionProductColors { get; set; }

    public virtual DbSet<ShopifyProcessedOrder> ShopifyProcessedOrders { get; set; }

    public virtual DbSet<Showroom> Showrooms { get; set; }

    public virtual DbSet<ShowroomAppointment> ShowroomAppointments { get; set; }

    public virtual DbSet<ShowroomAppointmentSalesCondition> ShowroomAppointmentSalesConditions { get; set; }

    public virtual DbSet<ShowroomAppointmentSalesConditionReason> ShowroomAppointmentSalesConditionReasons { get; set; }

    public virtual DbSet<ShowroomAppointmentSalesConditionResponse> ShowroomAppointmentSalesConditionResponses { get; set; }

    public virtual DbSet<ShowroomAppointmentSalesConditionSellOut> ShowroomAppointmentSalesConditionSellOuts { get; set; }

    public virtual DbSet<ShowroomAppointmentSalesConditionShop> ShowroomAppointmentSalesConditionShops { get; set; }

    public virtual DbSet<ShowroomAppointmentSalesConditionShopAction> ShowroomAppointmentSalesConditionShopActions { get; set; }

    public virtual DbSet<ShowroomAppointmentSalesConditionSigning> ShowroomAppointmentSalesConditionSignings { get; set; }

    public virtual DbSet<ShowroomAppointmentSalesConditionUnsignedReason> ShowroomAppointmentSalesConditionUnsignedReasons { get; set; }

    public virtual DbSet<Size> Sizes { get; set; }

    public virtual DbSet<SizePack> SizePacks { get; set; }

    public virtual DbSet<SizePackQuantity> SizePackQuantities { get; set; }

    public virtual DbSet<SizeScale> SizeScales { get; set; }

    public virtual DbSet<SizeType> SizeTypes { get; set; }

    public virtual DbSet<Spanco> Spancos { get; set; }

    public virtual DbSet<StockLocation> StockLocations { get; set; }

    public virtual DbSet<Subselect> Subselects { get; set; }

    public virtual DbSet<Subselect2> Subselect2s { get; set; }

    public virtual DbSet<Supplier> Suppliers { get; set; }

    public virtual DbSet<SupplierContact> SupplierContacts { get; set; }

    public virtual DbSet<SupplierMarkup> SupplierMarkups { get; set; }

    public virtual DbSet<SupplierSalesCondition> SupplierSalesConditions { get; set; }

    public virtual DbSet<SupplierVat> SupplierVats { get; set; }

    public virtual DbSet<SuspendedDeliveryRule> SuspendedDeliveryRules { get; set; }

    public virtual DbSet<Target> Targets { get; set; }

    public virtual DbSet<TimeframeDifferenceRule> TimeframeDifferenceRules { get; set; }

    public virtual DbSet<ToDo> ToDoes { get; set; }

    public virtual DbSet<ToDoStatus> ToDoStatuses { get; set; }

    public virtual DbSet<TrackList> TrackLists { get; set; }

    public virtual DbSet<TransportType> TransportTypes { get; set; }

    public virtual DbSet<UpfrontPayment> UpfrontPayments { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<Vat> Vats { get; set; }

    public virtual DbSet<VatType> VatTypes { get; set; }

    public virtual DbSet<Voucher> Vouchers { get; set; }

    public virtual DbSet<VoucherBarcode> VoucherBarcodes { get; set; }

    public virtual DbSet<VoucherOverruleReason> VoucherOverruleReasons { get; set; }

    public virtual DbSet<VoucherType> VoucherTypes { get; set; }

    public virtual DbSet<Weather> Weathers { get; set; }

    public virtual DbSet<WebPlatformClient> WebPlatformClients { get; set; }

    public virtual DbSet<WebPlatformClientContact> WebPlatformClientContacts { get; set; }

    public virtual DbSet<WebPlatformContact> WebPlatformContacts { get; set; }

    public virtual DbSet<WebPlatformDomain> WebPlatformDomains { get; set; }

    public virtual DbSet<WebUser> WebUsers { get; set; }

    public virtual DbSet<WifiCode> WifiCodes { get; set; }

    public virtual DbSet<WpsPrePayment> WpsPrePayments { get; set; }

    public virtual DbSet<WpsToken> WpsTokens { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<AccountingCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AccountingCodes");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.CompanyId, "IX_CompanyId");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.HasIndex(e => e.JournalCode, "IX_dbo_AccountingCodes_JournalCode").HasFillFactor(90);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.InvoiceStartCode)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Company).WithMany(p => p.AccountingCodes)
                .HasForeignKey(d => d.CompanyId)
                .HasConstraintName("FK_dbo.AccountingCodes_dbo.Companies_CompanyId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.AccountingCodes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AccountingCodes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<AccountingSession>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AccountingSessions");

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.IsExportedToWps).HasColumnName("IsExportedToWPS");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.AccountingSessionType).WithMany(p => p.AccountingSessions)
                .HasForeignKey(d => d.AccountingSessionTypeId)
                .HasConstraintName("FK_dbo.AccountingSessions_dbo.AccountingSessionTypes_AccountingSessionTypeId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.AccountingSessions)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AccountingSessions_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<AccountingSessionDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AccountingSessionDocuments");

            entity.HasIndex(e => e.DocumentId, "IX_DocumentId").HasFillFactor(90);

            entity.HasIndex(e => e.AccountingSessionId, "Missing_IXNC_AccountingSessionDocuments_AccountingSession_Id_4F0A4");

            entity.Property(e => e.AccountingSessionId).HasColumnName("AccountingSession_Id");
            entity.Property(e => e.Base0).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Base12).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Base21).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Base6).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BaseContract).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BaseIc).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.BaseXp).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CredCurr).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CredEuro).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CredVat).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CredVatEuro).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DebCurr).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DebEuro).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DebVat).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DebVatEuro).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DocDate).HasColumnType("datetime");
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Total).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TotalEuro).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Vat).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Wps).HasColumnName("WPS");

            entity.HasOne(d => d.AccountingSession).WithMany(p => p.AccountingSessionDocuments)
                .HasForeignKey(d => d.AccountingSessionId)
                .HasConstraintName("FK_dbo.AccountingSessionDocuments_dbo.AccountingSessions_AccountingSession_Id");

            entity.HasOne(d => d.Document).WithMany(p => p.AccountingSessionDocuments)
                .HasForeignKey(d => d.DocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AccountingSessionDocuments_dbo.Documents_DocumentId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.AccountingSessionDocuments)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AccountingSessionDocuments_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<AccountingSessionType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AccountingSessionTypes");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.AccountingSessionTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AccountingSessionTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Action>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Actions");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Actions)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Actions_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ActionList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ActionLists");

            entity.HasIndex(e => e.ActionId, "IX_ActionId").HasFillFactor(90);

            entity.HasIndex(e => e.ReturnStateActionId, "IX_ReturnStateAction_Id").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ReturnStateActionId).HasColumnName("ReturnStateAction_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Action).WithMany(p => p.ActionLists)
                .HasForeignKey(d => d.ActionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ActionLists_dbo.Actions_ActionId");

            entity.HasOne(d => d.ReturnStateAction).WithMany(p => p.ActionLists)
                .HasForeignKey(d => d.ReturnStateActionId)
                .HasConstraintName("FK_dbo.ActionLists_dbo.ReturnStateActions_ReturnStateAction_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ActionLists)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ActionLists_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Address>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Addresses");

            entity.HasIndex(e => e.CityId, "IX_CityId").HasFillFactor(95);

            entity.Property(e => e.Attention).HasMaxLength(100);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(100);
            entity.Property(e => e.PostalCode).HasMaxLength(50);
            entity.Property(e => e.Street1).HasMaxLength(100);
            entity.Property(e => e.Street2).HasMaxLength(100);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.City).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.CityId)
                .HasConstraintName("FK_dbo.Addresses_dbo.Cities_CityId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Addresses)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Addresses_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<AdvancedPayment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AdvancedPayments");

            entity.HasIndex(e => e.AppointmentId, "IX_AppointmentId").HasFillFactor(95);

            entity.HasIndex(e => e.CustomerLegalHistoryId, "IX_CustomerLegalHistoryId").HasFillFactor(95);

            entity.HasIndex(e => e.SalesConditionId, "IX_SalesConditionId").HasFillFactor(95);

            entity.HasIndex(e => e.DueDate, "IX_dbo_AdvancedPayments_DueDate").HasFillFactor(95);

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AmountPaid).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DatePaid).HasColumnType("datetime");
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.OrderDate).HasColumnType("datetime");
            entity.Property(e => e.RappelDate).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.AdvancedPaymentState).WithMany(p => p.AdvancedPayments)
                .HasForeignKey(d => d.AdvancedPaymentStateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AdvancedPayments_dbo.AdvancedPaymentStates_AdvancedPaymentStateId");

            entity.HasOne(d => d.Appointment).WithMany(p => p.AdvancedPayments)
                .HasForeignKey(d => d.AppointmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AdvancedPayments_dbo.Appointments_AppointmentId");

            entity.HasOne(d => d.CustomerLegalHistory).WithMany(p => p.AdvancedPayments)
                .HasForeignKey(d => d.CustomerLegalHistoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AdvancedPayments_dbo.CustomerLegalHistories_CustomerLegalHistoryId");

            entity.HasOne(d => d.SalesCondition).WithMany(p => p.AdvancedPayments)
                .HasForeignKey(d => d.SalesConditionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AdvancedPayments_dbo.SalesConditions_SalesConditionId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.AdvancedPayments)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AdvancedPayments_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<AdvancedPaymentState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AdvancedPaymentStates");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.AdvancedPaymentStates)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AdvancedPaymentStates_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<AgeCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AgeCategories");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.AgeCategories)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AgeCategories_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Agent>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Agents");

            entity.HasIndex(e => e.AccountingCodeId, "IX_AccountingCodeId");

            entity.HasIndex(e => e.ContactId, "IX_ContactId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.AccountingCode).WithMany(p => p.Agents)
                .HasForeignKey(d => d.AccountingCodeId)
                .HasConstraintName("FK_dbo.Agents_dbo.AccountingCodes_AccountingCodeId");

            entity.HasOne(d => d.Contact).WithMany(p => p.Agents)
                .HasForeignKey(d => d.ContactId)
                .HasConstraintName("FK_dbo.Agents_dbo.Contacts_ContactId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Agents)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Agents_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<AgentContact>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AgentContacts");

            entity.HasIndex(e => e.AgentId, "IX_Agent_Id").HasFillFactor(90);

            entity.Property(e => e.AgentId).HasColumnName("Agent_Id");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Agent).WithMany(p => p.AgentContacts)
                .HasForeignKey(d => d.AgentId)
                .HasConstraintName("FK_dbo.AgentContacts_dbo.Agents_Agent_Id");

            entity.HasOne(d => d.Contact).WithMany(p => p.AgentContacts)
                .HasForeignKey(d => d.ContactId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AgentContacts_dbo.Contacts_ContactId");

            entity.HasOne(d => d.ContactType).WithMany(p => p.AgentContacts)
                .HasForeignKey(d => d.ContactTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AgentContacts_dbo.ContactTypes_ContactTypeId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.AgentContacts)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AgentContacts_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<AgentProductLineDelivery>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AgentProductLineDeliveries");

            entity.HasIndex(e => e.AgentId, "IX_AgentId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Agent).WithMany(p => p.AgentProductLineDeliveries)
                .HasForeignKey(d => d.AgentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AgentProductLineDeliveries_dbo.Agents_AgentId");

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.AgentProductLineDeliveries)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AgentProductLineDeliveries_dbo.ProductLineDeliveries_ProductLineDeliveryId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.AgentProductLineDeliveries)
                .HasForeignKey(d => d.SalesPeriodId)
                .HasConstraintName("FK_dbo.AgentProductLineDeliveries_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.AgentProductLineDeliveries)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AgentProductLineDeliveries_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<AgentRegion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AgentRegions");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Agent).WithMany(p => p.AgentRegions)
                .HasForeignKey(d => d.AgentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AgentRegions_dbo.Agents_AgentId");

            entity.HasOne(d => d.Region).WithMany(p => p.AgentRegions)
                .HasForeignKey(d => d.RegionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AgentRegions_dbo.Regions_RegionId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.AgentRegions)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AgentRegions_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<App>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Apps");
        });

        modelBuilder.Entity<AppVersion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AppVersions");

            entity.Property(e => e.LastVersionNumberiOs).HasColumnName("LastVersionNumberiOS");
            entity.Property(e => e.MandatoryVersionNumberiOs).HasColumnName("MandatoryVersionNumberiOS");
        });

        modelBuilder.Entity<Appointment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Appointments");

            entity.HasIndex(e => e.EmployeeId, "IX_EmployeeId").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmployeeId, e.StartDate }, "IX_dbo_Appointments_Employeeid_startdate").HasFillFactor(90);

            entity.HasIndex(e => e.StartDate, "IX_dbo_Appointments_StartDate").HasFillFactor(90);

            entity.HasIndex(e => e.IsDeleted, "IX_dbo_Appointments_isDeleted").HasFillFactor(90);

            entity.HasIndex(e => new { e.StartDate, e.EmployeeId }, "IX_dbo_Appointments_startdate_empolyeeid").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmployeeId, e.IsDeleted }, "Missing_IXNC_Appointments_EmployeeId_IsDeleted_D8136").HasFillFactor(90);

            entity.HasIndex(e => new { e.EmployeeId, e.IsDeleted, e.StartDate }, "Missing_IXNC_Appointments_EmployeeId_IsDeleted_StartDate_D3B30").HasFillFactor(90);

            entity.HasIndex(e => e.IsDeleted, "Missing_IXNC_Appointments_IsDeleted_5E292").HasFillFactor(90);

            entity.HasIndex(e => e.IsDeleted, "Missing_IXNC_Appointments_IsDeleted_9EED4").HasFillFactor(90);

            entity.HasIndex(e => new { e.IsDeleted, e.IsFixedAppointment, e.StartDate }, "Missing_IXNC_Appointments_IsDeleted_IsFixedAppointment_StartDate_4A705").HasFillFactor(90);

            entity.HasIndex(e => new { e.IsDeleted, e.StartDate }, "Missing_IXNC_Appointments_IsDeleted_StartDate_B79A7").HasFillFactor(90);

            entity.Property(e => e.AppointmentStateId).HasDefaultValueSql("((1))");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.AppointmentState).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.AppointmentStateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Appointments_dbo.AppointmentStates_AppointmentStateId");

            entity.HasOne(d => d.Employee).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Appointments_dbo.Employees_EmployeeId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Appointments)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Appointments_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<AppointmentCaresponsible>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AppointmentCAResponsibles");

            entity.ToTable("AppointmentCAResponsibles");

            entity.HasIndex(e => e.EmployeeId, "IX_EmployeeId").HasFillFactor(90);

            entity.HasIndex(e => e.SalesPeriodId, "IX_SalesPeriodId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Employee).WithMany(p => p.AppointmentCaresponsibles)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AppointmentCAResponsibles_dbo.Employees_EmployeeId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.AppointmentCaresponsibles)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AppointmentCAResponsibles_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.AppointmentCaresponsibles)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AppointmentCAResponsibles_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<AppointmentContact>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AppointmentContacts");

            entity.HasIndex(e => e.AppointmentId, "IX_Appointment_Id").HasFillFactor(90);

            entity.Property(e => e.AppointmentId).HasColumnName("Appointment_Id");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Appointment).WithMany(p => p.AppointmentContacts)
                .HasForeignKey(d => d.AppointmentId)
                .HasConstraintName("FK_dbo.AppointmentContacts_dbo.Appointments_Appointment_Id");

            entity.HasOne(d => d.Contact).WithMany(p => p.AppointmentContacts)
                .HasForeignKey(d => d.ContactId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AppointmentContacts_dbo.Contacts_ContactId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.AppointmentContacts)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AppointmentContacts_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<AppointmentDepartmentResponsible>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AppointmentDepartmentResponsibles");

            entity.HasIndex(e => e.CustomerId, "IX_CustomerId").HasFillFactor(95);

            entity.HasIndex(e => e.DepartmentId, "IX_DepartmentId").HasFillFactor(95);

            entity.HasIndex(e => e.SalesPeriodId, "IX_SalesPeriodId").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Customer).WithMany(p => p.AppointmentDepartmentResponsibles)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AppointmentDepartmentResponsibles_dbo.Customers_CustomerId");

            entity.HasOne(d => d.Department).WithMany(p => p.AppointmentDepartmentResponsibles)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AppointmentDepartmentResponsibles_dbo.Departments_DepartmentId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.AppointmentDepartmentResponsibles)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AppointmentDepartmentResponsibles_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.AppointmentDepartmentResponsibles)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AppointmentDepartmentResponsibles_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<AppointmentSalesResponsible>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AppointmentSalesResponsibles");

            entity.HasIndex(e => e.EmployeeId, "IX_EmployeeId").HasFillFactor(90);

            entity.HasIndex(e => e.ProductLineDeliveryId, "IX_ProductLineDeliveryId").HasFillFactor(90);

            entity.HasIndex(e => e.SalesPeriodId, "IX_SalesPeriodId").HasFillFactor(90);

            entity.HasIndex(e => e.ShopId, "IX_ShopId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Employee).WithMany(p => p.AppointmentSalesResponsibles)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AppointmentSalesResponsibles_dbo.Employees_EmployeeId");

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.AppointmentSalesResponsibles)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AppointmentSalesResponsibles_dbo.ProductLineDeliveries_ProductLineDeliveryId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.AppointmentSalesResponsibles)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AppointmentSalesResponsibles_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.Shop).WithMany(p => p.AppointmentSalesResponsibles)
                .HasForeignKey(d => d.ShopId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AppointmentSalesResponsibles_dbo.Shops_ShopId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.AppointmentSalesResponsibles)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AppointmentSalesResponsibles_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<AppointmentState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AppointmentStates");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.AppointmentStates)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AppointmentStates_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<AvailabilityDay>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AvailabilityDays");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.HasIndex(e => e.Order, "IX_dbo_AvailabilityDays_Order").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.AvailabilityDays)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AvailabilityDays_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<AvailabilityType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.AvailabilityTypes");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.HasIndex(e => e.Order, "IX_dbo_AvailabilityTypes_Order").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.AvailabilityTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.AvailabilityTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Barcode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Barcodes");

            entity.HasIndex(e => e.BarcodeId, "IX_Barcode_Id").HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.BarcodeId).HasColumnName("Barcode_Id");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.BarcodeNavigation).WithMany(p => p.InverseBarcodeNavigation)
                .HasForeignKey(d => d.BarcodeId)
                .HasConstraintName("FK_dbo.Barcodes_dbo.Barcodes_Barcode_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Barcodes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Barcodes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<BiEmployeeDailyBarcodeResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.BI_EmployeeDailyBarcodeResult");

            entity.ToTable("BI_EmployeeDailyBarcodeResult");

            entity.HasIndex(e => e.BarcodeId, "IX_BarcodeId").HasFillFactor(95);

            entity.HasIndex(e => e.EmployeeId, "IX_EmployeeId").HasFillFactor(95);

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LoyaltyDiscount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SalesResult).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Barcode).WithMany(p => p.BiEmployeeDailyBarcodeResults)
                .HasForeignKey(d => d.BarcodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.BI_EmployeeDailyBarcodeResult_dbo.Barcodes_BarcodeId");

            entity.HasOne(d => d.Employee).WithMany(p => p.BiEmployeeDailyBarcodeResults)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.BI_EmployeeDailyBarcodeResult_dbo.Employees_EmployeeId");
        });

        modelBuilder.Entity<BiEmployeeDailyGeneralResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.BI_EmployeeDailyGeneralResult");

            entity.ToTable("BI_EmployeeDailyGeneralResult");

            entity.HasIndex(e => e.EmployeeId, "IX_EmployeeId").HasFillFactor(95);

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LoyaltyDiscount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PurchaseValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SalesResult).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Employee).WithMany(p => p.BiEmployeeDailyGeneralResults)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.BI_EmployeeDailyGeneralResult_dbo.Employees_EmployeeId");
        });

        modelBuilder.Entity<BiEmployeeDailyGroupResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.BI_EmployeeDailyGroupResult");

            entity.ToTable("BI_EmployeeDailyGroupResult");

            entity.HasIndex(e => e.EmployeeId, "IX_EmployeeId").HasFillFactor(95);

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LoyaltyDiscount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PurchaseValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SalesResult).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Employee).WithMany(p => p.BiEmployeeDailyGroupResults)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.BI_EmployeeDailyGroupResult_dbo.Employees_EmployeeId");
        });

        modelBuilder.Entity<BiEmployeeDailyGroupSeasonResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.BI_EmployeeDailyGroupSeasonResult");

            entity.ToTable("BI_EmployeeDailyGroupSeasonResult");

            entity.HasIndex(e => e.EmployeeId, "IX_EmployeeId").HasFillFactor(95);

            entity.HasIndex(e => e.SalesPeriodId, "IX_SalesPeriodId").HasFillFactor(95);

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.LoyaltyDiscount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PurchaseValue).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SalesResult).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Employee).WithMany(p => p.BiEmployeeDailyGroupSeasonResults)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.BI_EmployeeDailyGroupSeasonResult_dbo.Employees_EmployeeId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.BiEmployeeDailyGroupSeasonResults)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.BI_EmployeeDailyGroupSeasonResult_dbo.SalesPeriods_SalesPeriodId");
        });

        modelBuilder.Entity<BiShopDailySeasonalBrandResult>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.BI_ShopDailySeasonalBrandResult");

            entity.ToTable("BI_ShopDailySeasonalBrandResult");

            entity.HasIndex(e => e.BrandId, "IX_BrandId").HasFillFactor(95);

            entity.HasIndex(e => e.SalesPeriodId, "IX_SalesPeriodId").HasFillFactor(95);

            entity.HasIndex(e => e.StockLocationId, "IX_StockLocationId").HasFillFactor(95);

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.SalesResult).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SalesResultPy)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SalesResultPY");

            entity.HasOne(d => d.Brand).WithMany(p => p.BiShopDailySeasonalBrandResults)
                .HasForeignKey(d => d.BrandId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.BI_ShopDailySeasonalBrandResult_dbo.Brands_BrandId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.BiShopDailySeasonalBrandResults)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.BI_ShopDailySeasonalBrandResult_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.StockLocation).WithMany(p => p.BiShopDailySeasonalBrandResults)
                .HasForeignKey(d => d.StockLocationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.BI_ShopDailySeasonalBrandResult_dbo.StockLocations_StockLocationId");
        });

        modelBuilder.Entity<BleckmannImportedFile>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.BleckmannImportedFiles");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.BleckmannImportedFiles)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.BleckmannImportedFiles_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<BleckmannSkuSync>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.BleckmannSkuSyncs");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.BleckmannSkuSyncs)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.BleckmannSkuSyncs_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<BleckmannTransportState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.BleckmannTransportStates");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.BleckmannTransportStates)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.BleckmannTransportStates_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<BlockedByFdiReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.BlockedByFdiReasons");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.BlockedByFdiReasons)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.BlockedByFdiReasons_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<BlockedType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.BlockedTypes");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.BlockedTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.BlockedTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Brand>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Brands");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Ean).HasColumnName("EAN");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Brands)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Brands_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<City>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Cities");

            entity.HasIndex(e => e.CountryId, "IX_CountryId").HasFillFactor(95);

            entity.HasIndex(e => e.Name, "IX_Name").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.PostalCode).HasMaxLength(50);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Country).WithMany(p => p.Cities)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Cities_dbo.Countries_CountryId");

            entity.HasOne(d => d.Province).WithMany(p => p.Cities)
                .HasForeignKey(d => d.ProvinceId)
                .HasConstraintName("FK_dbo.Cities_dbo.Provinces_ProvinceId");

            entity.HasOne(d => d.Region).WithMany(p => p.Cities)
                .HasForeignKey(d => d.RegionId)
                .HasConstraintName("FK_dbo.Cities_dbo.Regions_RegionId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Cities)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Cities_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CityPriceRegion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CityPriceRegions");

            entity.HasIndex(e => e.CityId, "IX_CityId").HasFillFactor(95);

            entity.HasIndex(e => e.RegionId, "IX_RegionId").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.City).WithMany(p => p.CityPriceRegions)
                .HasForeignKey(d => d.CityId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CityPriceRegions_dbo.Cities_CityId");

            entity.HasOne(d => d.Region).WithMany(p => p.CityPriceRegions)
                .HasForeignKey(d => d.RegionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CityPriceRegions_dbo.Regions_RegionId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CityPriceRegions)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CityPriceRegions_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CollectionDelivery>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CollectionDeliveries");

            entity.HasIndex(e => e.ProductLineDeliveryId, "IX_ProductLineDeliveryId").HasFillFactor(95);

            entity.HasIndex(e => e.SalesPeriodId, "IX_SalesPeriodId").HasFillFactor(95);

            entity.HasIndex(e => e.SupplierId, "IX_SupplierId").HasFillFactor(95);

            entity.HasIndex(e => e.SalesPeriodId, "Missing_IXNC_CollectionDeliveries_SalesPeriodId_D6426");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DateCompleted).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.InvoiceAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ProductLineDeliveryId).HasDefaultValueSql("((0))");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Brand).WithMany(p => p.CollectionDeliveries)
                .HasForeignKey(d => d.BrandId)
                .HasConstraintName("FK_dbo.CollectionDeliveries_dbo.Brands_BrandId");

            entity.HasOne(d => d.CollectionDeliveryCategory).WithMany(p => p.CollectionDeliveries)
                .HasForeignKey(d => d.CollectionDeliveryCategoryId)
                .HasConstraintName("FK_dbo.CollectionDeliveries_dbo.CollectionDeliveryCategories_CollectionDeliveryCategoryId");

            entity.HasOne(d => d.CollectionDeliveryLocation).WithMany(p => p.CollectionDeliveries)
                .HasForeignKey(d => d.CollectionDeliveryLocationId)
                .HasConstraintName("FK_dbo.CollectionDeliveries_dbo.CollectionDeliveryLocations_CollectionDeliveryLocationId");

            entity.HasOne(d => d.CollectionDeliveryType).WithMany(p => p.CollectionDeliveries)
                .HasForeignKey(d => d.CollectionDeliveryTypeId)
                .HasConstraintName("FK_dbo.CollectionDeliveries_dbo.CollectionDeliveryTypes_CollectionDeliveryTypeId");

            entity.HasOne(d => d.CollectionDeliveryWarehouse).WithMany(p => p.CollectionDeliveries)
                .HasForeignKey(d => d.CollectionDeliveryWarehouseId)
                .HasConstraintName("FK_dbo.CollectionDeliveries_dbo.CollectionDeliveryWarehouses_CollectionDeliveryWarehouseId");

            entity.HasOne(d => d.Employee).WithMany(p => p.CollectionDeliveryEmployees)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_dbo.CollectionDeliveries_dbo.Employees_EmployeeId");

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.CollectionDeliveries)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .HasConstraintName("FK_dbo.CollectionDeliveries_dbo.ProductLineDeliveries_ProductLineDeliveryId");

            entity.HasOne(d => d.SalesEmployee).WithMany(p => p.CollectionDeliverySalesEmployees)
                .HasForeignKey(d => d.SalesEmployeeId)
                .HasConstraintName("FK_dbo.CollectionDeliveries_dbo.Employees_SalesEmployeeId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.CollectionDeliveries)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CollectionDeliveries_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.SampleDestination).WithMany(p => p.CollectionDeliveries)
                .HasForeignKey(d => d.SampleDestinationId)
                .HasConstraintName("FK_dbo.CollectionDeliveries_dbo.SampleDestinations_SampleDestinationId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.CollectionDeliveries)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK_dbo.CollectionDeliveries_dbo.Suppliers_SupplierId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CollectionDeliveries)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CollectionDeliveries_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CollectionDeliveryCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CollectionDeliveryCategories");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CollectionDeliveryCategories)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CollectionDeliveryCategories_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CollectionDeliveryLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CollectionDeliveryLocations");

            entity.HasIndex(e => e.Name, "IX_Name").IsUnique();

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CollectionDeliveryLocations)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CollectionDeliveryLocations_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CollectionDeliveryType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CollectionDeliveryTypes");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CollectionDeliveryTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CollectionDeliveryTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CollectionDeliveryWarehouse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CollectionDeliveryWarehouses");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CollectionDeliveryWarehouses)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CollectionDeliveryWarehouses_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CollectionSaleInvitationSendRange>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CollectionSaleInvitationSendRanges");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CollectionSaleInvitationSendRanges)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CollectionSaleInvitationSendRanges_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CollectionSaleSignUp>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CollectionSaleSignUps");

            entity.HasIndex(e => e.CustomerInvitationId, "IX_CustomerInvitationId").HasFillFactor(95);

            entity.HasIndex(e => e.InvitationTypeId, "IX_InvitationTypeId").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.CustomerInvitation).WithMany(p => p.CollectionSaleSignUps)
                .HasForeignKey(d => d.CustomerInvitationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CollectionSaleSignUps_dbo.CustomerInvitations_CustomerInvitationId");

            entity.HasOne(d => d.InvitationType).WithMany(p => p.CollectionSaleSignUps)
                .HasForeignKey(d => d.InvitationTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CollectionSaleSignUps_dbo.InvitationTypes_InvitationTypeId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CollectionSaleSignUps)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CollectionSaleSignUps_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CollectionSalesInvitation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CollectionSalesInvitations");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.DateUpdated).HasColumnType("datetime");

            entity.HasOne(d => d.CollectionSalesInvitationType).WithMany(p => p.CollectionSalesInvitations)
                .HasForeignKey(d => d.CollectionSalesInvitationTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CollectionSalesInvitations_dbo.CollectionSalesInvitationTypes_CollectionSalesInvitationTypeId");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CollectionSalesInvitation)
                .HasForeignKey<CollectionSalesInvitation>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CollectionSalesInvitations_dbo.Invitations_Id");
        });

        modelBuilder.Entity<CollectionSalesInvitationType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CollectionSalesInvitationTypes");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CollectionSalesInvitationTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CollectionSalesInvitationTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Color>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Colors");

            entity.HasIndex(e => e.SupplierId, "IX_SupplierId").HasFillFactor(95);

            entity.HasIndex(e => e.SupplierId, "Missing_IXNC_Colors_SupplierId_7CE33");

            entity.Property(e => e.Code).IsRequired();
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Supplier).WithMany(p => p.Colors)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Colors_dbo.Suppliers_SupplierId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Colors)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Colors_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CommercialLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CommercialLocations");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CommercialLocations)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CommercialLocations_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Company>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Companies");

            entity.HasIndex(e => e.AddressId, "IX_AddressId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Address).WithMany(p => p.Companies)
                .HasForeignKey(d => d.AddressId)
                .HasConstraintName("FK_dbo.Companies_dbo.Addresses_AddressId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Companies)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Companies_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CompetitorBrand>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CompetitorBrands");

            entity.HasIndex(e => e.Name, "IX_Name").IsUnique();

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CompetitorBrands)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CompetitorBrands_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ConfigurationSetting>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ConfigurationSettings");
        });

        modelBuilder.Entity<Contact>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Contacts");

            entity.HasIndex(e => e.AddressId, "IX_AddressId").HasFillFactor(90);

            entity.HasIndex(e => e.WebUserId, "IX_WebUserId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.FirstName).HasMaxLength(50);
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Remarks).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Address).WithMany(p => p.Contacts)
                .HasForeignKey(d => d.AddressId)
                .HasConstraintName("FK_dbo.Contacts_dbo.Addresses_AddressId");

            entity.HasOne(d => d.Language).WithMany(p => p.Contacts)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_dbo.Contacts_dbo.Languages_LanguageId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Contacts)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Contacts_dbo.Users_UserCreatedId");

            entity.HasOne(d => d.WebUser).WithMany(p => p.Contacts)
                .HasForeignKey(d => d.WebUserId)
                .HasConstraintName("FK_dbo.Contacts_dbo.WebUsers_WebUserId");
        });

        modelBuilder.Entity<ContactChannel>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ContactChannels");

            entity.HasIndex(e => e.ContactId, "IX_Contact_Id").HasFillFactor(90);

            entity.Property(e => e.ContactId).HasColumnName("Contact_Id");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Remarks).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Value).HasMaxLength(100);

            entity.HasOne(d => d.ContactChannelDescription).WithMany(p => p.ContactChannels)
                .HasForeignKey(d => d.ContactChannelDescriptionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ContactChannels_dbo.ContactChannelDescriptions_ContactChannelDescriptionId");

            entity.HasOne(d => d.Contact).WithMany(p => p.ContactChannels)
                .HasForeignKey(d => d.ContactId)
                .HasConstraintName("FK_dbo.ContactChannels_dbo.Contacts_Contact_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ContactChannels)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ContactChannels_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ContactChannelDescription>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ContactChannelDescriptions");

            entity.HasIndex(e => e.ContactChannelTypeId, "IX_ContactChannelTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.HasIndex(e => e.Order, "IX_dbo_ContactChannelDescriptions_Order").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ContactChannelType).WithMany(p => p.ContactChannelDescriptions)
                .HasForeignKey(d => d.ContactChannelTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ContactChannelDescriptions_dbo.ContactChannelTypes_ContactChannelTypeId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ContactChannelDescriptions)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ContactChannelDescriptions_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ContactChannelInterest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ContactChannelInterests");

            entity.HasIndex(e => e.ContactChannelId, "IX_ContactChannelId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ContactChannel).WithMany(p => p.ContactChannelInterests)
                .HasForeignKey(d => d.ContactChannelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ContactChannelInterests_dbo.ContactChannels_ContactChannelId");

            entity.HasOne(d => d.ContactChannelInterestType).WithMany(p => p.ContactChannelInterests)
                .HasForeignKey(d => d.ContactChannelInterestTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ContactChannelInterests_dbo.ContactChannelInterestTypes_ContactChannelInterestTypeId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ContactChannelInterests)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ContactChannelInterests_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ContactChannelInterestType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ContactChannelInterestTypes");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ContactChannelInterestTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ContactChannelInterestTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ContactChannelOptIn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ContactChannelOptIns");

            entity.HasIndex(e => e.ContactChannelId, "IX_ContactChannelId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.OptInDate).HasColumnType("datetime");
            entity.Property(e => e.OptOutDate).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ContactChannel).WithMany(p => p.ContactChannelOptIns)
                .HasForeignKey(d => d.ContactChannelId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ContactChannelOptIns_dbo.ContactChannels_ContactChannelId");

            entity.HasOne(d => d.OptInSource).WithMany(p => p.ContactChannelOptIns)
                .HasForeignKey(d => d.OptInSourceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ContactChannelOptIns_dbo.OptInSources_OptInSourceId");

            entity.HasOne(d => d.OptInType).WithMany(p => p.ContactChannelOptIns)
                .HasForeignKey(d => d.OptInTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ContactChannelOptIns_dbo.OptInTypes_OptInTypeId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ContactChannelOptIns)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ContactChannelOptIns_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ContactChannelType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ContactChannelTypes");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ContactChannelTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ContactChannelTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ContactType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ContactTypes");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.HasIndex(e => e.Order, "IX_dbo_ContactTypes_Order").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ContactTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ContactTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ContractState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ContractStates");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ContractStates)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ContractStates_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Country>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Countries");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.PaymentConditionId, "IX_PaymentConditionId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.HasIndex(e => e.VatTypeId, "IX_VatTypeId").HasFillFactor(90);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Currency).WithMany(p => p.Countries)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Countries_dbo.Currencies_CurrencyId");

            entity.HasOne(d => d.PaymentCondition).WithMany(p => p.Countries)
                .HasForeignKey(d => d.PaymentConditionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Countries_dbo.PaymentConditions_PaymentConditionId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Countries)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Countries_dbo.Users_UserCreatedId");

            entity.HasOne(d => d.VatType).WithMany(p => p.Countries)
                .HasForeignKey(d => d.VatTypeId)
                .HasConstraintName("FK_dbo.Countries_dbo.VatTypes_VatTypeId");
        });

        modelBuilder.Entity<Currency>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Currencies");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(3);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Currencies)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Currencies_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Customer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Customers");

            entity.HasIndex(e => e.BlockedTypeId, "IX_BlockedTypeId").HasFillFactor(95);

            entity.HasIndex(e => e.CustomerTypeId, "IX_CustomerTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.GenderId, "IX_GenderId");

            entity.HasIndex(e => e.VatTypeId, "IX_VatTypeId").HasFillFactor(90);

            entity.HasIndex(e => new { e.CustomerTypeId, e.IsDeleted }, "Missing_IXNC_Customers_CustomerTypeId_IsDeleted_5DF16");

            entity.HasIndex(e => new { e.CustomerTypeId, e.IsDeleted }, "Missing_IXNC_Customers_CustomerTypeId_IsDeleted_9691B");

            entity.HasIndex(e => new { e.CustomerTypeId, e.IsDeleted }, "Missing_IXNC_Customers_CustomerTypeId_IsDeleted_B75BA");

            entity.Property(e => e.AccountNr).HasMaxLength(50);
            entity.Property(e => e.AnniversaryDay).HasColumnType("datetime");
            entity.Property(e => e.BankName).HasMaxLength(100);
            entity.Property(e => e.Bic).HasMaxLength(50);
            entity.Property(e => e.BlockedDate).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DateUpdated).HasColumnType("datetime");
            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Iban).HasMaxLength(50);
            entity.Property(e => e.MaximumBudget).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MiscAccountingCode).HasMaxLength(6);
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.SearchName).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.AccountingCode).WithMany(p => p.Customers)
                .HasForeignKey(d => d.AccountingCodeId)
                .HasConstraintName("FK_dbo.Customers_dbo.AccountingCodes_AccountingCodeId");

            entity.HasOne(d => d.Agent).WithMany(p => p.Customers)
                .HasForeignKey(d => d.AgentId)
                .HasConstraintName("FK_dbo.Customers_dbo.Agents_AgentId");

            entity.HasOne(d => d.BankCity).WithMany(p => p.Customers)
                .HasForeignKey(d => d.BankCityId)
                .HasConstraintName("FK_dbo.Customers_dbo.Cities_BankCityId");

            entity.HasOne(d => d.BlockedType).WithMany(p => p.Customers)
                .HasForeignKey(d => d.BlockedTypeId)
                .HasConstraintName("FK_dbo.Customers_dbo.BlockedTypes_BlockedTypeId");

            entity.HasOne(d => d.Currency).WithMany(p => p.Customers)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_dbo.Customers_dbo.Currencies_CurrencyId");

            entity.HasOne(d => d.CustomerLoyalty).WithMany(p => p.Customers)
                .HasForeignKey(d => d.CustomerLoyaltyId)
                .HasConstraintName("FK_dbo.Customers_dbo.CustomerLoyalties_CustomerLoyaltyId");

            entity.HasOne(d => d.CustomerType).WithMany(p => p.Customers)
                .HasForeignKey(d => d.CustomerTypeId)
                .HasConstraintName("FK_dbo.Customers_dbo.CustomerTypes_CustomerTypeId");

            entity.HasOne(d => d.DeliveryLocationType).WithMany(p => p.Customers)
                .HasForeignKey(d => d.DeliveryLocationTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Customers_dbo.DeliveryLocationTypes_DeliveryLocationTypeId");

            entity.HasOne(d => d.DeliveryMethod).WithMany(p => p.Customers)
                .HasForeignKey(d => d.DeliveryMethodId)
                .HasConstraintName("FK_dbo.Customers_dbo.DeliveryMethods_DeliveryMethodId");

            entity.HasOne(d => d.Gender).WithMany(p => p.Customers)
                .HasForeignKey(d => d.GenderId)
                .HasConstraintName("FK_dbo.Customers_dbo.Genders_GenderId");

            entity.HasOne(d => d.KeyAccountManager).WithMany(p => p.Customers)
                .HasForeignKey(d => d.KeyAccountManagerId)
                .HasConstraintName("FK_dbo.Customers_dbo.Employees_KeyAccountManagerId");

            entity.HasOne(d => d.PaymentCondition).WithMany(p => p.Customers)
                .HasForeignKey(d => d.PaymentConditionId)
                .HasConstraintName("FK_dbo.Customers_dbo.PaymentConditions_PaymentConditionId");

            entity.HasOne(d => d.UpfrontPayment).WithMany(p => p.Customers)
                .HasForeignKey(d => d.UpfrontPaymentId)
                .HasConstraintName("FK_dbo.Customers_dbo.UpfrontPayments_UpfrontPaymentId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Customers)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Customers_dbo.Users_UserCreatedId");

            entity.HasOne(d => d.VatType).WithMany(p => p.Customers)
                .HasForeignKey(d => d.VatTypeId)
                .HasConstraintName("FK_dbo.Customers_dbo.VatTypes_VatTypeId");
        });

        modelBuilder.Entity<CustomerBlockedRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CustomerBlockedRules");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(95);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Date).HasColumnType("datetime");

            entity.HasOne(d => d.BlockedType).WithMany(p => p.CustomerBlockedRules)
                .HasForeignKey(d => d.BlockedTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerBlockedRules_dbo.BlockedTypes_BlockedTypeId");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.CustomerBlockedRule)
                .HasForeignKey<CustomerBlockedRule>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerBlockedRules_dbo.Rules_Id");
        });

        modelBuilder.Entity<CustomerCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CustomerCodes");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CustomerCodes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerCodes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CustomerContact>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CustomerContacts");

            entity.HasIndex(e => e.ContactId, "IX_ContactId").HasFillFactor(90);

            entity.HasIndex(e => e.CustomerId, "IX_Customer_Id").HasFillFactor(90);

            entity.Property(e => e.CustomerId).HasColumnName("Customer_Id");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Contact).WithMany(p => p.CustomerContacts)
                .HasForeignKey(d => d.ContactId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerContacts_dbo.Contacts_ContactId");

            entity.HasOne(d => d.ContactType).WithMany(p => p.CustomerContacts)
                .HasForeignKey(d => d.ContactTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerContacts_dbo.ContactTypes_ContactTypeId");

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerContacts)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_dbo.CustomerContacts_dbo.Customers_Customer_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CustomerContacts)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerContacts_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CustomerGuarantee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CustomerGuarantees");

            entity.HasIndex(e => e.RatingTypeId, "IX_RatingTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.SalesPeriodId, "IX_SalesPeriodId").HasFillFactor(90);

            entity.Property(e => e.AmountGuaranteed).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.AmountRequested).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CustomerId).HasColumnName("Customer_Id");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DateRequested).HasColumnType("datetime");
            entity.Property(e => e.DateResponse).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerGuarantees)
                .HasForeignKey(d => d.CustomerId)
                .HasConstraintName("FK_dbo.CustomerGuarantees_dbo.Customers_Customer_Id");

            entity.HasOne(d => d.RatingType).WithMany(p => p.CustomerGuarantees)
                .HasForeignKey(d => d.RatingTypeId)
                .HasConstraintName("FK_dbo.CustomerGuarantees_dbo.RatingTypes_RatingTypeId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.CustomerGuarantees)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerGuarantees_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CustomerGuarantees)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerGuarantees_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CustomerInvitation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CustomerInvitations");

            entity.HasIndex(e => e.CustomerId, "IX_CustomerId").HasFillFactor(90);

            entity.HasIndex(e => e.InvitationId, "IX_InvitationId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerInvitations)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerInvitations_dbo.Customers_CustomerId");

            entity.HasOne(d => d.Invitation).WithMany(p => p.CustomerInvitations)
                .HasForeignKey(d => d.InvitationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerInvitations_dbo.Invitations_InvitationId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CustomerInvitations)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerInvitations_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CustomerLegalHistory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CustomerLegalHistories");

            entity.HasIndex(e => e.CustomerCodeId, "IX_CustomerCodeId").HasFillFactor(90);

            entity.HasIndex(e => e.CustomerId, "IX_CustomerId").HasFillFactor(90);

            entity.HasIndex(e => e.LegalContactId, "IX_LegalContactId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Kvk).HasMaxLength(25);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.VatNr).HasMaxLength(25);

            entity.HasOne(d => d.CustomerCode).WithMany(p => p.CustomerLegalHistories)
                .HasForeignKey(d => d.CustomerCodeId)
                .HasConstraintName("FK_dbo.CustomerLegalHistories_dbo.CustomerCodes_CustomerCodeId");

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerLegalHistories)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerLegalHistories_dbo.Customers_CustomerId");

            entity.HasOne(d => d.LegalContact).WithMany(p => p.CustomerLegalHistories)
                .HasForeignKey(d => d.LegalContactId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerLegalHistories_dbo.Contacts_LegalContactId");

            entity.HasOne(d => d.LegalForm).WithMany(p => p.CustomerLegalHistories)
                .HasForeignKey(d => d.LegalFormId)
                .HasConstraintName("FK_dbo.CustomerLegalHistories_dbo.LegalForms_LegalFormId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CustomerLegalHistories)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerLegalHistories_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CustomerLoyalty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CustomerLoyalties");

            entity.HasIndex(e => e.LoyaltyTypeId, "IX_LoyaltyTypeId").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.CurrentAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ExpirationDate).HasColumnType("datetime");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.LoyaltyType).WithMany(p => p.CustomerLoyalties)
                .HasForeignKey(d => d.LoyaltyTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerLoyalties_dbo.LoyaltyTypes_LoyaltyTypeId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CustomerLoyalties)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerLoyalties_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CustomerOptIn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CustomerOptIns");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CustomerOptIns)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerOptIns_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CustomerReportConfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CustomerReportConfigurations");

            entity.HasIndex(e => e.SupplierCode, "IX_SupplierCode")
                .IsUnique()
                .HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.SupplierCode).HasMaxLength(200);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CustomerReportConfigurations)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerReportConfigurations_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CustomerRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CustomerRules");

            entity.HasIndex(e => e.CustomerId, "IX_CustomerId").HasFillFactor(95);

            entity.HasIndex(e => e.RuleId, "IX_RuleId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerRules)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerRules_dbo.Customers_CustomerId");

            entity.HasOne(d => d.Rule).WithMany(p => p.CustomerRules)
                .HasForeignKey(d => d.RuleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerRules_dbo.Rules_RuleId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CustomerRules)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerRules_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CustomerShop>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CustomerShops");

            entity.HasIndex(e => e.CustomerId, "IX_CustomerId").HasFillFactor(90);

            entity.HasIndex(e => e.ShopId, "IX_ShopId").HasFillFactor(90);

            entity.HasIndex(e => new { e.ShopId, e.CustomerId }, "IX_dbo_CustomerShops_covering").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerShops)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerShops_dbo.Customers_CustomerId");

            entity.HasOne(d => d.Shop).WithMany(p => p.CustomerShops)
                .HasForeignKey(d => d.ShopId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerShops_dbo.Shops_ShopId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CustomerShops)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerShops_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CustomerType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CustomerTypes");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CustomerTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CustomerTypeFeature>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CustomerTypeFeatures");

            entity.HasIndex(e => e.CustomerTypeId, "IX_CustomerTypeId").HasFillFactor(95);

            entity.HasIndex(e => e.FeatureId, "IX_FeatureId").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.CustomerType).WithMany(p => p.CustomerTypeFeatures)
                .HasForeignKey(d => d.CustomerTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerTypeFeatures_dbo.CustomerTypes_CustomerTypeId");

            entity.HasOne(d => d.Feature).WithMany(p => p.CustomerTypeFeatures)
                .HasForeignKey(d => d.FeatureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerTypeFeatures_dbo.Features_FeatureId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CustomerTypeFeatures)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerTypeFeatures_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<CustomerWifiCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CustomerWifiCodes");

            entity.HasIndex(e => e.CustomerId, "IX_CustomerId").HasFillFactor(95);

            entity.HasIndex(e => e.WifiCodeId, "IX_WifiCodeId")
                .IsUnique()
                .HasFillFactor(95);

            entity.Property(e => e.DateAssigned).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerWifiCodes)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerWifiCodes_dbo.Customers_CustomerId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CustomerWifiCodes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerWifiCodes_dbo.Users_UserCreatedId");

            entity.HasOne(d => d.WifiCode).WithOne(p => p.CustomerWifiCode)
                .HasForeignKey<CustomerWifiCode>(d => d.WifiCodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerWifiCodes_dbo.WifiCodes_WifiCodeId");
        });

        modelBuilder.Entity<CustomerWpsStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.CustomerWpsStatus");

            entity.ToTable("CustomerWpsStatus");

            entity.HasIndex(e => e.BlockedByFdiReasonId, "IX_BlockedByFdiReasonId").HasFillFactor(95);

            entity.HasIndex(e => e.CustomerId, "IX_CustomerId").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.BlockedByFdiReason).WithMany(p => p.CustomerWpsStatuses)
                .HasForeignKey(d => d.BlockedByFdiReasonId)
                .HasConstraintName("FK_dbo.CustomerWpsStatus_dbo.BlockedByFdiReasons_BlockedByFdiReasonId");

            entity.HasOne(d => d.Customer).WithMany(p => p.CustomerWpsStatuses)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerWpsStatus_dbo.Customers_CustomerId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.CustomerWpsStatuses)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.CustomerWpsStatus_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DataQueryLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DataQueryLogs");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DataQueryLogs)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DataQueryLogs_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DedicatedSalesRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DedicatedSalesRules");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(95);

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.Employee).WithMany(p => p.DedicatedSalesRules)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DedicatedSalesRules_dbo.Employees_EmployeeId");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DedicatedSalesRule)
                .HasForeignKey<DedicatedSalesRule>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DedicatedSalesRules_dbo.Rules_Id");

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.DedicatedSalesRules)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .HasConstraintName("FK_dbo.DedicatedSalesRules_dbo.ProductLineDeliveries_ProductLineDeliveryId");

            entity.HasOne(d => d.ProductLine).WithMany(p => p.DedicatedSalesRules)
                .HasForeignKey(d => d.ProductLineId)
                .HasConstraintName("FK_dbo.DedicatedSalesRules_dbo.ProductLines_ProductLineId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.DedicatedSalesRules)
                .HasForeignKey(d => d.SalesPeriodId)
                .HasConstraintName("FK_dbo.DedicatedSalesRules_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.DedicatedSalesRules)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK_dbo.DedicatedSalesRules_dbo.Suppliers_SupplierId");
        });

        modelBuilder.Entity<DelayedDeliveryProposedRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DelayedDeliveryProposedRules");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(90);

            entity.HasIndex(e => e.ProductLineDeliveryId, "IX_ProductLineDeliveryId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Date).HasColumnType("datetime");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DelayedDeliveryProposedRule)
                .HasForeignKey<DelayedDeliveryProposedRule>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DelayedDeliveryProposedRules_dbo.ProposedRules_Id");

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.DelayedDeliveryProposedRules)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .HasConstraintName("FK_dbo.DelayedDeliveryProposedRules_dbo.ProductLineDeliveries_ProductLineDeliveryId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.DelayedDeliveryProposedRules)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DelayedDeliveryProposedRules_dbo.SalesPeriods_SalesPeriodId");
        });

        modelBuilder.Entity<DelayedDeliveryProposedRuleShop>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DelayedDeliveryProposedRuleShops");

            entity.HasIndex(e => e.DelayedDeliveryProposedRuleId, "IX_DelayedDeliveryProposedRule_Id").HasFillFactor(90);

            entity.HasIndex(e => e.ShopId, "IX_ShopId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DelayedDeliveryProposedRuleId).HasColumnName("DelayedDeliveryProposedRule_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.DelayedDeliveryProposedRule).WithMany(p => p.DelayedDeliveryProposedRuleShops)
                .HasForeignKey(d => d.DelayedDeliveryProposedRuleId)
                .HasConstraintName("FK_dbo.DelayedDeliveryProposedRuleShops_dbo.DelayedDeliveryProposedRules_DelayedDeliveryProposedRule_Id");

            entity.HasOne(d => d.Shop).WithMany(p => p.DelayedDeliveryProposedRuleShops)
                .HasForeignKey(d => d.ShopId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DelayedDeliveryProposedRuleShops_dbo.Shops_ShopId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DelayedDeliveryProposedRuleShops)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DelayedDeliveryProposedRuleShops_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DelayedDeliveryRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DelayedDeliveryRules");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Date).HasColumnType("datetime");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DelayedDeliveryRule)
                .HasForeignKey<DelayedDeliveryRule>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DelayedDeliveryRules_dbo.Rules_Id");

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.DelayedDeliveryRules)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .HasConstraintName("FK_dbo.DelayedDeliveryRules_dbo.ProductLineDeliveries_ProductLineDeliveryId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.DelayedDeliveryRules)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DelayedDeliveryRules_dbo.SalesPeriods_SalesPeriodId");
        });

        modelBuilder.Entity<DelayedDeliveryRuleProductLineDelivery>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DelayedDeliveryRuleProductLineDeliveries");

            entity.HasIndex(e => e.DelayedDeliveryRuleId, "IX_DelayedDeliveryRuleId").HasFillFactor(95);

            entity.HasIndex(e => e.ProductLineDeliveryId, "IX_ProductLineDeliveryId").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.DelayedDeliveryRule).WithMany(p => p.DelayedDeliveryRuleProductLineDeliveries)
                .HasForeignKey(d => d.DelayedDeliveryRuleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DelayedDeliveryRuleProductLineDeliveries_dbo.DelayedDeliveryRules_DelayedDeliveryRuleId");

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.DelayedDeliveryRuleProductLineDeliveries)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DelayedDeliveryRuleProductLineDeliveries_dbo.ProductLineDeliveries_ProductLineDeliveryId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DelayedDeliveryRuleProductLineDeliveries)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DelayedDeliveryRuleProductLineDeliveries_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DelayedDeliveryRuleShop>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DelayedDeliveryRuleShops");

            entity.HasIndex(e => e.DelayedDeliveryRuleId, "IX_DelayedDeliveryRuleId").HasFillFactor(90);

            entity.HasIndex(e => e.ShopId, "IX_ShopId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.DelayedDeliveryRule).WithMany(p => p.DelayedDeliveryRuleShops)
                .HasForeignKey(d => d.DelayedDeliveryRuleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DelayedDeliveryRuleShops_dbo.DelayedDeliveryRules_DelayedDeliveryRuleId");

            entity.HasOne(d => d.Shop).WithMany(p => p.DelayedDeliveryRuleShops)
                .HasForeignKey(d => d.ShopId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DelayedDeliveryRuleShops_dbo.Shops_ShopId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DelayedDeliveryRuleShops)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DelayedDeliveryRuleShops_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DelayedDeliveryRuleSupplier>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DelayedDeliveryRuleSuppliers");

            entity.HasIndex(e => e.DelayedDeliveryRuleId, "IX_DelayedDeliveryRuleId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.DelayedDeliveryRule).WithMany(p => p.DelayedDeliveryRuleSuppliers)
                .HasForeignKey(d => d.DelayedDeliveryRuleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DelayedDeliveryRuleSuppliers_dbo.DelayedDeliveryRules_DelayedDeliveryRuleId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.DelayedDeliveryRuleSuppliers)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DelayedDeliveryRuleSuppliers_dbo.Suppliers_SupplierId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DelayedDeliveryRuleSuppliers)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DelayedDeliveryRuleSuppliers_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DeliveryLocationType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DeliveryLocationTypes");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DeliveryLocationTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DeliveryLocationTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DeliveryMethod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DeliveryMethods");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DeliveryMethods)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DeliveryMethods_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DeliveryRemarksRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DeliveryRemarksRule");

            entity.ToTable("DeliveryRemarksRule");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(90);

            entity.HasIndex(e => e.SupplierId, "IX_SupplierId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DeliveryRemarksRule)
                .HasForeignKey<DeliveryRemarksRule>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DeliveryRemarksRule_dbo.Rules_Id");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.DeliveryRemarksRules)
                .HasForeignKey(d => d.SalesPeriodId)
                .HasConstraintName("FK_dbo.DeliveryRemarksRule_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.DeliveryRemarksRules)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK_dbo.DeliveryRemarksRule_dbo.Suppliers_SupplierId");
        });

        modelBuilder.Entity<DeliveryRemarksRuleProductLineDelivery>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DeliveryRemarksRuleProductLineDeliveries");

            entity.HasIndex(e => e.DeliveryRemarksRuleId, "IX_DeliveryRemarksRuleId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.DeliveryRemarksRule).WithMany(p => p.DeliveryRemarksRuleProductLineDeliveries)
                .HasForeignKey(d => d.DeliveryRemarksRuleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DeliveryRemarksRuleProductLineDeliveries_dbo.DeliveryRemarksRule_DeliveryRemarksRuleId");

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.DeliveryRemarksRuleProductLineDeliveries)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DeliveryRemarksRuleProductLineDeliveries_dbo.ProductLineDeliveries_ProductLineDeliveryId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DeliveryRemarksRuleProductLineDeliveries)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DeliveryRemarksRuleProductLineDeliveries_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DeliveryRemarksRuleShop>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DeliveryRemarksRuleShops");

            entity.HasIndex(e => e.DeliveryRemarksRuleId, "IX_DeliveryRemarksRuleId").HasFillFactor(90);

            entity.HasIndex(e => e.ShopId, "IX_ShopId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.DeliveryRemarksRule).WithMany(p => p.DeliveryRemarksRuleShops)
                .HasForeignKey(d => d.DeliveryRemarksRuleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DeliveryRemarksRuleShops_dbo.DeliveryRemarksRule_DeliveryRemarksRuleId");

            entity.HasOne(d => d.Shop).WithMany(p => p.DeliveryRemarksRuleShops)
                .HasForeignKey(d => d.ShopId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DeliveryRemarksRuleShops_dbo.Shops_ShopId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DeliveryRemarksRuleShops)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DeliveryRemarksRuleShops_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DeliveryWindow>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DeliveryWindows");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DeliveryWindows)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DeliveryWindows_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Department>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Departments");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Departments)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Departments_dbo.Users_UserCreatedId");

            entity.HasMany(d => d.Employees).WithMany(p => p.Departments)
                .UsingEntity<Dictionary<string, object>>(
                    "EmployeeDepartment",
                    r => r.HasOne<Employee>().WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.EmployeeDepartments_dbo.Employees_EmployeeId"),
                    l => l.HasOne<Department>().WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.EmployeeDepartments_dbo.Departments_DepartmentId"),
                    j =>
                    {
                        j.HasKey("DepartmentId", "EmployeeId").HasName("PK_dbo.EmployeeDepartments");
                        j.ToTable("EmployeeDepartments");
                        j.HasIndex(new[] { "DepartmentId" }, "IX_DepartmentId").HasFillFactor(90);
                        j.HasIndex(new[] { "EmployeeId" }, "IX_EmployeeId").HasFillFactor(90);
                    });
        });

        modelBuilder.Entity<DiscountCampaign>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DiscountCampaigns");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DiscountCampaigns)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DiscountCampaigns_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DiscountCampaignLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DiscountCampaignLines");

            entity.HasIndex(e => e.BrandId, "IX_BrandId").HasFillFactor(90);

            entity.HasIndex(e => e.DiscountCampaignId, "IX_DiscountCampaignId").HasFillFactor(90);

            entity.HasIndex(e => e.ProductGroupId, "IX_ProductGroupId").HasFillFactor(90);

            entity.HasIndex(e => e.ProductLineDeliveryId, "IX_ProductLineDeliveryId").HasFillFactor(90);

            entity.HasIndex(e => e.SalesPeriodId, "IX_SalesPeriodId").HasFillFactor(90);

            entity.HasIndex(e => e.ShopId, "IX_ShopId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Brand).WithMany(p => p.DiscountCampaignLines)
                .HasForeignKey(d => d.BrandId)
                .HasConstraintName("FK_dbo.DiscountCampaignLines_dbo.Brands_BrandId");

            entity.HasOne(d => d.DiscountCampaign).WithMany(p => p.DiscountCampaignLines)
                .HasForeignKey(d => d.DiscountCampaignId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DiscountCampaignLines_dbo.DiscountCampaigns_DiscountCampaignId");

            entity.HasOne(d => d.ProductGroup).WithMany(p => p.DiscountCampaignLines)
                .HasForeignKey(d => d.ProductGroupId)
                .HasConstraintName("FK_dbo.DiscountCampaignLines_dbo.ProductGroups_ProductGroupId");

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.DiscountCampaignLines)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .HasConstraintName("FK_dbo.DiscountCampaignLines_dbo.ProductLineDeliveries_ProductLineDeliveryId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.DiscountCampaignLines)
                .HasForeignKey(d => d.SalesPeriodId)
                .HasConstraintName("FK_dbo.DiscountCampaignLines_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.Shop).WithMany(p => p.DiscountCampaignLines)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("FK_dbo.DiscountCampaignLines_dbo.Shops_ShopId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DiscountCampaignLines)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DiscountCampaignLines_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DiscountCampaignLineDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DiscountCampaignLineDetails");

            entity.HasIndex(e => e.DiscountCampaignLineId, "IX_DiscountCampaignLineId").HasFillFactor(90);

            entity.HasIndex(e => e.ProductId, "IX_ProductId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.DiscountCampaignLine).WithMany(p => p.DiscountCampaignLineDetails)
                .HasForeignKey(d => d.DiscountCampaignLineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DiscountCampaignLineDetails_dbo.DiscountCampaignLines_DiscountCampaignLineId");

            entity.HasOne(d => d.Product).WithMany(p => p.DiscountCampaignLineDetails)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DiscountCampaignLineDetails_dbo.FashionProducts_ProductId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DiscountCampaignLineDetails)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DiscountCampaignLineDetails_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DiscountRuleRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DiscountRuleRules");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(95);

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.DiscountRuleRule)
                .HasForeignKey<DiscountRuleRule>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DiscountRuleRules_dbo.Rules_Id");

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.DiscountRuleRules)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .HasConstraintName("FK_dbo.DiscountRuleRules_dbo.ProductLineDeliveries_ProductLineDeliveryId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.DiscountRuleRules)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DiscountRuleRules_dbo.SalesPeriods_SalesPeriodId");
        });

        modelBuilder.Entity<DiscountRuleSupplier>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DiscountRuleSuppliers");

            entity.HasIndex(e => e.DiscountRuleId, "IX_DiscountRuleId").HasFillFactor(95);

            entity.HasIndex(e => e.SupplierId, "IX_SupplierId").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.DiscountRule).WithMany(p => p.DiscountRuleSuppliers)
                .HasForeignKey(d => d.DiscountRuleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DiscountRuleSuppliers_dbo.DiscountRuleRules_DiscountRuleId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.DiscountRuleSuppliers)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DiscountRuleSuppliers_dbo.Suppliers_SupplierId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DiscountRuleSuppliers)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DiscountRuleSuppliers_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Document>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Documents");

            entity.HasIndex(e => e.BarcodeId, "IX_BarcodeId").HasFillFactor(90);

            entity.HasIndex(e => e.DocumentTypeId, "IX_DocumentTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.EmployeeId, "IX_EmployeeId").HasFillFactor(90);

            entity.HasIndex(e => e.TransportTypeId, "IX_TransportTypeId").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.HasIndex(e => e.Date, "IX_dbo_Documents_Date").HasFillFactor(90);

            entity.HasIndex(e => e.DocumentTypeId, "Missing_IXNC_Documents_DocumentTypeId_39030");

            entity.HasIndex(e => e.DocumentTypeId, "Missing_IXNC_Documents_DocumentTypeId_CAB67").HasFillFactor(90);

            entity.HasIndex(e => new { e.DocumentTypeId, e.Date }, "Missing_IXNC_Documents_DocumentTypeId_Date_A9820");

            entity.HasIndex(e => new { e.DocumentTypeId, e.DocumentDeliveryStateId }, "Missing_IXNC_Documents_DocumentTypeId_DocumentDeliveryStateId_A0A0C");

            entity.HasIndex(e => new { e.DocumentTypeId, e.DocumentStateId }, "Missing_IXNC_Documents_DocumentTypeId_DocumentStateId_FEF0A");

            entity.HasIndex(e => new { e.DocumentTypeId, e.IgnoreFlowControl, e.DateCreated }, "Missing_IXNC_Documents_DocumentTypeId_IgnoreFlowControl_DateCreated_7486E").HasFillFactor(90);

            entity.HasIndex(e => e.Key, "Missing_IXNC_Documents_Key_DD10D").HasFillFactor(90);

            entity.Property(e => e.Addition).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Amount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DueDate).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.PaymentTotal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Total).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.TransportCost).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.VatAmount).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.VoucherTotal).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.Agent).WithMany(p => p.Documents)
                .HasForeignKey(d => d.AgentId)
                .HasConstraintName("FK_dbo.Documents_dbo.Agents_AgentId");

            entity.HasOne(d => d.Barcode).WithMany(p => p.Documents)
                .HasForeignKey(d => d.BarcodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Documents_dbo.Barcodes_BarcodeId");

            entity.HasOne(d => d.BlockedByFdiReason).WithMany(p => p.Documents)
                .HasForeignKey(d => d.BlockedByFdiReasonId)
                .HasConstraintName("FK_dbo.Documents_dbo.BlockedByFdiReasons_BlockedByFdiReasonId");

            entity.HasOne(d => d.Contact).WithMany(p => p.DocumentContacts)
                .HasForeignKey(d => d.ContactId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Documents_dbo.Contacts_ContactId");

            entity.HasOne(d => d.DocumentDeliveryState).WithMany(p => p.Documents)
                .HasForeignKey(d => d.DocumentDeliveryStateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Documents_dbo.DocumentDeliveryStates_DocumentDeliveryStateId");

            entity.HasOne(d => d.DocumentState).WithMany(p => p.Documents)
                .HasForeignKey(d => d.DocumentStateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Documents_dbo.DocumentStates_DocumentStateId");

            entity.HasOne(d => d.DocumentType).WithMany(p => p.Documents)
                .HasForeignKey(d => d.DocumentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Documents_dbo.DocumentTypes_DocumentTypeId");

            entity.HasOne(d => d.Employee).WithMany(p => p.Documents)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_dbo.Documents_dbo.Employees_EmployeeId");

            entity.HasOne(d => d.TransportType).WithMany(p => p.Documents)
                .HasForeignKey(d => d.TransportTypeId)
                .HasConstraintName("FK_dbo.Documents_dbo.TransportTypes_TransportTypeId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Documents)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Documents_dbo.Users_UserCreatedId");

            entity.HasOne(d => d.VatType).WithMany(p => p.Documents)
                .HasForeignKey(d => d.VatTypeId)
                .HasConstraintName("FK_dbo.Documents_dbo.VatTypes_VatTypeId");

            entity.HasOne(d => d.WebUserCreated).WithMany(p => p.DocumentWebUserCreateds)
                .HasForeignKey(d => d.WebUserCreatedId)
                .HasConstraintName("FK_dbo.Documents_dbo.Contacts_WebUserCreatedId");

            entity.HasOne(d => d.WpsPrePayment).WithMany(p => p.Documents)
                .HasForeignKey(d => d.WpsPrePaymentId)
                .HasConstraintName("FK_dbo.Documents_dbo.WpsPrePayments_WpsPrePaymentId");
        });

        modelBuilder.Entity<DocumentBleckmannTransportState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentBleckmannTransportStates");

            entity.HasIndex(e => e.DocumentId, "IX_Document_Id").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DateTime).HasColumnType("datetime");
            entity.Property(e => e.DocumentId).HasColumnName("Document_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.BleckmannTransportState).WithMany(p => p.DocumentBleckmannTransportStates)
                .HasForeignKey(d => d.BleckmannTransportStateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentBleckmannTransportStates_dbo.BleckmannTransportStates_BleckmannTransportStateId");

            entity.HasOne(d => d.Document).WithMany(p => p.DocumentBleckmannTransportStates)
                .HasForeignKey(d => d.DocumentId)
                .HasConstraintName("FK_dbo.DocumentBleckmannTransportStates_dbo.Documents_Document_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentBleckmannTransportStates)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentBleckmannTransportStates_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DocumentDeliveryState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentDeliveryStates");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentDeliveryStates)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentDeliveryStates_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DocumentFlow>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentFlows");

            entity.HasIndex(e => e.StockLocationId, "IX_StockLocationId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.StockLocation).WithMany(p => p.DocumentFlows)
                .HasForeignKey(d => d.StockLocationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentFlows_dbo.StockLocations_StockLocationId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentFlows)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentFlows_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DocumentImportConfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentImportConfigurations");

            entity.HasIndex(e => e.DocumentTypeId, "IX_DocumentTypeId").HasFillFactor(95);

            entity.HasIndex(e => e.SupplierId, "IX_SupplierId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.DocumentType).WithMany(p => p.DocumentImportConfigurations)
                .HasForeignKey(d => d.DocumentTypeId)
                .HasConstraintName("FK_dbo.DocumentImportConfigurations_dbo.DocumentTypes_DocumentTypeId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.DocumentImportConfigurations)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentImportConfigurations_dbo.Suppliers_SupplierId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentImportConfigurations)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentImportConfigurations_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DocumentImportConfigurationMapping>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentImportConfigurationMappings");

            entity.HasIndex(e => e.DocumentImportConfigurationId, "IX_DocumentImportConfigurationId").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.DocumentImportConfiguration).WithMany(p => p.DocumentImportConfigurationMappings)
                .HasForeignKey(d => d.DocumentImportConfigurationId)
                .HasConstraintName("FK_dbo.DocumentImportConfigurationMappings_dbo.DocumentImportConfigurations_DocumentImportConfigurationId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentImportConfigurationMappings)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentImportConfigurationMappings_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DocumentImportMeta>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentImportMetas");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DocumentDate).HasColumnType("datetime");
            entity.Property(e => e.IsLjjv).HasColumnName("IsLJJV");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.AccountingCode).WithMany(p => p.DocumentImportMeta)
                .HasForeignKey(d => d.AccountingCodeId)
                .HasConstraintName("FK_dbo.DocumentImportMetas_dbo.AccountingCodes_AccountingCodeId");

            entity.HasOne(d => d.DocumentImportConfiguration).WithMany(p => p.DocumentImportMeta)
                .HasForeignKey(d => d.DocumentImportConfigurationId)
                .HasConstraintName("FK_dbo.DocumentImportMetas_dbo.DocumentImportConfigurations_DocumentImportConfigurationId");

            entity.HasOne(d => d.DocumentImportMetaStatus).WithMany(p => p.DocumentImportMeta)
                .HasForeignKey(d => d.DocumentImportMetaStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentImportMetas_dbo.DocumentImportMetaStatus_DocumentImportMetaStatusId");

            entity.HasOne(d => d.DocumentType).WithMany(p => p.DocumentImportMeta)
                .HasForeignKey(d => d.DocumentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentImportMetas_dbo.DocumentTypes_DocumentTypeId");

            entity.HasOne(d => d.Pos).WithMany(p => p.DocumentImportMeta)
                .HasForeignKey(d => d.PosId)
                .HasConstraintName("FK_dbo.DocumentImportMetas_dbo.Pos_PosId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.DocumentImportMeta)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentImportMetas_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.DocumentImportMeta)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK_dbo.DocumentImportMetas_dbo.Suppliers_SupplierId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentImportMeta)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentImportMetas_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DocumentImportMetaDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentImportMetaDetails");

            entity.HasIndex(e => e.DocumentImportMetaId, "IX_DocumentImportMetaId").HasFillFactor(95);

            entity.HasOne(d => d.DocumentImportMeta).WithMany(p => p.DocumentImportMetaDetails)
                .HasForeignKey(d => d.DocumentImportMetaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentImportMetaDetails_dbo.DocumentImportMetas_DocumentImportMetaId");

            entity.HasOne(d => d.StockLocation).WithMany(p => p.DocumentImportMetaDetails)
                .HasForeignKey(d => d.StockLocationId)
                .HasConstraintName("FK_dbo.DocumentImportMetaDetails_dbo.StockLocations_StockLocationId");
        });

        modelBuilder.Entity<DocumentImportMetaError>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentImportMetaErrors");

            entity.HasIndex(e => e.DocumentImportMetaId, "IX_DocumentImportMetaId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.DocumentImportMeta).WithMany(p => p.DocumentImportMetaErrors)
                .HasForeignKey(d => d.DocumentImportMetaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentImportMetaErrors_dbo.DocumentImportMetas_DocumentImportMetaId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentImportMetaErrors)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentImportMetaErrors_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DocumentImportMetaStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentImportMetaStatus");

            entity.ToTable("DocumentImportMetaStatus");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentImportMetaStatuses)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentImportMetaStatus_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DocumentImportMetaWarning>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentImportMetaWarnings");

            entity.HasIndex(e => e.DocumentImportMetaId, "IX_DocumentImportMetaId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.DocumentImportMeta).WithMany(p => p.DocumentImportMetaWarnings)
                .HasForeignKey(d => d.DocumentImportMetaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentImportMetaWarnings_dbo.DocumentImportMetas_DocumentImportMetaId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentImportMetaWarnings)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentImportMetaWarnings_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DocumentLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentLines");

            entity.HasIndex(e => e.DocumentId, "IX_DocumentId").HasFillFactor(90);

            entity.HasIndex(e => e.StockLocationId, "IX_StockLocationId").HasFillFactor(90);

            entity.HasIndex(e => e.DocumentId, "Missing_IXNC_DocumentLines_DocumentId_8EAE1");

            entity.HasIndex(e => e.DocumentId, "Missing_IXNC_DocumentLines_DocumentId_9EA2E");

            entity.HasIndex(e => new { e.DocumentId, e.DocumentLineReferenceId }, "Missing_IXNC_DocumentLines_DocumentId_DocumentLineReferenceId_09D0F").HasFillFactor(90);

            entity.HasIndex(e => new { e.DocumentId, e.DocumentLineReferenceId }, "Missing_IXNC_DocumentLines_DocumentId_DocumentLineReferenceId_F9761");

            entity.HasIndex(e => e.DocumentId, "Missing_IXNC_DocumentLines_DocumentId_F606A").HasFillFactor(90);

            entity.HasIndex(e => e.DocumentLineReferenceId, "Missing_IXNC_DocumentLines_DocumentLineReferenceId_EB90F");

            entity.HasIndex(e => e.StockLocationId, "Missing_IXNC_DocumentLines_StockLocationId_1B8B8");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DiscountAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DiscountPercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.DeliveryWindow).WithMany(p => p.DocumentLines)
                .HasForeignKey(d => d.DeliveryWindowId)
                .HasConstraintName("FK_dbo.DocumentLines_dbo.DeliveryWindows_DeliveryWindowId");

            entity.HasOne(d => d.Document).WithMany(p => p.DocumentLines)
                .HasForeignKey(d => d.DocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentLines_dbo.Documents_Document_Id");

            entity.HasOne(d => d.DocumentLineReference).WithMany(p => p.InverseDocumentLineReference)
                .HasForeignKey(d => d.DocumentLineReferenceId)
                .HasConstraintName("FK_dbo.DocumentLines_dbo.DocumentLines_DocumentLineReferenceId");

            entity.HasOne(d => d.SizePack).WithMany(p => p.DocumentLines)
                .HasForeignKey(d => d.SizePackId)
                .HasConstraintName("FK_dbo.DocumentLines_dbo.SizePacks_SizePackId");

            entity.HasOne(d => d.StockLocation).WithMany(p => p.DocumentLines)
                .HasForeignKey(d => d.StockLocationId)
                .HasConstraintName("FK_dbo.DocumentLines_dbo.StockLocations_StockLocationId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentLines)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentLines_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DocumentLineDetail>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentLineDetails");

            entity.HasIndex(e => e.BarcodeId, "IX_BarcodeId").HasFillFactor(90);

            entity.HasIndex(e => new { e.DocumentLineId, e.BarcodeId }, "IX_DocumentLineId").HasFillFactor(90);

            entity.HasIndex(e => e.DocumentLineId, "Missing_IXNC_DocumentLineDetails_DocumentLineId_17EF4").HasFillFactor(90);

            entity.HasIndex(e => e.DocumentLineId, "Missing_IXNC_DocumentLineDetails_DocumentLineId_1B1F8").HasFillFactor(90);

            entity.HasIndex(e => e.DocumentLineId, "Missing_IXNC_DocumentLineDetails_DocumentLineId_4D2CD");

            entity.HasIndex(e => e.Quantity, "Missing_IXNC_DocumentLineDetails_Quantity_0B1F1").HasFillFactor(90);

            entity.HasIndex(e => e.Quantity, "Missing_IXNC_DocumentLineDetails_Quantity_E7C37").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.OriginalSalesPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PurchasePrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SalesPrice).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Barcode).WithMany(p => p.DocumentLineDetails)
                .HasForeignKey(d => d.BarcodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentLineDetails_dbo.Barcodes_BarcodeId");

            entity.HasOne(d => d.DocumentLine).WithMany(p => p.DocumentLineDetails)
                .HasForeignKey(d => d.DocumentLineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentLineDetails_dbo.DocumentLines_DocumentLineId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentLineDetails)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentLineDetails_dbo.Users_UserCreatedId");

            entity.HasOne(d => d.Vat).WithMany(p => p.DocumentLineDetails)
                .HasForeignKey(d => d.VatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentLineDetails_dbo.Vats_VatId");
        });

        modelBuilder.Entity<DocumentPayment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentPayments");

            entity.HasIndex(e => e.DocumentId, "IX_DocumentId").HasFillFactor(90);

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ItsrequestId).HasColumnName("ITSRequestId");
            entity.Property(e => e.PosEjournalId).HasColumnName("PosEJournalId");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.CustomerLoyalty).WithMany(p => p.DocumentPayments)
                .HasForeignKey(d => d.CustomerLoyaltyId)
                .HasConstraintName("FK_dbo.DocumentPayments_dbo.CustomerLoyalties_CustomerLoyaltyId");

            entity.HasOne(d => d.Document).WithMany(p => p.DocumentPayments)
                .HasForeignKey(d => d.DocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentPayments_dbo.Documents_Document_Id");

            entity.HasOne(d => d.DocumentPaymentType).WithMany(p => p.DocumentPayments)
                .HasForeignKey(d => d.DocumentPaymentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentPayments_dbo.DocumentPaymentTypes_DocumentPaymentTypeId");

            entity.HasOne(d => d.PosEjournal).WithMany(p => p.DocumentPayments)
                .HasForeignKey(d => d.PosEjournalId)
                .HasConstraintName("FK_dbo.DocumentPayments_dbo.PosEJournals_PosEJournalId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentPayments)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentPayments_dbo.Users_UserCreatedId");

            entity.HasOne(d => d.Voucher).WithMany(p => p.DocumentPayments)
                .HasForeignKey(d => d.VoucherId)
                .HasConstraintName("FK_dbo.DocumentPayments_dbo.Vouchers_VoucherId");
        });

        modelBuilder.Entity<DocumentPaymentType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentPaymentTypes");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.UseInPos).HasColumnName("UseInPOS");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentPaymentTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentPaymentTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DocumentRelation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentRelations");

            entity.HasIndex(e => e.SourceDocumentId, "IX_SourceDocumentId");

            entity.HasIndex(e => e.TargetDocumentId, "IX_TargetDocumentId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.SourceDocument).WithMany(p => p.DocumentRelationSourceDocuments)
                .HasForeignKey(d => d.SourceDocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentRelations_dbo.Documents_SourceDocumentId");

            entity.HasOne(d => d.TargetDocument).WithMany(p => p.DocumentRelationTargetDocuments)
                .HasForeignKey(d => d.TargetDocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentRelations_dbo.Documents_TargetDocumentId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentRelations)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentRelations_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DocumentRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentRules");

            entity.HasIndex(e => e.DocumentId, "IX_DocumentId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Document).WithMany(p => p.DocumentRules)
                .HasForeignKey(d => d.DocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentRules_dbo.Documents_DocumentId");

            entity.HasOne(d => d.Rule).WithMany(p => p.DocumentRules)
                .HasForeignKey(d => d.RuleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentRules_dbo.Rules_RuleId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentRules)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentRules_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DocumentSnapshot>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentSnapshots");

            entity.HasIndex(e => e.DocumentId, "IX_DocumentId");

            entity.HasIndex(e => e.SnapshotDocumentId, "IX_SnapshotDocumentId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Document).WithMany(p => p.DocumentSnapshotDocuments)
                .HasForeignKey(d => d.DocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentSnapshots_dbo.Documents_DocumentId");

            entity.HasOne(d => d.SnapshotDocument).WithMany(p => p.DocumentSnapshotSnapshotDocuments)
                .HasForeignKey(d => d.SnapshotDocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentSnapshots_dbo.Documents_SnapshotDocumentId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentSnapshots)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentSnapshots_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DocumentState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentStates");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentStates)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentStates_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DocumentTransfer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentTransfers");

            entity.HasIndex(e => e.BlockedDocumentTypeId, "IX_BlockedDocumentTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.CanceledDocumentTypeId, "IX_CanceledDocumentTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.SourceDocumentTypeId, "IX_SourceDocumentTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.TargetDocumentTypeId, "IX_TargetDocumentTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.BlockedDocumentType).WithMany(p => p.DocumentTransferBlockedDocumentTypes)
                .HasForeignKey(d => d.BlockedDocumentTypeId)
                .HasConstraintName("FK_dbo.DocumentTransfers_dbo.DocumentTypes_BlockedDocumentTypeId");

            entity.HasOne(d => d.CanceledDocumentType).WithMany(p => p.DocumentTransferCanceledDocumentTypes)
                .HasForeignKey(d => d.CanceledDocumentTypeId)
                .HasConstraintName("FK_dbo.DocumentTransfers_dbo.DocumentTypes_CanceledDocumentTypeId");

            entity.HasOne(d => d.SourceDocumentType).WithMany(p => p.DocumentTransferSourceDocumentTypes)
                .HasForeignKey(d => d.SourceDocumentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentTransfers_dbo.DocumentTypes_SourceDocumentTypeId");

            entity.HasOne(d => d.TargetDocumentType).WithMany(p => p.DocumentTransferTargetDocumentTypes)
                .HasForeignKey(d => d.TargetDocumentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentTransfers_dbo.DocumentTypes_TargetDocumentTypeId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentTransfers)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentTransfers_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<DocumentType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.DocumentTypes");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DocumentPrefix).HasMaxLength(2);
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.DocumentTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.DocumentTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<EdiMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.EdiMessages");

            entity.HasIndex(e => e.CustomerId, "IX_CustomerId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");

            entity.HasOne(d => d.Customer).WithMany(p => p.EdiMessages)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.EdiMessages_dbo.Customers_CustomerId");
        });

        modelBuilder.Entity<EliBudget>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Product).HasMaxLength(20);
            entity.Property(e => e.ShopCode).HasMaxLength(20);
        });

        modelBuilder.Entity<EliOrderDate>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.OrderDate).HasMaxLength(20);
            entity.Property(e => e.OrderNr).HasMaxLength(20);
            entity.Property(e => e.ProductCode).HasMaxLength(20);
            entity.Property(e => e.ShopCode).HasMaxLength(20);
        });

        modelBuilder.Entity<EmailTemplate>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.EmailTemplates");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.EmailTemplates)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.EmailTemplates_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<EmailTemplatePlaceholder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.EmailTemplatePlaceholders");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.EmailTemplatePlaceholders)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.EmailTemplatePlaceholders_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Employee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Employees");

            entity.HasIndex(e => e.RecurringAppointmentId, "IX_RecurringAppointment_Id").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.HasIndex(e => e.UserId, "IX_UserId").HasFillFactor(90);

            entity.HasIndex(e => e.Order, "IX_dbo_Employees_Order").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.RecurringAppointmentId).HasColumnName("RecurringAppointment_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Agent).WithMany(p => p.Employees)
                .HasForeignKey(d => d.AgentId)
                .HasConstraintName("FK_dbo.Employees_dbo.Agents_AgentId");

            entity.HasOne(d => d.RecurringAppointment).WithMany(p => p.Employees)
                .HasForeignKey(d => d.RecurringAppointmentId)
                .HasConstraintName("FK_dbo.Employees_dbo.RecurringAppointments_RecurringAppointment_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.EmployeeUserCreateds)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Employees_dbo.Users_UserCreatedId");

            entity.HasOne(d => d.User).WithMany(p => p.EmployeeUsers)
                .HasForeignKey(d => d.UserId)
                .HasConstraintName("FK_dbo.Employees_dbo.Users_UserId");
        });

        modelBuilder.Entity<EmployeeSeasonalCost>(entity =>
        {
            entity.HasKey(e => new { e.SalesPeriodId, e.EmployeeId }).HasName("PK_dbo.EmployeeSeasonalCosts");

            entity.HasIndex(e => e.EmployeeId, "IX_EmployeeId");

            entity.HasIndex(e => e.SalesPeriodId, "IX_SalesPeriodId");

            entity.HasOne(d => d.Employee).WithMany(p => p.EmployeeSeasonalCosts)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.EmployeeSeasonalCosts_dbo.Employees_EmployeeId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.EmployeeSeasonalCosts)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.EmployeeSeasonalCosts_dbo.SalesPeriods_SalesPeriodId");
        });

        modelBuilder.Entity<EnemyRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.EnemyRules");

            entity.HasIndex(e => e.CustomerId, "IX_CustomerId").HasFillFactor(90);

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.Customer).WithMany(p => p.EnemyRules)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.EnemyRules_dbo.Customers_CustomerId");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.EnemyRule)
                .HasForeignKey<EnemyRule>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.EnemyRules_dbo.Rules_Id");
        });

        modelBuilder.Entity<Expense>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Expenses");

            entity.HasIndex(e => e.ExpenseTypeId, "IX_ExpenseTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.InvoiceDocumentId, "IX_InvoiceDocumentId").HasFillFactor(90);

            entity.HasIndex(e => e.PosId, "IX_PosId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.AmountPaid).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.ExpenseType).WithMany(p => p.Expenses)
                .HasForeignKey(d => d.ExpenseTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Expenses_dbo.ExpenseTypes_ExpenseTypeId");

            entity.HasOne(d => d.InvoiceDocument).WithMany(p => p.Expenses)
                .HasForeignKey(d => d.InvoiceDocumentId)
                .HasConstraintName("FK_dbo.Expenses_dbo.FashionDocuments_InvoiceDocumentId");

            entity.HasOne(d => d.Pos).WithMany(p => p.Expenses)
                .HasForeignKey(d => d.PosId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Expenses_dbo.Pos_PosId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Expenses)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Expenses_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ExpenseOpiPrintRequest>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExpenseOpiPrintRequests");

            entity.HasIndex(e => e.ExpenseId, "IX_ExpenseId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Expense).WithMany(p => p.ExpenseOpiPrintRequests)
                .HasForeignKey(d => d.ExpenseId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExpenseOpiPrintRequests_dbo.Expenses_ExpenseId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ExpenseOpiPrintRequests)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExpenseOpiPrintRequests_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ExpenseType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExpenseTypes");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ExpenseTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExpenseTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ExternalDataImportBatch>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExternalDataImportBatches");

            entity.HasIndex(e => e.ExternalDataImportBatchScheduleId, "IX_ExternalDataImportBatchScheduleId");

            entity.HasIndex(e => e.ExternalDataImportBatchTypeId, "IX_ExternalDataImportBatchTypeId");

            entity.HasIndex(e => e.LastRunStatusId, "IX_LastRunStatusId");

            entity.HasIndex(e => e.SupplierId, "IX_SupplierId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.LastRun).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.NextScheduledRun).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ExternalDataImportBatchSchedule).WithMany(p => p.ExternalDataImportBatches)
                .HasForeignKey(d => d.ExternalDataImportBatchScheduleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalDataImportBatches_dbo.ExternalDataImportBatchSchedules_ExternalDataImportBatchScheduleId");

            entity.HasOne(d => d.ExternalDataImportBatchType).WithMany(p => p.ExternalDataImportBatches)
                .HasForeignKey(d => d.ExternalDataImportBatchTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalDataImportBatches_dbo.ExternalDataImportTypes_ExternalDataImportBatchTypeId");

            entity.HasOne(d => d.LastRunStatus).WithMany(p => p.ExternalDataImportBatches)
                .HasForeignKey(d => d.LastRunStatusId)
                .HasConstraintName("FK_dbo.ExternalDataImportBatches_dbo.ExternalDataImportBatchStatus_LastRunStatusId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.ExternalDataImportBatches)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalDataImportBatches_dbo.Suppliers_SupplierId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ExternalDataImportBatches)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalDataImportBatches_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ExternalDataImportBatchLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExternalDataImportBatchLogs");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ExternalDataImportBatch).WithMany(p => p.ExternalDataImportBatchLogs)
                .HasForeignKey(d => d.ExternalDataImportBatchId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalDataImportBatchLogs_dbo.ExternalDataImportBatches_ExternalDataImportBatchId");

            entity.HasOne(d => d.ExternalDataImportBatchStatus).WithMany(p => p.ExternalDataImportBatchLogs)
                .HasForeignKey(d => d.ExternalDataImportBatchStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalDataImportBatchLogs_dbo.ExternalDataImportBatchStatus_ExternalDataImportBatchStatusId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ExternalDataImportBatchLogs)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalDataImportBatchLogs_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ExternalDataImportBatchSchedule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExternalDataImportBatchSchedules");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ExternalDataImportBatchSchedules)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalDataImportBatchSchedules_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ExternalDataImportBatchStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExternalDataImportBatchStatus");

            entity.ToTable("ExternalDataImportBatchStatus");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ExternalDataImportBatchStatuses)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalDataImportBatchStatus_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ExternalDataImportType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExternalDataImportTypes");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ExternalDataImportTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalDataImportTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ExternalPo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExternalPos");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ExternalPos)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalPos_dbo.Users_UserCreatedId");

            entity.HasMany(d => d.ExternalPosJournalEntryTypes).WithMany(p => p.ExternalPos)
                .UsingEntity<Dictionary<string, object>>(
                    "ExternalPosJournalEntryTypeMap",
                    r => r.HasOne<ExternalPosJournalEntryType>().WithMany()
                        .HasForeignKey("ExternalPosJournalEntryTypeId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.ExternalPosJournalEntryTypeMaps_dbo.ExternalPosJournalEntryTypes_ExternalPosJournalEntryTypeId"),
                    l => l.HasOne<ExternalPo>().WithMany()
                        .HasForeignKey("ExternalPosId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.ExternalPosJournalEntryTypeMaps_dbo.ExternalPos_ExternalPosId"),
                    j =>
                    {
                        j.HasKey("ExternalPosId", "ExternalPosJournalEntryTypeId").HasName("PK_dbo.ExternalPosJournalEntryTypeMaps");
                        j.ToTable("ExternalPosJournalEntryTypeMaps");
                        j.HasIndex(new[] { "ExternalPosId" }, "IX_ExternalPosId");
                        j.HasIndex(new[] { "ExternalPosJournalEntryTypeId" }, "IX_ExternalPosJournalEntryTypeId");
                    });

            entity.HasMany(d => d.Users).WithMany(p => p.ExternalPosNavigation)
                .UsingEntity<Dictionary<string, object>>(
                    "ExternalPosUser",
                    r => r.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.ExternalPosUsers_dbo.Users_UserId"),
                    l => l.HasOne<ExternalPo>().WithMany()
                        .HasForeignKey("ExternalPosId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.ExternalPosUsers_dbo.ExternalPos_ExternalPosId"),
                    j =>
                    {
                        j.HasKey("ExternalPosId", "UserId").HasName("PK_dbo.ExternalPosUsers");
                        j.ToTable("ExternalPosUsers");
                        j.HasIndex(new[] { "ExternalPosId" }, "IX_ExternalPosId");
                        j.HasIndex(new[] { "UserId" }, "IX_UserId");
                    });
        });

        modelBuilder.Entity<ExternalPosAccountingCodeMap>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExternalPosAccountingCodeMaps");

            entity.HasIndex(e => e.ExternalPosId, "IX_ExternalPosId");

            entity.HasIndex(e => e.PosAccountingCodeId, "IX_PosAccountingCodeId");

            entity.HasOne(d => d.ExternalPos).WithMany(p => p.ExternalPosAccountingCodeMaps)
                .HasForeignKey(d => d.ExternalPosId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalPosAccountingCodeMaps_dbo.ExternalPos_ExternalPosId");

            entity.HasOne(d => d.PosAccountingCode).WithMany(p => p.ExternalPosAccountingCodeMaps)
                .HasForeignKey(d => d.PosAccountingCodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalPosAccountingCodeMaps_dbo.PosAccountingCodes_PosAccountingCodeId");
        });

        modelBuilder.Entity<ExternalPosJournal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExternalPosJournals");

            entity.HasIndex(e => e.ExternalPosId, "IX_ExternalPosId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.InSubtotal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OutSubtotal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ExternalPos).WithMany(p => p.ExternalPosJournals)
                .HasForeignKey(d => d.ExternalPosId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalPosJournals_dbo.ExternalPos_ExternalPosId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ExternalPosJournals)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalPosJournals_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ExternalPosJournalEntry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExternalPosJournalEntries");

            entity.HasIndex(e => e.ExternalPosJournalEntryTypeId, "IX_ExternalPosJournalEntryTypeId");

            entity.HasIndex(e => e.ExternalPosJournalId, "IX_ExternalPosJournalId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ExternalPosJournalEntryType).WithMany(p => p.ExternalPosJournalEntries)
                .HasForeignKey(d => d.ExternalPosJournalEntryTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalPosJournalEntries_dbo.ExternalPosJournalEntryTypes_ExternalPosJournalEntryTypeId");

            entity.HasOne(d => d.ExternalPosJournal).WithMany(p => p.ExternalPosJournalEntries)
                .HasForeignKey(d => d.ExternalPosJournalId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalPosJournalEntries_dbo.ExternalPosJournals_ExternalPosJournalId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ExternalPosJournalEntries)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalPosJournalEntries_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ExternalPosJournalEntryType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExternalPosJournalEntryTypes");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ExternalPosJournalEntryTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalPosJournalEntryTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ExternalPosJournalExpense>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExternalPosJournalExpenses");

            entity.HasIndex(e => e.ExpenseTypeId, "IX_ExpenseTypeId");

            entity.HasIndex(e => e.ExternalPosJournalId, "IX_ExternalPosJournalId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ExpenseType).WithMany(p => p.ExternalPosJournalExpenses)
                .HasForeignKey(d => d.ExpenseTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalPosJournalExpenses_dbo.ExpenseTypes_ExpenseTypeId");

            entity.HasOne(d => d.ExternalPosJournal).WithMany(p => p.ExternalPosJournalExpenses)
                .HasForeignKey(d => d.ExternalPosJournalId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalPosJournalExpenses_dbo.ExternalPosJournals_ExternalPosJournalId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ExternalPosJournalExpenses)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalPosJournalExpenses_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ExternalPosJournalInvoice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExternalPosJournalInvoices");

            entity.HasIndex(e => e.ExternalPosJournalId, "IX_ExternalPosJournalId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Payment).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.Total).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.ExternalPosJournal).WithMany(p => p.ExternalPosJournalInvoices)
                .HasForeignKey(d => d.ExternalPosJournalId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalPosJournalInvoices_dbo.ExternalPosJournals_ExternalPosJournalId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ExternalPosJournalInvoices)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalPosJournalInvoices_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ExternalPosJournalVoucher>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExternalPosJournalVouchers");

            entity.HasIndex(e => e.ExternalPosJournalId, "IX_ExternalPosJournalId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ExternalPosJournal).WithMany(p => p.ExternalPosJournalVouchers)
                .HasForeignKey(d => d.ExternalPosJournalId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalPosJournalVouchers_dbo.ExternalPosJournals_ExternalPosJournalId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ExternalPosJournalVouchers)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalPosJournalVouchers_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ExternalSalesPlatform>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExternalSalesPlatforms");

            entity.HasIndex(e => e.StockLocationId, "IX_StockLocationId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.StockLocation).WithMany(p => p.ExternalSalesPlatforms)
                .HasForeignKey(d => d.StockLocationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalSalesPlatforms_dbo.StockLocations_StockLocationId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ExternalSalesPlatforms)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalSalesPlatforms_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ExternalSalesPlatformFashionProductColor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExternalSalesPlatformFashionProductColors");

            entity.HasIndex(e => e.ExternalSalesPlatformId, "IX_ExternalSalesPlatformId").HasFillFactor(95);

            entity.HasIndex(e => e.FashionProductColorId, "IX_FashionProductColorId").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.FfitemIdViaFf).HasColumnName("FFItemIdViaFF");
            entity.Property(e => e.FfitemIdViaGoogle).HasColumnName("FFItemIdViaGoogle");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ExternalSalesPlatform).WithMany(p => p.ExternalSalesPlatformFashionProductColors)
                .HasForeignKey(d => d.ExternalSalesPlatformId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalSalesPlatformFashionProductColors_dbo.ExternalSalesPlatforms_ExternalSalesPlatformId");

            entity.HasOne(d => d.FashionProductColor).WithMany(p => p.ExternalSalesPlatformFashionProductColors)
                .HasForeignKey(d => d.FashionProductColorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalSalesPlatformFashionProductColors_dbo.FashionProductColors_FashionProductColorId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ExternalSalesPlatformFashionProductColors)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalSalesPlatformFashionProductColors_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ExternalSalesPlatformStockSyncLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ExternalSalesPlatformStockSyncLogs");

            entity.HasIndex(e => e.ExternalSalesPlatformId, "IX_ExternalSalesPlatformId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ExternalSalesPlatform).WithMany(p => p.ExternalSalesPlatformStockSyncLogs)
                .HasForeignKey(d => d.ExternalSalesPlatformId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalSalesPlatformStockSyncLogs_dbo.ExternalSalesPlatforms_ExternalSalesPlatformId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ExternalSalesPlatformStockSyncLogs)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ExternalSalesPlatformStockSyncLogs_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<FashionBarcode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FashionBarcodes");

            entity.HasIndex(e => e.FashionProductSizeId, "IX_FashionProductSizeId").HasFillFactor(90);

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(90);

            entity.HasIndex(e => e.ColorId, "Missing_IXNC_FashionBarcodes_ColorId_44459").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Ean13).HasMaxLength(20);

            entity.HasOne(d => d.Color).WithMany(p => p.FashionBarcodes)
                .HasForeignKey(d => d.ColorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionBarcodes_dbo.Colors_ColorId");

            entity.HasOne(d => d.FashionProductSize).WithMany(p => p.FashionBarcodes)
                .HasForeignKey(d => d.FashionProductSizeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionBarcodes_dbo.FashionProductSizes_FashionProductSizeId");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.FashionBarcode)
                .HasForeignKey<FashionBarcode>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionBarcodes_dbo.Barcodes_Id");
        });

        modelBuilder.Entity<FashionDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FashionDocuments");

            entity.HasIndex(e => e.CustomerLegalHistoryId, "IX_CustomerLegalHistoryId").HasFillFactor(90);

            entity.HasIndex(e => e.DeliveryAddressId, "IX_DeliveryAddressId").HasFillFactor(95);

            entity.HasIndex(e => e.FileImportLogId, "IX_FileImportLogId").HasFillFactor(90);

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(90);

            entity.HasIndex(e => e.SalesPeriodId, "IX_SalesPeriodId").HasFillFactor(90);

            entity.HasIndex(e => e.TransferHash, "IX_TransferHash").HasFillFactor(95);

            entity.HasIndex(e => e.SalesPeriodId, "Missing_IXNC_FashionDocuments_SalesPeriodId_8F8BC");

            entity.HasIndex(e => e.SalesPeriodId, "Missing_IXNC_FashionDocuments_SalesPeriodId_B64A7");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.TransferHash).HasMaxLength(50);

            entity.HasOne(d => d.AccountingCode).WithMany(p => p.FashionDocuments)
                .HasForeignKey(d => d.AccountingCodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionDocuments_dbo.AccountingCodes_AccountingCodeId");

            entity.HasOne(d => d.CustomerLegalHistory).WithMany(p => p.FashionDocuments)
                .HasForeignKey(d => d.CustomerLegalHistoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionDocuments_dbo.CustomerLegalHistories_CustomerLegalHistoryId");

            entity.HasOne(d => d.DeliveryAddress).WithMany(p => p.FashionDocuments)
                .HasForeignKey(d => d.DeliveryAddressId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionDocuments_dbo.Contacts_DeliveryAddressId");

            entity.HasOne(d => d.DeliveryMethod).WithMany(p => p.FashionDocuments)
                .HasForeignKey(d => d.DeliveryMethodId)
                .HasConstraintName("FK_dbo.FashionDocuments_dbo.DeliveryMethods_DeliveryMethodId");

            entity.HasOne(d => d.DestinationShop).WithMany(p => p.FashionDocumentDestinationShops)
                .HasForeignKey(d => d.DestinationShopId)
                .HasConstraintName("FK_dbo.FashionDocuments_dbo.Shops_DestinationShopId");

            entity.HasOne(d => d.FileImportLog).WithMany(p => p.FashionDocuments)
                .HasForeignKey(d => d.FileImportLogId)
                .HasConstraintName("FK_dbo.FashionDocuments_dbo.FileImportLogs_FileImportLogId");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.FashionDocument)
                .HasForeignKey<FashionDocument>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionDocuments_dbo.Documents_Id");

            entity.HasOne(d => d.LoyaltyVoucherBarcode).WithMany(p => p.FashionDocuments)
                .HasForeignKey(d => d.LoyaltyVoucherBarcodeId)
                .HasConstraintName("FK_dbo.FashionDocuments_dbo.VoucherBarcodes_LoyaltyVoucherBarcodeId");

            entity.HasOne(d => d.PaymentCondition).WithMany(p => p.FashionDocuments)
                .HasForeignKey(d => d.PaymentConditionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionDocuments_dbo.PaymentConditions_PaymentConditionId");

            entity.HasOne(d => d.Pos).WithMany(p => p.FashionDocuments)
                .HasForeignKey(d => d.PosId)
                .HasConstraintName("FK_dbo.FashionDocuments_dbo.Pos_PosId");

            entity.HasOne(d => d.PosTicketCancellationReason).WithMany(p => p.FashionDocuments)
                .HasForeignKey(d => d.PosTicketCancellationReasonId)
                .HasConstraintName("FK_dbo.FashionDocuments_dbo.PosTicketCancellationReasons_PosTicketCancellationReasonId");

            entity.HasOne(d => d.Publication).WithMany(p => p.FashionDocuments)
                .HasForeignKey(d => d.PublicationId)
                .HasConstraintName("FK_dbo.FashionDocuments_dbo.Publications_PublicationId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.FashionDocuments)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionDocuments_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.SourceShop).WithMany(p => p.FashionDocumentSourceShops)
                .HasForeignKey(d => d.SourceShopId)
                .HasConstraintName("FK_dbo.FashionDocuments_dbo.Shops_SourceShopId");
        });

        modelBuilder.Entity<FashionDocumentPicture>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FashionDocumentPictures");

            entity.HasIndex(e => e.DocumentId, "IX_DocumentId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Document).WithMany(p => p.FashionDocumentPictures)
                .HasForeignKey(d => d.DocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionDocumentPictures_dbo.FashionDocuments_DocumentId");

            entity.HasOne(d => d.Picture).WithMany(p => p.FashionDocumentPictures)
                .HasForeignKey(d => d.PictureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionDocumentPictures_dbo.Pictures_PictureId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.FashionDocumentPictures)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionDocumentPictures_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<FashionDocumentShop>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FashionDocumentShops");

            entity.HasIndex(e => e.FashionDocumentId, "IX_FashionDocument_Id").HasFillFactor(90);

            entity.HasIndex(e => e.ShopId, "Missing_IXNC_FashionDocumentShops_ShopId_D1EC1").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.FashionDocumentId).HasColumnName("FashionDocument_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.FashionDocument).WithMany(p => p.FashionDocumentShops)
                .HasForeignKey(d => d.FashionDocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionDocumentShops_dbo.FashionDocuments_FashionDocument_Id");

            entity.HasOne(d => d.Shop).WithMany(p => p.FashionDocumentShops)
                .HasForeignKey(d => d.ShopId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionDocumentShops_dbo.Shops_ShopId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.FashionDocumentShops)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionDocumentShops_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<FashionProduct>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FashionProducts");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(90);

            entity.HasIndex(e => e.ProductLineDeliveryId, "IX_ProductLineDeliveryId").HasFillFactor(90);

            entity.HasIndex(e => e.SalesPeriodId, "IX_SalesPeriodId").HasFillFactor(90);

            entity.HasIndex(e => new { e.ProductLineDeliveryId, e.SalesPeriodId }, "Missing_IXNC_FashionProducts_ProductLineDeliveryId_SalesPeriodId_25226");

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.FashionProduct)
                .HasForeignKey<FashionProduct>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProducts_dbo.Products_Id");

            entity.HasOne(d => d.NosCoType).WithMany(p => p.FashionProducts)
                .HasForeignKey(d => d.NosCoTypeId)
                .HasConstraintName("FK_dbo.FashionProducts_dbo.NosCoTypes_NosCoTypeId");

            entity.HasOne(d => d.OriginalSalesPeriod).WithMany(p => p.FashionProductOriginalSalesPeriods)
                .HasForeignKey(d => d.OriginalSalesPeriodId)
                .HasConstraintName("FK_dbo.FashionProducts_dbo.SalesPeriods_OriginalSalesPeriodId");

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.FashionProducts)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProducts_dbo.ProductLineDeliveries_ProductLineDeliveryId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.FashionProductSalesPeriods)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProducts_dbo.SalesPeriods_SalesPeriodId");
        });

        modelBuilder.Entity<FashionProductColor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FashionProductColors");

            entity.HasIndex(e => e.ColorId, "IX_ColorId").HasFillFactor(90);

            entity.HasIndex(e => e.FashionProductId, "IX_FashionProduct_Id").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.FashionProductId).HasColumnName("FashionProduct_Id");
            entity.Property(e => e.IsB2c).HasColumnName("IsB2C");
            entity.Property(e => e.Sku).HasDefaultValueSql("(NEXT VALUE FOR [ColorSkuSequence])");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Color).WithMany(p => p.FashionProductColors)
                .HasForeignKey(d => d.ColorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProductColors_dbo.Colors_ColorId");

            entity.HasOne(d => d.FashionProduct).WithMany(p => p.FashionProductColors)
                .HasForeignKey(d => d.FashionProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProductColors_dbo.FashionProducts_FashionProduct_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.FashionProductColors)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProductColors_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<FashionProductPicture>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FashionProductPictures");

            entity.HasIndex(e => e.ColorId, "IX_ColorId").HasFillFactor(95);

            entity.HasIndex(e => e.FashionProductId, "IX_FashionProduct_Id").HasFillFactor(90);

            entity.HasIndex(e => e.PictureId, "IX_PictureId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.FashionProductId).HasColumnName("FashionProduct_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Color).WithMany(p => p.FashionProductPictures)
                .HasForeignKey(d => d.ColorId)
                .HasConstraintName("FK_dbo.FashionProductPictures_dbo.Colors_ColorId");

            entity.HasOne(d => d.FashionProduct).WithMany(p => p.FashionProductPictures)
                .HasForeignKey(d => d.FashionProductId)
                .HasConstraintName("FK_dbo.FashionProductPictures_dbo.FashionProducts_FashionProduct_Id");

            entity.HasOne(d => d.Picture).WithMany(p => p.FashionProductPictures)
                .HasForeignKey(d => d.PictureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProductPictures_dbo.Pictures_PictureId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.FashionProductPictures)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProductPictures_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<FashionProductSize>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FashionProductSizes");

            entity.HasIndex(e => e.FashionProductId, "IX_FashionProductId").HasFillFactor(90);

            entity.HasIndex(e => e.FashionProductId, "Missing_IXNC_FashionProductSizes_FashionProductId_68250");

            entity.HasIndex(e => e.SizeId, "Missing_IXNC_FashionProductSizes_SizeId_81A69");

            entity.HasIndex(e => new { e.SizeId, e.FashionProductId }, "Missing_IXNC_FashionProductSizes_SizeId_FashionProductId_7CBF2");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ListPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OutletPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PurchasePrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RetailPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.WholesalePrice).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.FashionProduct).WithMany(p => p.FashionProductSizes)
                .HasForeignKey(d => d.FashionProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProductSizes_dbo.FashionProducts_FashionProductId");

            entity.HasOne(d => d.Size).WithMany(p => p.FashionProductSizes)
                .HasForeignKey(d => d.SizeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProductSizes_dbo.Sizes_SizeId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.FashionProductSizes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProductSizes_dbo.Users_UserCreatedId");

            entity.HasOne(d => d.Vat).WithMany(p => p.FashionProductSizes)
                .HasForeignKey(d => d.VatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProductSizes_dbo.Vats_VatId");
        });

        modelBuilder.Entity<FashionProductSizePack>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FashionProductSizePacks");

            entity.HasIndex(e => e.FashionProductId, "IX_FashionProductId").HasFillFactor(90);

            entity.HasIndex(e => e.SizePackId, "IX_SizePackId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.FashionProduct).WithMany(p => p.FashionProductSizePacks)
                .HasForeignKey(d => d.FashionProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProductSizePacks_dbo.FashionProducts_FashionProductId");

            entity.HasOne(d => d.SizePack).WithMany(p => p.FashionProductSizePacks)
                .HasForeignKey(d => d.SizePackId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProductSizePacks_dbo.SizePacks_SizePackId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.FashionProductSizePacks)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProductSizePacks_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<FashionProductSizeRegion>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FashionProductSizeRegions");

            entity.HasIndex(e => e.FashionProductSizeId, "IX_FashionProductSizeId").HasFillFactor(95);

            entity.HasIndex(e => e.RegionId, "IX_RegionId").HasFillFactor(95);

            entity.HasIndex(e => e.SalesPeriodId, "IX_SalesPeriodId").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.HasIndex(e => e.VatId, "IX_VatId").HasFillFactor(90);

            entity.HasIndex(e => e.RegionId, "Missing_IXNC_FashionProductSizeRegions_RegionId_BCF8A");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ListPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OutletPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PurchasePrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RetailPrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.WholesalePrice).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.FashionProductSize).WithMany(p => p.FashionProductSizeRegions)
                .HasForeignKey(d => d.FashionProductSizeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProductSizeRegions_dbo.FashionProductSizes_FashionProductSizeId");

            entity.HasOne(d => d.Region).WithMany(p => p.FashionProductSizeRegions)
                .HasForeignKey(d => d.RegionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProductSizeRegions_dbo.Regions_RegionId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.FashionProductSizeRegions)
                .HasForeignKey(d => d.SalesPeriodId)
                .HasConstraintName("FK_dbo.FashionProductSizeRegions_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.FashionProductSizeRegions)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProductSizeRegions_dbo.Users_UserCreatedId");

            entity.HasOne(d => d.Vat).WithMany(p => p.FashionProductSizeRegions)
                .HasForeignKey(d => d.VatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionProductSizeRegions_dbo.Vats_VatId");
        });

        modelBuilder.Entity<FashionReturnDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FashionReturnDocuments");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ReturnAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ReturnDate).HasColumnType("datetime");
            entity.Property(e => e.ReturnDiscountPercentage).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.ExternalReturnReason).WithMany(p => p.FashionReturnDocumentExternalReturnReasons)
                .HasForeignKey(d => d.ExternalReturnReasonId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionReturnDocuments_dbo.ReturnReasons_ExternalReturnReasonId");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.FashionReturnDocument)
                .HasForeignKey<FashionReturnDocument>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FashionReturnDocuments_dbo.FashionDocuments_Id");

            entity.HasOne(d => d.InternalReturnReason).WithMany(p => p.FashionReturnDocumentInternalReturnReasons)
                .HasForeignKey(d => d.InternalReturnReasonId)
                .HasConstraintName("FK_dbo.FashionReturnDocuments_dbo.ReturnReasons_InternalReturnReasonId");

            entity.HasOne(d => d.ReturnApprovedState).WithMany(p => p.FashionReturnDocuments)
                .HasForeignKey(d => d.ReturnApprovedStateId)
                .HasConstraintName("FK_dbo.FashionReturnDocuments_dbo.ReturnApprovedStates_ReturnApprovedStateId");

            entity.HasOne(d => d.ReturnDestionation).WithMany(p => p.FashionReturnDocuments)
                .HasForeignKey(d => d.ReturnDestionationId)
                .HasConstraintName("FK_dbo.FashionReturnDocuments_dbo.ReturnDestinations_ReturnDestionationId");

            entity.HasOne(d => d.ReturnSupplierAction).WithMany(p => p.FashionReturnDocuments)
                .HasForeignKey(d => d.ReturnSupplierActionId)
                .HasConstraintName("FK_dbo.FashionReturnDocuments_dbo.ReturnSupplierActions_ReturnSupplierActionId");
        });

        modelBuilder.Entity<FdiExportSession>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FdiExportSessions");

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.IsLjjv).HasColumnName("IsLJJV");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.AccountingSession).WithMany(p => p.FdiExportSessions)
                .HasForeignKey(d => d.AccountingSessionId)
                .HasConstraintName("FK_dbo.FdiExportSessions_dbo.AccountingSessions_AccountingSessionId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.FdiExportSessions)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FdiExportSessions_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<FdiExportSessionDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FdiExportSessionDocuments");

            entity.HasIndex(e => e.DocumentId, "IX_DocumentId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Document).WithMany(p => p.FdiExportSessionDocuments)
                .HasForeignKey(d => d.DocumentId)
                .HasConstraintName("FK_dbo.FdiExportSessionDocuments_dbo.Documents_DocumentId");

            entity.HasOne(d => d.FdiExportSession).WithMany(p => p.FdiExportSessionDocuments)
                .HasForeignKey(d => d.FdiExportSessionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FdiExportSessionDocuments_dbo.FdiExportSessions_FdiExportSessionId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.FdiExportSessionDocuments)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FdiExportSessionDocuments_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Feature>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Features");
        });

        modelBuilder.Entity<FileImportLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FileImportLogs");

            entity.HasIndex(e => e.FileInternalReference, "Missing_IXNC_FileImportLogs_FileInternalReference_65DED").HasFillFactor(95);

            entity.HasIndex(e => new { e.FileInternalReference, e.Status }, "Missing_IXNC_FileImportLogs_FileInternalReference_Status_37446").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.FileInternalReference).HasMaxLength(250);
            entity.Property(e => e.FileName).HasMaxLength(250);
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.ProcessedDateTime).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.FileImportLogType).WithMany(p => p.FileImportLogs)
                .HasForeignKey(d => d.FileImportLogTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FileImportLogs_dbo.FileImportLogTypes_FileImportLogType_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.FileImportLogs)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FileImportLogs_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<FileImportLogError>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FileImportLogErrors");

            entity.HasIndex(e => e.FileImportLogErrorTypeId, "IX_FileImportLogErrorType_Id").HasFillFactor(90);

            entity.HasIndex(e => e.FileImportLogId, "IX_FileImportLog_Id").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ErrorMessage).HasMaxLength(500);
            entity.Property(e => e.FileImportLogErrorTypeId).HasColumnName("FileImportLogErrorType_Id");
            entity.Property(e => e.FileImportLogId).HasColumnName("FileImportLog_Id");
            entity.Property(e => e.LineContent).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.FileImportLogErrorType).WithMany(p => p.FileImportLogErrors)
                .HasForeignKey(d => d.FileImportLogErrorTypeId)
                .HasConstraintName("FK_dbo.FileImportLogErrors_dbo.FileImportLogErrorTypes_FileImportLogErrorType_Id");

            entity.HasOne(d => d.FileImportLog).WithMany(p => p.FileImportLogErrors)
                .HasForeignKey(d => d.FileImportLogId)
                .HasConstraintName("FK_dbo.FileImportLogErrors_dbo.FileImportLogs_FileImportLog_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.FileImportLogErrors)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FileImportLogErrors_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<FileImportLogErrorType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FileImportLogErrorTypes");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.FileImportLogErrorTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FileImportLogErrorTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<FileImportLogType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FileImportLogTypes");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.FileImportLogTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FileImportLogTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<FinancialSupervisionByFcRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FinancialSupervisionByFcRule");

            entity.ToTable("FinancialSupervisionByFcRule");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(95);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.CashDiscount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CommercialDiscount).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.FinancialSupervisionByFcRule)
                .HasForeignKey<FinancialSupervisionByFcRule>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FinancialSupervisionByFcRule_dbo.Rules_Id");

            entity.HasOne(d => d.PaymentCondition).WithMany(p => p.FinancialSupervisionByFcRules)
                .HasForeignKey(d => d.PaymentConditionId)
                .HasConstraintName("FK_dbo.FinancialSupervisionByFcRule_dbo.PaymentConditions_PaymentConditionId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.FinancialSupervisionByFcRules)
                .HasForeignKey(d => d.SalesPeriodId)
                .HasConstraintName("FK_dbo.FinancialSupervisionByFcRule_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.FinancialSupervisionByFcRules)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK_dbo.FinancialSupervisionByFcRule_dbo.Suppliers_SupplierId");
        });

        modelBuilder.Entity<FinancialSupervisionByFcRuleProductLineDelivery>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FinancialSupervisionByFcRuleProductLineDeliveries");

            entity.HasIndex(e => e.FinancialSupervisionByFcRuleId, "IX_FinancialSupervisionByFcRuleId").HasFillFactor(90);

            entity.HasIndex(e => e.ProductLineDeliveryId, "IX_ProductLineDeliveryId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.FinancialSupervisionByFcRule).WithMany(p => p.FinancialSupervisionByFcRuleProductLineDeliveries)
                .HasForeignKey(d => d.FinancialSupervisionByFcRuleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FinancialSupervisionByFcRuleProductLineDeliveries_dbo.FinancialSupervisionByFcRule_FinancialSupervisionByFcRule_Id");

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.FinancialSupervisionByFcRuleProductLineDeliveries)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FinancialSupervisionByFcRuleProductLineDeliveries_dbo.ProductLineDeliveries_ProductLineDeliveryId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.FinancialSupervisionByFcRuleProductLineDeliveries)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FinancialSupervisionByFcRuleProductLineDeliveries_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<FinancialSupervisionByFcRuleShop>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FinancialSupervisionByFcRuleShops");

            entity.HasIndex(e => e.FinancialSupervisionByFcRuleId, "IX_FinancialSupervisionByFcRuleId").HasFillFactor(95);

            entity.HasIndex(e => e.ShopId, "IX_ShopId").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.FinancialSupervisionByFcRule).WithMany(p => p.FinancialSupervisionByFcRuleShops)
                .HasForeignKey(d => d.FinancialSupervisionByFcRuleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FinancialSupervisionByFcRuleShops_dbo.FinancialSupervisionByFcRule_FinancialSupervisionByFcRule_Id");

            entity.HasOne(d => d.Shop).WithMany(p => p.FinancialSupervisionByFcRuleShops)
                .HasForeignKey(d => d.ShopId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FinancialSupervisionByFcRuleShops_dbo.Shops_ShopId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.FinancialSupervisionByFcRuleShops)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FinancialSupervisionByFcRuleShops_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<FreeTextOnInvoiceRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FreeTextOnInvoiceRule");

            entity.ToTable("FreeTextOnInvoiceRule");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.FreeTextOnInvoiceRule)
                .HasForeignKey<FreeTextOnInvoiceRule>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FreeTextOnInvoiceRule_dbo.Rules_Id");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.FreeTextOnInvoiceRules)
                .HasForeignKey(d => d.SalesPeriodId)
                .HasConstraintName("FK_dbo.FreeTextOnInvoiceRule_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.FreeTextOnInvoiceRules)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK_dbo.FreeTextOnInvoiceRule_dbo.Suppliers_SupplierId");
        });

        modelBuilder.Entity<FreeTextOnInvoiceRuleProductLineDelivery>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FreeTextOnInvoiceRuleProductLineDeliveries");

            entity.HasIndex(e => e.FreeTextOnInvoiceRuleId, "IX_FreeTextOnInvoiceRuleId").HasFillFactor(90);

            entity.HasIndex(e => e.ProductLineDeliveryId, "IX_ProductLineDeliveryId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.FreeTextOnInvoiceRuleProductLineDeliveries)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FreeTextOnInvoiceRuleProductLineDeliveries_dbo.ProductLineDeliveries_ProductLineDeliveryId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.FreeTextOnInvoiceRuleProductLineDeliveries)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FreeTextOnInvoiceRuleProductLineDeliveries_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<FreeTextOnInvoiceRuleShop>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.FreeTextOnInvoiceRuleShops");

            entity.HasIndex(e => e.FreeTextOnInvoiceRuleId, "IX_FreeTextOnInvoiceRuleId").HasFillFactor(90);

            entity.HasIndex(e => e.ShopId, "IX_ShopId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Shop).WithMany(p => p.FreeTextOnInvoiceRuleShops)
                .HasForeignKey(d => d.ShopId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FreeTextOnInvoiceRuleShops_dbo.Shops_ShopId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.FreeTextOnInvoiceRuleShops)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.FreeTextOnInvoiceRuleShops_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Gender>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Genders");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Genders)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Genders_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<GridConfiguration>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.GridConfigurations");

            entity.HasIndex(e => e.GridConfigurationGroupId, "IX_GridConfigurationGroupId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.GridConfigurationGroup).WithMany(p => p.GridConfigurations)
                .HasForeignKey(d => d.GridConfigurationGroupId)
                .HasConstraintName("FK_dbo.GridConfigurations_dbo.GridConfigurationGroups_GridConfigurationGroupId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.GridConfigurations)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.GridConfigurations_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<GridConfigurationGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.GridConfigurationGroups");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.GridConfigurationGroups)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.GridConfigurationGroups_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<History>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Histories");

            entity.HasIndex(e => e.RecordId, "IX_dbo_Histories_RecordId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.TableName)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Histories)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Histories_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<IntraMirrorConfig>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.IntraMirrorConfigs");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.IntraMirrorConfigs)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.IntraMirrorConfigs_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<IntraMirrorProductLineDelivery>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.IntraMirrorProductLineDeliveries");

            entity.HasIndex(e => e.BrandId, "IX_BrandId");

            entity.HasIndex(e => e.IntraMirrorConfigId, "IX_IntraMirrorConfig_Id");

            entity.HasIndex(e => e.ProductLineDeliveryId, "IX_ProductLineDeliveryId");

            entity.HasIndex(e => e.SalesPeriodId, "IX_SalesPeriodId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Discount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.IntraMirrorConfigId).HasColumnName("IntraMirrorConfig_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Brand).WithMany(p => p.IntraMirrorProductLineDeliveries)
                .HasForeignKey(d => d.BrandId)
                .HasConstraintName("FK_dbo.IntraMirrorProductLineDeliveries_dbo.Brands_BrandId");

            entity.HasOne(d => d.IntraMirrorConfig).WithMany(p => p.IntraMirrorProductLineDeliveries)
                .HasForeignKey(d => d.IntraMirrorConfigId)
                .HasConstraintName("FK_dbo.IntraMirrorProductLineDeliveries_dbo.IntraMirrorConfigs_IntraMirrorConfig_Id");

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.IntraMirrorProductLineDeliveries)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .HasConstraintName("FK_dbo.IntraMirrorProductLineDeliveries_dbo.ProductLineDeliveries_ProductLineDeliveryId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.IntraMirrorProductLineDeliveries)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.IntraMirrorProductLineDeliveries_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.IntraMirrorProductLineDeliveries)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.IntraMirrorProductLineDeliveries_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Invitation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Invitations");

            entity.HasIndex(e => e.BarcodeId, "IX_BarcodeId").HasFillFactor(90);

            entity.HasIndex(e => e.Key, "Missing_IXNC_Invitations_Key_1D350").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Barcode).WithMany(p => p.Invitations)
                .HasForeignKey(d => d.BarcodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Invitations_dbo.Barcodes_BarcodeId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Invitations)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Invitations_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<InvitationType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.InvitationTypes");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.InvitationTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.InvitationTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<InvoiceCompare>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.InvoiceCompares");

            entity.HasIndex(e => e.SalesPeriodId, "IX_SalesPeriodId").HasFillFactor(95);

            entity.HasIndex(e => e.SupplierId, "IX_SupplierId").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.InvoiceCompares)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.InvoiceCompares_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.InvoiceCompares)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.InvoiceCompares_dbo.Suppliers_SupplierId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.InvoiceCompares)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.InvoiceCompares_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<KlaviyoCollectionSaleCustomerSync>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.KlaviyoCollectionSaleCustomerSyncs");

            entity.HasIndex(e => e.CustomerId, "IX_CustomerId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Customer).WithMany(p => p.KlaviyoCollectionSaleCustomerSyncs)
                .HasForeignKey(d => d.CustomerId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.KlaviyoCollectionSaleCustomerSyncs_dbo.Customers_CustomerId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.KlaviyoCollectionSaleCustomerSyncs)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.KlaviyoCollectionSaleCustomerSyncs_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<KlaviyoDocumentSync>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.KlaviyoDocumentSyncs");

            entity.HasIndex(e => e.DocumentId, "IX_DocumentId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Document).WithMany(p => p.KlaviyoDocumentSyncs)
                .HasForeignKey(d => d.DocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.KlaviyoDocumentSyncs_dbo.Documents_DocumentId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.KlaviyoDocumentSyncs)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.KlaviyoDocumentSyncs_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<KlaviyoRetailDocumentSync>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.KlaviyoRetailDocumentSyncs");

            entity.HasIndex(e => e.DocumentId, "IX_DocumentId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Document).WithMany(p => p.KlaviyoRetailDocumentSyncs)
                .HasForeignKey(d => d.DocumentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.KlaviyoRetailDocumentSyncs_dbo.Documents_DocumentId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.KlaviyoRetailDocumentSyncs)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.KlaviyoRetailDocumentSyncs_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<KlaviyoShopSync>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.KlaviyoShopSyncs");

            entity.HasIndex(e => e.ShopId, "IX_ShopId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Shop).WithMany(p => p.KlaviyoShopSyncs)
                .HasForeignKey(d => d.ShopId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.KlaviyoShopSyncs_dbo.Shops_ShopId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.KlaviyoShopSyncs)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.KlaviyoShopSyncs_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<LabelPrintJob>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.LabelPrintJobs");

            entity.HasIndex(e => e.LabelPrinterId, "IX_LabelPrinterId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.FinishedOn).HasColumnType("datetime");
            entity.Property(e => e.LastActionOn).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.StartedOn).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.LabelPrinter).WithMany(p => p.LabelPrintJobs)
                .HasForeignKey(d => d.LabelPrinterId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.LabelPrintJobs_dbo.LabelPrinters_LabelPrinterId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.LabelPrintJobs)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.LabelPrintJobs_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<LabelPrintJobItem>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.LabelPrintJobItems");

            entity.HasIndex(e => e.LabelPrintJobId, "IX_LabelPrintJobId");

            entity.HasOne(d => d.LabelPrintJob).WithMany(p => p.LabelPrintJobItems)
                .HasForeignKey(d => d.LabelPrintJobId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.LabelPrintJobItems_dbo.LabelPrintJobs_LabelPrintJobId");
        });

        modelBuilder.Entity<LabelPrinter>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.LabelPrinters");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.LabelPrinters)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.LabelPrinters_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Language>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Languages");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Languages)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Languages_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<LegalForm>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.LegalForms");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.LegalForms)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.LegalForms_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Line>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Lines");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Lines)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Lines_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<LiuJoBudget>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Fabric).HasMaxLength(10);
            entity.Property(e => e.Model).HasMaxLength(10);
            entity.Property(e => e.ShopCode).HasMaxLength(20);
        });

        modelBuilder.Entity<LiuJoConfirmationDetail>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Barcode).HasMaxLength(15);
            entity.Property(e => e.ColorCode).HasMaxLength(10);
            entity.Property(e => e.FabricCode).HasMaxLength(10);
            entity.Property(e => e.ModelCode).HasMaxLength(10);
            entity.Property(e => e.Quantity).HasMaxLength(10);
            entity.Property(e => e.ShopCode).HasMaxLength(10);
            entity.Property(e => e.SizeName).HasMaxLength(10);
            entity.Property(e => e.Whsprice)
                .HasMaxLength(10)
                .HasColumnName("WHSPrice");
        });

        modelBuilder.Entity<LiuJoProduct>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Barcode).HasMaxLength(15);
            entity.Property(e => e.Color).HasMaxLength(20);
            entity.Property(e => e.ColorName).HasMaxLength(20);
            entity.Property(e => e.Fabric).HasMaxLength(20);
            entity.Property(e => e.Model).HasMaxLength(20);
            entity.Property(e => e.Price).HasMaxLength(10);
            entity.Property(e => e.Size).HasMaxLength(10);
        });

        modelBuilder.Entity<LiuJoShoe>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.Model).HasMaxLength(20);
        });

        modelBuilder.Entity<LiuJoShopCode>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.ShopCity).HasMaxLength(500);
            entity.Property(e => e.ShopCode).HasMaxLength(20);
            entity.Property(e => e.ShopName).HasMaxLength(500);
        });

        modelBuilder.Entity<LoyaltyType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.LoyaltyTypes");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Percentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.TriggerAmount).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.LoyaltyTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.LoyaltyTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<MailLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.MailLogs");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.MailLogs)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.MailLogs_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ManualDocumentTransfer>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ManualDocumentTransfers");

            entity.HasIndex(e => e.SourceDocumentTypeId, "IX_SourceDocumentTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.TargetDocumentTypeId, "IX_TargetDocumentTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.SourceDocumentType).WithMany(p => p.ManualDocumentTransferSourceDocumentTypes)
                .HasForeignKey(d => d.SourceDocumentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ManualDocumentTransfers_dbo.DocumentTypes_SourceDocumentTypeId");

            entity.HasOne(d => d.TargetDocumentType).WithMany(p => p.ManualDocumentTransferTargetDocumentTypes)
                .HasForeignKey(d => d.TargetDocumentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ManualDocumentTransfers_dbo.DocumentTypes_TargetDocumentTypeId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ManualDocumentTransfers)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ManualDocumentTransfers_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<MigrationHistory>(entity =>
        {
            entity.HasKey(e => new { e.MigrationId, e.ContextKey }).HasName("PK_dbo.__MigrationHistory");

            entity.ToTable("__MigrationHistory");

            entity.Property(e => e.MigrationId).HasMaxLength(150);
            entity.Property(e => e.ContextKey).HasMaxLength(300);
            entity.Property(e => e.Model).IsRequired();
            entity.Property(e => e.ProductVersion)
                .IsRequired()
                .HasMaxLength(32);
        });

        modelBuilder.Entity<MiscDocumentLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.MiscDocumentLines");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(95);

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.AccountingCode).WithMany(p => p.MiscDocumentLines)
                .HasForeignKey(d => d.AccountingCodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.MiscDocumentLines_dbo.AccountingCodes_AccountingCodeId");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.MiscDocumentLine)
                .HasForeignKey<MiscDocumentLine>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.MiscDocumentLines_dbo.DocumentLines_Id");
        });

        modelBuilder.Entity<MobileDeviceLogin>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.MobileDeviceLogins");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.MobileDeviceLogins)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.MobileDeviceLogins_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ModificationType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ModificationTypes");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Price).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ModificationTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ModificationTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<NoDeliveryRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.NoDeliveryRules");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.NoDeliveryRule)
                .HasForeignKey<NoDeliveryRule>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.NoDeliveryRules_dbo.Rules_Id");

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.NoDeliveryRules)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .HasConstraintName("FK_dbo.NoDeliveryRules_dbo.ProductLineDeliveries_ProductLineDeliveryId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.NoDeliveryRules)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.NoDeliveryRules_dbo.SalesPeriods_SalesPeriodId");
        });

        modelBuilder.Entity<NoDeliveryRuleSupplier>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.NoDeliveryRuleSuppliers");

            entity.HasIndex(e => e.NoDeliveryRuleId, "IX_NoDeliveryRuleId").HasFillFactor(95);

            entity.HasIndex(e => e.SupplierId, "IX_SupplierId").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.NoDeliveryRule).WithMany(p => p.NoDeliveryRuleSuppliers)
                .HasForeignKey(d => d.NoDeliveryRuleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.NoDeliveryRuleSuppliers_dbo.NoDeliveryRules_NoDeliveryRuleId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.NoDeliveryRuleSuppliers)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.NoDeliveryRuleSuppliers_dbo.Suppliers_SupplierId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.NoDeliveryRuleSuppliers)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.NoDeliveryRuleSuppliers_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<NosCoType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.NosCoTypes");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.NosCoTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.NosCoTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<OptInSource>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.OptInSources");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.OptInSources)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.OptInSources_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<OptInType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.OptInTypes");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.OptInTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.OptInTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<PaymentCondition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PaymentConditions");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.PaymentConditions)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PaymentConditions_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Permission>(entity =>
        {
            entity.HasKey(e => new { e.RoleId, e.FeatureId, e.AppId }).HasName("PK_dbo.Permissions");

            entity.HasIndex(e => e.AppId, "IX_AppId").HasFillFactor(95);

            entity.HasIndex(e => e.FeatureId, "IX_FeatureId").HasFillFactor(95);

            entity.HasIndex(e => e.RoleId, "IX_RoleId").HasFillFactor(95);

            entity.HasOne(d => d.App).WithMany(p => p.Permissions)
                .HasForeignKey(d => d.AppId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Permissions_dbo.Apps_AppId");

            entity.HasOne(d => d.Feature).WithMany(p => p.Permissions)
                .HasForeignKey(d => d.FeatureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Permissions_dbo.Features_FeatureId");

            entity.HasOne(d => d.Role).WithMany(p => p.Permissions)
                .HasForeignKey(d => d.RoleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Permissions_dbo.Roles_RoleId");
        });

        modelBuilder.Entity<Picture>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Pictures");

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Pictures)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Pictures_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Po>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Pos");

            entity.HasIndex(e => e.AccountingCodeId, "IX_AccountingCodeId");

            entity.HasIndex(e => e.LabelPrinterId, "IX_LabelPrinterId").HasFillFactor(90);

            entity.HasIndex(e => e.ShopId, "IX_ShopId").HasFillFactor(90);

            entity.HasIndex(e => e.StockLocationId, "IX_StockLocationId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.HasEposPrinter).HasColumnName("HasEPosPrinter");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.AccountingCode).WithMany(p => p.Pos)
                .HasForeignKey(d => d.AccountingCodeId)
                .HasConstraintName("FK_dbo.Pos_dbo.AccountingCodes_AccountingCodeId");

            entity.HasOne(d => d.LabelPrinter).WithMany(p => p.Pos)
                .HasForeignKey(d => d.LabelPrinterId)
                .HasConstraintName("FK_dbo.Pos_dbo.LabelPrinters_LabelPrinterId");

            entity.HasOne(d => d.Shop).WithMany(p => p.Pos)
                .HasForeignKey(d => d.ShopId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Pos_dbo.Shops_ShopId");

            entity.HasOne(d => d.StockLocation).WithMany(p => p.Pos)
                .HasForeignKey(d => d.StockLocationId)
                .HasConstraintName("FK_dbo.Pos_dbo.StockLocations_StockLocationId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Pos)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Pos_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<PosAccount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PosAccounts");

            entity.Property(e => e.CountryIso).HasMaxLength(5);
            entity.Property(e => e.FileNumber).HasMaxLength(20);
            entity.Property(e => e.Name).HasMaxLength(100);
        });

        modelBuilder.Entity<PosAccountingCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PosAccountingCodes");

            entity.HasIndex(e => new { e.PosAccountId, e.Code }, "IX_Code_PosAccountId").IsUnique();

            entity.HasIndex(e => e.PosAccountingCodeTypeId, "IX_PosAccountingCodeTypeId");

            entity.Property(e => e.Code).HasMaxLength(10);

            entity.HasOne(d => d.PosAccount).WithMany(p => p.PosAccountingCodes)
                .HasForeignKey(d => d.PosAccountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosAccountingCodes_dbo.PosAccounts_PosAccountId");

            entity.HasOne(d => d.PosAccountingCodeType).WithMany(p => p.PosAccountingCodes)
                .HasForeignKey(d => d.PosAccountingCodeTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosAccountingCodes_dbo.PosAccountingCodeTypes_PosAccountingCodeTypeId");
        });

        modelBuilder.Entity<PosAccountingCodeMap>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PosAccountingCodeMaps");

            entity.HasIndex(e => e.PosAccountingCodeId, "IX_PosAccountingCodeId");

            entity.HasIndex(e => e.PosId, "IX_PosId");

            entity.HasOne(d => d.PosAccountingCode).WithMany(p => p.PosAccountingCodeMaps)
                .HasForeignKey(d => d.PosAccountingCodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosAccountingCodeMaps_dbo.PosAccountingCodes_PosAccountingCodeId");

            entity.HasOne(d => d.Pos).WithMany(p => p.PosAccountingCodeMaps)
                .HasForeignKey(d => d.PosId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosAccountingCodeMaps_dbo.Pos_PosId");
        });

        modelBuilder.Entity<PosAccountingCodeType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PosAccountingCodeTypes");
        });

        modelBuilder.Entity<PosAccountingSession>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PosAccountingSessions");

            entity.HasIndex(e => e.ExternalPosId, "IX_ExternalPosId");

            entity.HasIndex(e => e.InternalPosId, "IX_InternalPosId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.ConfirmedOn).HasColumnType("datetime");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ExternalPos).WithMany(p => p.PosAccountingSessions)
                .HasForeignKey(d => d.ExternalPosId)
                .HasConstraintName("FK_dbo.PosAccountingSessions_dbo.ExternalPos_ExternalPosId");

            entity.HasOne(d => d.InternalPos).WithMany(p => p.PosAccountingSessions)
                .HasForeignKey(d => d.InternalPosId)
                .HasConstraintName("FK_dbo.PosAccountingSessions_dbo.Pos_InternalPosId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.PosAccountingSessions)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosAccountingSessions_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<PosAccountingSessionEntry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PosAccountingSessionEntries");

            entity.HasIndex(e => e.PosAccountingCodeId, "IX_PosAccountingCodeId");

            entity.HasIndex(e => e.PosAccountingSessionId, "IX_PosAccountingSessionId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.EndBalance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StartBalance).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.PosAccountingCode).WithMany(p => p.PosAccountingSessionEntries)
                .HasForeignKey(d => d.PosAccountingCodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosAccountingSessionEntries_dbo.PosAccountingCodes_PosAccountingCodeId");

            entity.HasOne(d => d.PosAccountingSession).WithMany(p => p.PosAccountingSessionEntries)
                .HasForeignKey(d => d.PosAccountingSessionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosAccountingSessionEntries_dbo.PosAccountingSessions_PosAccountingSessionId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.PosAccountingSessionEntries)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosAccountingSessionEntries_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<PosDiscountReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PosDiscountReasons");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.PosDiscountReasons)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosDiscountReasons_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<PosDocumentLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PosDocumentLines");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ModificationDueDate).HasColumnType("datetime");
            entity.Property(e => e.ModificationPrice).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.DiscountCampaignLine).WithMany(p => p.PosDocumentLines)
                .HasForeignKey(d => d.DiscountCampaignLineId)
                .HasConstraintName("FK_dbo.PosDocumentLines_dbo.DiscountCampaignLines_DiscountCampaignLineId");

            entity.HasOne(d => d.Employee).WithMany(p => p.PosDocumentLines)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosDocumentLines_dbo.Employees_EmployeeId");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.PosDocumentLine)
                .HasForeignKey<PosDocumentLine>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosDocumentLines_dbo.DocumentLines_Id");

            entity.HasOne(d => d.ModificationType).WithMany(p => p.PosDocumentLines)
                .HasForeignKey(d => d.ModificationTypeId)
                .HasConstraintName("FK_dbo.PosDocumentLines_dbo.ModificationTypes_ModificationTypeId");

            entity.HasOne(d => d.PosDiscountReason).WithMany(p => p.PosDocumentLines)
                .HasForeignKey(d => d.PosDiscountReasonId)
                .HasConstraintName("FK_dbo.PosDocumentLines_dbo.PosDiscountReasons_PosDiscountReasonId");
        });

        modelBuilder.Entity<PosEjournal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PosEJournals");

            entity.ToTable("PosEJournals");

            entity.HasIndex(e => e.PosId, "IX_PosId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ItsrequestId).HasColumnName("ITSRequestId");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Pos).WithMany(p => p.PosEjournals)
                .HasForeignKey(d => d.PosId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosEJournals_dbo.Pos_PosId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.PosEjournals)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosEJournals_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<PosOptIn>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PosOptIns");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.PosOptIns)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosOptIns_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<PosPinPadLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PosPinPadLogs");
        });

        modelBuilder.Entity<PosPinPadMessage>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PosPinPadMessages");

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp).HasColumnType("datetime");
        });

        modelBuilder.Entity<PosSession>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PosSessions");

            entity.HasIndex(e => e.ClosingDifferenceExpenseId, "IX_ClosingDifferenceExpenseId").HasFillFactor(90);

            entity.HasIndex(e => e.EmployeeClosedId, "IX_EmployeeClosedId").HasFillFactor(90);

            entity.HasIndex(e => e.EmployeeId, "IX_EmployeeId").HasFillFactor(90);

            entity.HasIndex(e => e.OpeningDifferenceExpenseId, "IX_OpeningDifferenceExpenseId").HasFillFactor(90);

            entity.HasIndex(e => e.PosId, "IX_PosId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.BankReservedAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CalculatedAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CalculatedElectronicPaymentsAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CalculatedStartAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.CloseDate).HasColumnType("datetime");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ElectronicPaymentsAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.RegisteredAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StartAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ClosingDifferenceExpense).WithMany(p => p.PosSessionClosingDifferenceExpenses)
                .HasForeignKey(d => d.ClosingDifferenceExpenseId)
                .HasConstraintName("FK_dbo.PosSessions_dbo.Expenses_ClosingDifferenceExpenseId");

            entity.HasOne(d => d.EmployeeClosed).WithMany(p => p.PosSessionEmployeeCloseds)
                .HasForeignKey(d => d.EmployeeClosedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosSessions_dbo.Employees_EmployeeClosedId");

            entity.HasOne(d => d.Employee).WithMany(p => p.PosSessionEmployees)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosSessions_dbo.Employees_EmployeeId");

            entity.HasOne(d => d.OpeningDifferenceExpense).WithMany(p => p.PosSessionOpeningDifferenceExpenses)
                .HasForeignKey(d => d.OpeningDifferenceExpenseId)
                .HasConstraintName("FK_dbo.PosSessions_dbo.Expenses_OpeningDifferenceExpenseId");

            entity.HasOne(d => d.Pos).WithMany(p => p.PosSessions)
                .HasForeignKey(d => d.PosId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosSessions_dbo.Pos_PosId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.PosSessions)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosSessions_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<PosTicketCancellationReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PosTicketCancellationReasons");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.PosTicketCancellationReasons)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PosTicketCancellationReasons_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<PrivacyGdprLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PrivacyGdprLogs");

            entity.Property(e => e.Timestamp).HasColumnType("datetime");
        });

        modelBuilder.Entity<Product>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Products");

            entity.HasIndex(e => e.BarcodeId, "IX_BarcodeId").HasFillFactor(90);

            entity.HasIndex(e => e.ProductCategoryId, "IX_ProductCategoryId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Hscode).HasColumnName("HSCode");
            entity.Property(e => e.HscodeRemark).HasColumnName("HSCodeRemark");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.SearchCode).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Barcode).WithMany(p => p.Products)
                .HasForeignKey(d => d.BarcodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Products_dbo.Barcodes_BarcodeId");

            entity.HasOne(d => d.ProductCategory).WithMany(p => p.Products)
                .HasForeignKey(d => d.ProductCategoryId)
                .HasConstraintName("FK_dbo.Products_dbo.ProductCategories_ProductCategoryId");

            entity.HasOne(d => d.ProductGroup).WithMany(p => p.Products)
                .HasForeignKey(d => d.ProductGroupId)
                .HasConstraintName("FK_dbo.Products_dbo.ProductGroups_ProductGroupId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.Products)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK_dbo.Products_dbo.Suppliers_SupplierId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Products)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Products_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ProductAlias>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ProductAlias");

            entity.ToTable("ProductAlias");

            entity.HasIndex(e => e.ProductId, "IX_ProductId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Product).WithMany(p => p.ProductAliases)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductAlias_dbo.Products_ProductId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ProductAliases)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductAlias_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ProductCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ProductCategories");

            entity.HasIndex(e => e.ProductGroupId, "IX_ProductGroupId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ProductGroup).WithMany(p => p.ProductCategories)
                .HasForeignKey(d => d.ProductGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductCategories_dbo.ProductGroups_ProductGroupId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ProductCategories)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductCategories_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ProductCategoryAlias>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ProductCategoryAlias");

            entity.ToTable("ProductCategoryAlias");

            entity.HasIndex(e => e.ProductCategoryId, "IX_ProductCategoryId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ProductCategory).WithMany(p => p.ProductCategoryAliases)
                .HasForeignKey(d => d.ProductCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductCategoryAlias_dbo.ProductCategories_ProductCategoryId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ProductCategoryAliases)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductCategoryAlias_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ProductDeliveryWindow>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ProductDeliveryWindows");

            entity.HasIndex(e => e.DeliveryWindowId, "IX_DeliveryWindowId").HasFillFactor(95);

            entity.HasIndex(e => e.ProductId, "IX_ProductId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.DeliveryWindow).WithMany(p => p.ProductDeliveryWindows)
                .HasForeignKey(d => d.DeliveryWindowId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductDeliveryWindows_dbo.DeliveryWindows_DeliveryWindowId");

            entity.HasOne(d => d.Product).WithMany(p => p.ProductDeliveryWindows)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductDeliveryWindows_dbo.Products_ProductId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ProductDeliveryWindows)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductDeliveryWindows_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ProductGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ProductGroups");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ProductGroups)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductGroups_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ProductLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ProductLines");

            entity.HasIndex(e => e.BrandId, "IX_BrandId").HasFillFactor(90);

            entity.HasIndex(e => e.GenderId, "IX_GenderId").HasFillFactor(90);

            entity.Property(e => e.AveragePrice).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.AgeCategory).WithMany(p => p.ProductLines)
                .HasForeignKey(d => d.AgeCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductLines_dbo.AgeCategories_AgeCategoryId");

            entity.HasOne(d => d.Brand).WithMany(p => p.ProductLines)
                .HasForeignKey(d => d.BrandId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductLines_dbo.Brands_BrandId");

            entity.HasOne(d => d.Gender).WithMany(p => p.ProductLines)
                .HasForeignKey(d => d.GenderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductLines_dbo.Genders_GenderId");

            entity.HasOne(d => d.Line).WithMany(p => p.ProductLines)
                .HasForeignKey(d => d.LineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductLines_dbo.Lines_LineId");

            entity.HasOne(d => d.SegmentType).WithMany(p => p.ProductLines)
                .HasForeignKey(d => d.SegmentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductLines_dbo.SegmentTypes_SegmentTypeId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ProductLines)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductLines_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ProductLineDelivery>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ProductLineDeliveries");

            entity.HasIndex(e => e.ProductLineDeliveryRelatedId, "IX_ProductLineDeliveryRelatedId");

            entity.HasIndex(e => e.ProductLineId, "IX_ProductLineId");

            entity.HasIndex(e => e.SalesPeriodTypeId, "IX_SalesPeriodTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.Code, "Missing_IXNC_ProductLineDeliveries_Code_E640E").HasFillFactor(90);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ProductLineDeliveryRelated).WithMany(p => p.InverseProductLineDeliveryRelated)
                .HasForeignKey(d => d.ProductLineDeliveryRelatedId)
                .HasConstraintName("FK_dbo.ProductLineDeliveries_dbo.ProductLineDeliveries_ProductLineDeliveryRelatedId");

            entity.HasOne(d => d.ProductLine).WithMany(p => p.ProductLineDeliveries)
                .HasForeignKey(d => d.ProductLineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductLineDeliveries_dbo.ProductLines_ProductLineId");

            entity.HasOne(d => d.SalesPeriodType).WithMany(p => p.ProductLineDeliveries)
                .HasForeignKey(d => d.SalesPeriodTypeId)
                .HasConstraintName("FK_dbo.ProductLineDeliveries_dbo.SalesPeriodTypes_SalesPeriodTypeId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ProductLineDeliveries)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductLineDeliveries_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ProductMatrix>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ProductMatrices");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ProductMatrices)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProductMatrices_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ProposedRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ProposedRules");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ProposedRule)
                .HasForeignKey<ProposedRule>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ProposedRules_dbo.Rules_Id");
        });

        modelBuilder.Entity<Province>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Provinces");

            entity.HasIndex(e => e.CountryId, "IX_CountryId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Country).WithMany(p => p.Provinces)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Provinces_dbo.Countries_CountryId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Provinces)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Provinces_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<PublicHoliday>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PublicHolidays");

            entity.HasIndex(e => e.CountryId, "IX_CountryId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Country).WithMany(p => p.PublicHolidays)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PublicHolidays_dbo.Countries_CountryId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.PublicHolidays)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PublicHolidays_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Publication>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Publications");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Publications)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Publications_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<PublicationCountry>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.PublicationCountries");

            entity.HasIndex(e => e.CountryId, "IX_CountryId").HasFillFactor(90);

            entity.HasIndex(e => e.PublicationId, "IX_PublicationId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Country).WithMany(p => p.PublicationCountries)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PublicationCountries_dbo.Countries_CountryId");

            entity.HasOne(d => d.Publication).WithMany(p => p.PublicationCountries)
                .HasForeignKey(d => d.PublicationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PublicationCountries_dbo.Publications_PublicationId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.PublicationCountries)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.PublicationCountries_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<RatingType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.RatingTypes");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(50);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.RatingTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.RatingTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<RecomaticsInvoice>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.RecomaticsInvoices");

            entity.HasIndex(e => e.SalesPeriodId, "IX_SalesPeriodId").HasFillFactor(95);

            entity.HasIndex(e => e.SupplierId, "IX_SupplierId").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.HasIndex(e => new { e.ImportType, e.SalesPeriodId }, "Missing_IXNC_RecomaticsInvoices_ImportType_SalesPeriodId_6EDEF");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DocInvoiceDate).HasColumnType("datetime");
            entity.Property(e => e.NetAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.PlAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ScanDate).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.TotalAmount).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.RecomaticsInvoices)
                .HasForeignKey(d => d.SalesPeriodId)
                .HasConstraintName("FK_dbo.RecomaticsInvoices_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.RecomaticsInvoices)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK_dbo.RecomaticsInvoices_dbo.Suppliers_SupplierId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.RecomaticsInvoices)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.RecomaticsInvoices_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<RecomaticsInvoiceCollectionDelivery>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.RecomaticsInvoiceCollectionDeliveries");

            entity.HasIndex(e => e.CollectionDeliveryId, "IX_CollectionDeliveryId").HasFillFactor(90);

            entity.HasIndex(e => e.RecomaticsInvoiceId, "IX_RecomaticsInvoiceId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.CollectionDelivery).WithMany(p => p.RecomaticsInvoiceCollectionDeliveries)
                .HasForeignKey(d => d.CollectionDeliveryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.RecomaticsInvoiceCollectionDeliveries_dbo.CollectionDeliveries_CollectionDeliveryId");

            entity.HasOne(d => d.RecomaticsInvoice).WithMany(p => p.RecomaticsInvoiceCollectionDeliveries)
                .HasForeignKey(d => d.RecomaticsInvoiceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.RecomaticsInvoiceCollectionDeliveries_dbo.RecomaticsInvoices_RecomaticsInvoiceId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.RecomaticsInvoiceCollectionDeliveries)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.RecomaticsInvoiceCollectionDeliveries_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<RecomaticsInvoiceFileImportLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.RecomaticsInvoiceFileImportLogs");

            entity.HasIndex(e => e.FileImportLogId, "IX_FileImportLogId").HasFillFactor(95);

            entity.HasIndex(e => e.RecomaticsInvoiceId, "IX_RecomaticsInvoiceId").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.FileImportLog).WithMany(p => p.RecomaticsInvoiceFileImportLogs)
                .HasForeignKey(d => d.FileImportLogId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.RecomaticsInvoiceFileImportLogs_dbo.FileImportLogs_FileImportLogId");

            entity.HasOne(d => d.RecomaticsInvoice).WithMany(p => p.RecomaticsInvoiceFileImportLogs)
                .HasForeignKey(d => d.RecomaticsInvoiceId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.RecomaticsInvoiceFileImportLogs_dbo.RecomaticsInvoices_RecomaticsInvoiceId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.RecomaticsInvoiceFileImportLogs)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.RecomaticsInvoiceFileImportLogs_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<RecurringAppointment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.RecurringAppointments");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.EndTime).HasColumnType("datetime");
            entity.Property(e => e.RecurrenceEndDate).HasColumnType("datetime");
            entity.Property(e => e.RecurrenceStartDate).HasColumnType("datetime");
            entity.Property(e => e.StartTime).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.RecurringAppointments)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.RecurringAppointments_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Region>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Regions");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Regions)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Regions_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ReportContext>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ReportContexts");
        });

        modelBuilder.Entity<ReportDefinition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ReportDefinitions");

            entity.HasIndex(e => e.DepartmentId, "IX_DepartmentId");

            entity.HasIndex(e => e.ReportContextId, "IX_ReportContextId");

            entity.HasIndex(e => e.ReportShareId, "IX_ReportShareId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Department).WithMany(p => p.ReportDefinitions)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ReportDefinitions_dbo.Departments_DepartmentId");

            entity.HasOne(d => d.ReportContext).WithMany(p => p.ReportDefinitions)
                .HasForeignKey(d => d.ReportContextId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ReportDefinitions_dbo.ReportContexts_ReportContextId");

            entity.HasOne(d => d.ReportShare).WithMany(p => p.ReportDefinitions)
                .HasForeignKey(d => d.ReportShareId)
                .HasConstraintName("FK_dbo.ReportDefinitions_dbo.ReportShares_ReportShareId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ReportDefinitions)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ReportDefinitions_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ReportShare>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ReportShares");
        });

        modelBuilder.Entity<ReturnApprovedState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ReturnApprovedStates");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ReturnApprovedStates)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ReturnApprovedStates_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ReturnDestination>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ReturnDestinations");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ReturnDestinations)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ReturnDestinations_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ReturnReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ReturnReasons");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ReturnReasons)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ReturnReasons_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ReturnRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ReturnRules");

            entity.HasIndex(e => e.SupplierId, "IX_SupplierId").HasFillFactor(95);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.Decimal).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.MaxAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.StartDate).HasColumnType("datetime");

            entity.HasOne(d => d.Brand).WithMany(p => p.ReturnRules)
                .HasForeignKey(d => d.BrandId)
                .HasConstraintName("FK_dbo.ReturnRules_dbo.Brands_BrandId");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ReturnRule)
                .HasForeignKey<ReturnRule>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ReturnRules_dbo.Rules_Id");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.ReturnRules)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ReturnRules_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.ReturnRules)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK_dbo.ReturnRules_dbo.Suppliers_SupplierId");
        });

        modelBuilder.Entity<ReturnState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ReturnStates");

            entity.HasIndex(e => e.ReturnStateActionId, "IX_ReturnStateActionId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.InstructionsFr).HasColumnName("InstructionsFR");
            entity.Property(e => e.InstructionsNl).HasColumnName("InstructionsNL");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.NameFr).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ReturnStateAction).WithMany(p => p.ReturnStates)
                .HasForeignKey(d => d.ReturnStateActionId)
                .HasConstraintName("FK_dbo.ReturnStates_dbo.ReturnStateActions_ReturnStateActionId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ReturnStates)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ReturnStates_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ReturnStateAction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ReturnStateActions");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ReturnStateActions)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ReturnStateActions_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ReturnSupplierAction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ReturnSupplierActions");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ReturnSupplierActions)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ReturnSupplierActions_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ReturnTracking>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ReturnTrackings");

            entity.HasIndex(e => e.FashionReturnDocumentId, "IX_FashionReturnDocument_Id").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.FashionReturnDocumentId).HasColumnName("FashionReturnDocument_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.FashionReturnDocument).WithMany(p => p.ReturnTrackings)
                .HasForeignKey(d => d.FashionReturnDocumentId)
                .HasConstraintName("FK_dbo.ReturnTrackings_dbo.FashionReturnDocuments_FashionReturnDocument_Id");

            entity.HasOne(d => d.ReturnState).WithMany(p => p.ReturnTrackings)
                .HasForeignKey(d => d.ReturnStateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ReturnTrackings_dbo.ReturnStates_ReturnStateId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ReturnTrackings)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ReturnTrackings_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<RoadAppointment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.RoadAppointments");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(90);

            entity.HasIndex(e => e.ShopId, "IX_ShopId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.RoadAppointment)
                .HasForeignKey<RoadAppointment>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.RoadAppointments_dbo.Appointments_Id");

            entity.HasOne(d => d.Shop).WithMany(p => p.RoadAppointments)
                .HasForeignKey(d => d.ShopId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.RoadAppointments_dbo.Shops_ShopId");
        });

        modelBuilder.Entity<RoadAppointmentProductLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.RoadAppointmentProductLines");

            entity.HasIndex(e => e.ProductLineId, "IX_ProductLineId").HasFillFactor(90);

            entity.HasIndex(e => e.RoadAppointmentId, "IX_RoadAppointment_Id").HasFillFactor(90);

            entity.HasIndex(e => e.SalesPeriodId, "IX_SalesPeriodId").HasFillFactor(90);

            entity.HasIndex(e => e.ShowroomAppointmentId, "IX_ShowroomAppointmentId").HasFillFactor(90);

            entity.HasIndex(e => e.ShowroomAppointmentSalesConditionSellOutId, "IX_ShowroomAppointmentSalesConditionSellOutId").HasFillFactor(90);

            entity.HasIndex(e => e.ShowroomAppointmentSalesConditionSellOutReasonId, "IX_ShowroomAppointmentSalesConditionSellOutReasonId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.RoadAppointmentId).HasColumnName("RoadAppointment_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ProductLine).WithMany(p => p.RoadAppointmentProductLines)
                .HasForeignKey(d => d.ProductLineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.RoadAppointmentProductLines_dbo.ProductLines_ProductLineId");

            entity.HasOne(d => d.RoadAppointment).WithMany(p => p.RoadAppointmentProductLines)
                .HasForeignKey(d => d.RoadAppointmentId)
                .HasConstraintName("FK_dbo.RoadAppointmentProductLines_dbo.RoadAppointments_RoadAppointment_Id");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.RoadAppointmentProductLines)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.RoadAppointmentProductLines_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.ShowroomAppointment).WithMany(p => p.RoadAppointmentProductLines)
                .HasForeignKey(d => d.ShowroomAppointmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.RoadAppointmentProductLines_dbo.ShowroomAppointments_ShowroomAppointmentId");

            entity.HasOne(d => d.ShowroomAppointmentSalesConditionSellOut).WithMany(p => p.RoadAppointmentProductLines)
                .HasForeignKey(d => d.ShowroomAppointmentSalesConditionSellOutId)
                .HasConstraintName("FK_dbo.RoadAppointmentProductLines_dbo.ShowroomAppointmentSalesConditionSellOuts_ShowroomAppointmentSalesConditionSellOutId");

            entity.HasOne(d => d.ShowroomAppointmentSalesConditionSellOutReason).WithMany(p => p.RoadAppointmentProductLines)
                .HasForeignKey(d => d.ShowroomAppointmentSalesConditionSellOutReasonId)
                .HasConstraintName("FK_dbo.RoadAppointmentProductLines_dbo.ShowroomAppointmentSalesConditionReasons_ShowroomAppointmentSalesConditionSellOutReasonId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.RoadAppointmentProductLines)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.RoadAppointmentProductLines_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Roles");
        });

        modelBuilder.Entity<Rule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Rules");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Rules)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Rules_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SalesCondition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SalesConditions");

            entity.HasIndex(e => e.AgentId, "IX_AgentId").HasFillFactor(95);

            entity.HasIndex(e => e.CaresponsibleId, "IX_CAResponsibleId").HasFillFactor(90);

            entity.HasIndex(e => new { e.ProductLineDeliveryId, e.ProductSalesPeriodId }, "IX_ProductLineDelivery_ProductSalesPeriod")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.SalesConditionPeriodId, "IX_SalesConditionPeriodId").HasFillFactor(90);

            entity.HasIndex(e => e.SalesConditionTypeId, "IX_SalesConditionTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.SupplierId, "IX_SupplierId").HasFillFactor(90);

            entity.HasIndex(e => new { e.AccountingCodeId, e.ProductSalesPeriodId }, "Missing_IXNC_SalesConditions_AccountingCodeId_ProductSalesPeriodId_FBD65");

            entity.HasIndex(e => new { e.ProductSalesPeriodId, e.SwapStartDate, e.SwapEndDate }, "Missing_IXNC_SalesConditions_ProductSalesPeriodId_SwapStartDate_SwapEndDate_F1E2D").HasFillFactor(90);

            entity.HasIndex(e => e.SupplierId, "Missing_IXNC_SalesConditions_SupplierId_00F09").HasFillFactor(90);

            entity.HasIndex(e => e.SupplierId, "Missing_IXNC_SalesConditions_SupplierId_CADC8").HasFillFactor(90);

            entity.HasIndex(e => new { e.SupplierId, e.ProductSalesPeriodId }, "Missing_IXNC_SalesConditions_SupplierId_ProductSalesPeriodId_92F2A").HasFillFactor(90);

            entity.Property(e => e.ArrivalDate).HasColumnType("datetime");
            entity.Property(e => e.CaresponsibleId).HasColumnName("CAResponsibleId");
            entity.Property(e => e.ClosingDate).HasColumnType("datetime");
            entity.Property(e => e.CollectionSaleStockMarkup).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DeliveryPercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DepartureDate).HasColumnType("datetime");
            entity.Property(e => e.FinalClosingDate).HasColumnType("datetime");
            entity.Property(e => e.MarginPercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Markup).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.MinimumOrderAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.PurchasePercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SamplePercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.ShowOnB2c).HasColumnName("ShowOnB2C");
            entity.Property(e => e.SwapCompensationPercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SwapEndDate).HasColumnType("datetime");
            entity.Property(e => e.SwapStartDate).HasColumnType("datetime");
            entity.Property(e => e.TargetAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.WebshopDiscount).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.AccountingCode).WithMany(p => p.SalesConditions)
                .HasForeignKey(d => d.AccountingCodeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditions_dbo.AccountingCodes_AccountingCodeId");

            entity.HasOne(d => d.Agent).WithMany(p => p.SalesConditions)
                .HasForeignKey(d => d.AgentId)
                .HasConstraintName("FK_dbo.SalesConditions_dbo.Suppliers_AgentId");

            entity.HasOne(d => d.Caresponsible).WithMany(p => p.SalesConditionCaresponsibles)
                .HasForeignKey(d => d.CaresponsibleId)
                .HasConstraintName("FK_dbo.SalesConditions_dbo.Employees_CAResponsibleId");

            entity.HasOne(d => d.CustomerServiceResponsible).WithMany(p => p.SalesConditionCustomerServiceResponsibles)
                .HasForeignKey(d => d.CustomerServiceResponsibleId)
                .HasConstraintName("FK_dbo.SalesConditions_dbo.Employees_CustomerServiceResponsibleId");

            entity.HasOne(d => d.Department).WithMany(p => p.SalesConditions)
                .HasForeignKey(d => d.DepartmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditions_dbo.Departments_DepartmentId");

            entity.HasOne(d => d.DocumentFlow).WithMany(p => p.SalesConditions)
                .HasForeignKey(d => d.DocumentFlowId)
                .HasConstraintName("FK_dbo.SalesConditions_dbo.DocumentFlows_DocumentFlowId");

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.SalesConditions)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditions_dbo.ProductLineDeliveries_ProductLineDeliveryId");

            entity.HasOne(d => d.ProductMatrix).WithMany(p => p.SalesConditions)
                .HasForeignKey(d => d.ProductMatrixId)
                .HasConstraintName("FK_dbo.SalesConditions_dbo.ProductMatrices_ProductMatrixId");

            entity.HasOne(d => d.ProductSalesPeriod).WithMany(p => p.SalesConditionProductSalesPeriods)
                .HasForeignKey(d => d.ProductSalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditions_dbo.SalesPeriods_ProductSalesPeriodId");

            entity.HasOne(d => d.SalesConditionGroup).WithMany(p => p.SalesConditions)
                .HasForeignKey(d => d.SalesConditionGroupId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditions_dbo.SalesConditionGroups_SalesConditionGroupId");

            entity.HasOne(d => d.SalesConditionPeriod).WithMany(p => p.SalesConditions)
                .HasForeignKey(d => d.SalesConditionPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditions_dbo.SalesConditionPeriods_SalesConditionPeriodId");

            entity.HasOne(d => d.SalesConditionType).WithMany(p => p.SalesConditions)
                .HasForeignKey(d => d.SalesConditionTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditions_dbo.SalesConditionTypes_SalesConditionTypeId");

            entity.HasOne(d => d.SampleDestination).WithMany(p => p.SalesConditions)
                .HasForeignKey(d => d.SampleDestinationId)
                .HasConstraintName("FK_dbo.SalesConditions_dbo.SampleDestinations_SampleDestinationId");

            entity.HasOne(d => d.SampleSalesPeriod).WithMany(p => p.SalesConditionSampleSalesPeriods)
                .HasForeignKey(d => d.SampleSalesPeriodId)
                .HasConstraintName("FK_dbo.SalesConditions_dbo.SalesPeriods_SampleSalesPeriodId");

            entity.HasOne(d => d.ShowroomSalesPeriod).WithMany(p => p.SalesConditionShowroomSalesPeriods)
                .HasForeignKey(d => d.ShowroomSalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditions_dbo.SalesPeriods_ShowroomSalesPeriodId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.SalesConditions)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditions_dbo.Suppliers_SupplierId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SalesConditions)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditions_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SalesConditionDiscount>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SalesConditionDiscounts");

            entity.HasIndex(e => e.SalesConditionId, "IX_SalesConditionId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DiscountPercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.StartDate).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.SalesCondition).WithMany(p => p.SalesConditionDiscounts)
                .HasForeignKey(d => d.SalesConditionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditionDiscounts_dbo.SalesConditions_SalesConditionId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SalesConditionDiscounts)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditionDiscounts_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SalesConditionDiscountExcludedProduct>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SalesConditionDiscountExcludedProducts");

            entity.HasIndex(e => e.ProductId, "IX_ProductId").HasFillFactor(90);

            entity.HasIndex(e => e.SalesConditionDiscountId, "IX_SalesConditionDiscountId").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Product).WithMany(p => p.SalesConditionDiscountExcludedProducts)
                .HasForeignKey(d => d.ProductId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditionDiscountExcludedProducts_dbo.Products_ProductId");

            entity.HasOne(d => d.SalesConditionDiscount).WithMany(p => p.SalesConditionDiscountExcludedProducts)
                .HasForeignKey(d => d.SalesConditionDiscountId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditionDiscountExcludedProducts_dbo.SalesConditionDiscounts_SalesConditionDiscountId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SalesConditionDiscountExcludedProducts)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditionDiscountExcludedProducts_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SalesConditionEmployee>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SalesConditionEmployees");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Employee).WithMany(p => p.SalesConditionEmployees)
                .HasForeignKey(d => d.EmployeeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditionEmployees_dbo.Employees_EmployeeId");

            entity.HasOne(d => d.SalesCondition).WithMany(p => p.SalesConditionEmployees)
                .HasForeignKey(d => d.SalesConditionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditionEmployees_dbo.SalesConditions_SalesConditionId");

            entity.HasOne(d => d.Showroom).WithMany(p => p.SalesConditionEmployees)
                .HasForeignKey(d => d.ShowroomId)
                .HasConstraintName("FK_dbo.SalesConditionEmployees_dbo.Showrooms_ShowroomId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SalesConditionEmployees)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditionEmployees_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SalesConditionGroup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SalesConditionGroups");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SalesConditionGroups)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditionGroups_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SalesConditionPeriod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SalesConditionPeriods");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SalesConditionPeriods)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditionPeriods_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SalesConditionPlanning>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SalesConditionPlannings");

            entity.HasIndex(e => e.SalesConditionId, "IX_SalesConditionId").HasFillFactor(90);

            entity.HasIndex(e => new { e.SalesConditionId, e.Id }, "IX_SalesConditionPlannings_SalesConditionId").HasFillFactor(90);

            entity.Property(e => e.AcceptDeliveryUntilDate).HasColumnType("datetime");
            entity.Property(e => e.AppointmentStartDate).HasColumnType("datetime");
            entity.Property(e => e.AppointmentStopDate).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DeliveryStartDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryStopDate).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.SalesCondition).WithMany(p => p.SalesConditionPlannings)
                .HasForeignKey(d => d.SalesConditionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditionPlannings_dbo.SalesConditions_SalesConditionId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SalesConditionPlannings)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditionPlannings_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SalesConditionShowroom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SalesConditionShowrooms");

            entity.HasIndex(e => e.SalesConditionPlanningId, "IX_SalesConditionPlanningId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.SalesConditionPlanning).WithMany(p => p.SalesConditionShowrooms)
                .HasForeignKey(d => d.SalesConditionPlanningId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditionShowrooms_dbo.SalesConditionPlannings_SalesConditionPlanningId");

            entity.HasOne(d => d.Showroom).WithMany(p => p.SalesConditionShowrooms)
                .HasForeignKey(d => d.ShowroomId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditionShowrooms_dbo.Showrooms_ShowroomId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SalesConditionShowrooms)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditionShowrooms_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SalesConditionType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SalesConditionTypes");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SalesConditionTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesConditionTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SalesPeriod>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SalesPeriods");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.ShortCode, "IX_ShortCode")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.HasIndex(e => e.InflationPercentage, "IX_dbo_SalesPeriods_InflationPercentage").HasFillFactor(90);

            entity.Property(e => e.BeginDate).HasColumnType("datetime");
            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DeliveryBeginDate).HasColumnType("datetime");
            entity.Property(e => e.DeliveryEndDate).HasColumnType("datetime");
            entity.Property(e => e.EndDate).HasColumnType("datetime");
            entity.Property(e => e.LendingPeriodEndDate).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.ShortCode)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.TransportCost).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TransportCostLimit).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.SalesPeriodType).WithMany(p => p.SalesPeriods)
                .HasForeignKey(d => d.SalesPeriodTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesPeriods_dbo.SalesPeriodTypes_SalesPeriodTypeId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SalesPeriods)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesPeriods_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SalesPeriodCurrencyCourse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SalesPeriodCurrencyCourses");

            entity.HasIndex(e => e.CurrencyId, "IX_CurrencyId");

            entity.HasIndex(e => e.SalesPeriodId, "IX_SalesPeriodId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.Course).HasColumnType("decimal(18, 4)");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Currency).WithMany(p => p.SalesPeriodCurrencyCourses)
                .HasForeignKey(d => d.CurrencyId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesPeriodCurrencyCourses_dbo.Currencies_CurrencyId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.SalesPeriodCurrencyCourses)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesPeriodCurrencyCourses_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SalesPeriodCurrencyCourses)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesPeriodCurrencyCourses_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SalesPeriodType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SalesPeriodTypes");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.MainAcceptDeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.MainDeliveryStartDate).HasColumnType("datetime");
            entity.Property(e => e.MainDeliveryStopDate).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.PreAcceptDeliveryDate).HasColumnType("datetime");
            entity.Property(e => e.PreDeliveryStartDate).HasColumnType("datetime");
            entity.Property(e => e.PreDeliveryStopDate).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SalesPeriodTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SalesPeriodTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SampleDestination>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SampleDestinations");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SampleDestinations)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SampleDestinations_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SegmentType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SegmentTypes");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SegmentTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SegmentTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Shop>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Shops");

            entity.HasIndex(e => e.ContactId, "IX_ContactId").HasFillFactor(90);

            entity.HasIndex(e => e.ShopTypeId, "IX_ShopTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.SpancoId, "IX_SpancoId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.OpeningDate).HasColumnType("datetime");
            entity.Property(e => e.SearchName).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Contact).WithMany(p => p.Shops)
                .HasForeignKey(d => d.ContactId)
                .HasConstraintName("FK_dbo.Shops_dbo.Contacts_ContactId");

            entity.HasOne(d => d.ShopType).WithMany(p => p.Shops)
                .HasForeignKey(d => d.ShopTypeId)
                .HasConstraintName("FK_dbo.Shops_dbo.ShopTypes_ShopTypeId");

            entity.HasOne(d => d.Spanco).WithMany(p => p.Shops)
                .HasForeignKey(d => d.SpancoId)
                .HasConstraintName("FK_dbo.Shops_dbo.Spancos_SpancoId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Shops)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Shops_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShopAgeCategory>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShopAgeCategories");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ShopId).HasColumnName("Shop_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.AgeCategory).WithMany(p => p.ShopAgeCategories)
                .HasForeignKey(d => d.AgeCategoryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopAgeCategories_dbo.AgeCategories_AgeCategoryId");

            entity.HasOne(d => d.Shop).WithMany(p => p.ShopAgeCategories)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("FK_dbo.ShopAgeCategories_dbo.Shops_Shop_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShopAgeCategories)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopAgeCategories_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShopAvailability>(entity =>
        {
            entity.HasKey(e => new { e.AvailabilityTypeId, e.AvailabilityDayId, e.ShopId }).HasName("PK_dbo.ShopAvailabilities");

            entity.HasOne(d => d.AvailabilityDay).WithMany(p => p.ShopAvailabilities)
                .HasForeignKey(d => d.AvailabilityDayId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopAvailabilities_dbo.AvailabilityDays_AvailabilityDayId");

            entity.HasOne(d => d.AvailabilityType).WithMany(p => p.ShopAvailabilities)
                .HasForeignKey(d => d.AvailabilityTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopAvailabilities_dbo.AvailabilityTypes_AvailabilityTypeId");

            entity.HasOne(d => d.Shop).WithMany(p => p.ShopAvailabilities)
                .HasForeignKey(d => d.ShopId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopAvailabilities_dbo.Shops_ShopId");
        });

        modelBuilder.Entity<ShopCommercialLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShopCommercialLocations");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ShopId).HasColumnName("Shop_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.CommercialLocation).WithMany(p => p.ShopCommercialLocations)
                .HasForeignKey(d => d.CommercialLocationId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopCommercialLocations_dbo.CommercialLocations_CommercialLocationId");

            entity.HasOne(d => d.Shop).WithMany(p => p.ShopCommercialLocations)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("FK_dbo.ShopCommercialLocations_dbo.Shops_Shop_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShopCommercialLocations)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopCommercialLocations_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShopCompetitorBrand>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShopCompetitorBrands");

            entity.HasIndex(e => e.CompetitorBrandId, "IX_CompetitorBrandId");

            entity.HasIndex(e => e.ShopId, "IX_Shop_Id");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ShopId).HasColumnName("Shop_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.CompetitorBrand).WithMany(p => p.ShopCompetitorBrands)
                .HasForeignKey(d => d.CompetitorBrandId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopCompetitorBrands_dbo.CompetitorBrands_CompetitorBrandId");

            entity.HasOne(d => d.Shop).WithMany(p => p.ShopCompetitorBrands)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("FK_dbo.ShopCompetitorBrands_dbo.Shops_Shop_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShopCompetitorBrands)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopCompetitorBrands_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShopCompetitorProductLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShopCompetitorProductLines");

            entity.HasIndex(e => e.ShopId, "IX_Shop_Id").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ShopId).HasColumnName("Shop_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ProductLine).WithMany(p => p.ShopCompetitorProductLines)
                .HasForeignKey(d => d.ProductLineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopCompetitorProductLines_dbo.ProductLines_ProductLineId");

            entity.HasOne(d => d.Shop).WithMany(p => p.ShopCompetitorProductLines)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("FK_dbo.ShopCompetitorProductLines_dbo.Shops_Shop_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShopCompetitorProductLines)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopCompetitorProductLines_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShopContact>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShopContacts");

            entity.HasIndex(e => e.ShopId, "IX_Shop_Id").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ShopId).HasColumnName("Shop_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Contact).WithMany(p => p.ShopContacts)
                .HasForeignKey(d => d.ContactId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopContacts_dbo.Contacts_ContactId");

            entity.HasOne(d => d.ContactType).WithMany(p => p.ShopContacts)
                .HasForeignKey(d => d.ContactTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopContacts_dbo.ContactTypes_ContactTypeId");

            entity.HasOne(d => d.Shop).WithMany(p => p.ShopContacts)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("FK_dbo.ShopContacts_dbo.Shops_Shop_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShopContacts)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopContacts_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShopDelivery>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShopDeliveries");

            entity.ToTable(tb => tb.HasTrigger("trgShopDeliveryForUpdate"));

            entity.HasIndex(e => e.ProductLineDeliveryId, "IX_ProductLineDeliveryId").HasFillFactor(90);

            entity.HasIndex(e => e.ShopDeliveryReferenceId, "IX_ShopDeliveryReferenceId").HasFillFactor(90);

            entity.HasIndex(e => e.ShopDeliveryStateId, "IX_ShopDeliveryStateId").HasFillFactor(90);

            entity.HasIndex(e => e.ShowroomId, "IX_ShowroomId").HasFillFactor(95);

            entity.HasIndex(e => new { e.SalesPeriodId, e.ShopId, e.ProductLineDeliveryId, e.ShopDeliveryStateId, e.ShopDeliveryTypeId, e.Id }, "IX_dbo_ShopDeliveries_covering").HasFillFactor(90);

            entity.HasIndex(e => new { e.ProductLineDeliveryId, e.SalesPeriodId }, "Missing_IXNC_ShopDeliveries_ProductLineDeliveryId_SalesPeriodId_560DE").HasFillFactor(90);

            entity.HasIndex(e => new { e.ProductLineDeliveryId, e.SalesPeriodId, e.BonusBudget }, "Missing_IXNC_ShopDeliveries_ProductLineDeliveryId_SalesPeriodId_BonusBudget_287F6").HasFillFactor(90);

            entity.HasIndex(e => new { e.ProductLineDeliveryId, e.SalesPeriodId, e.BonusBudget }, "Missing_IXNC_ShopDeliveries_ProductLineDeliveryId_SalesPeriodId_BonusBudget_7A816").HasFillFactor(90);

            entity.HasIndex(e => new { e.ProductLineDeliveryId, e.SalesPeriodId }, "Missing_IXNC_ShopDeliveries_ProductLineDeliveryId_SalesPeriodId_CEFF9").HasFillFactor(90);

            entity.HasIndex(e => new { e.ProductLineDeliveryId, e.SalesPeriodId }, "Missing_IXNC_ShopDeliveries_ProductLineDeliveryId_SalesPeriodId_D7830").HasFillFactor(90);

            entity.HasIndex(e => new { e.ProductLineDeliveryId, e.SalesPeriodId }, "Missing_IXNC_ShopDeliveries_ProductLineDeliveryId_SalesPeriodId_DF56C").HasFillFactor(90);

            entity.HasIndex(e => new { e.ProductLineDeliveryId, e.SalesPeriodId, e.IgnoreBonusBudget }, "Missing_IXNC_ShopDeliveries_ProductLineDeliveryId_SalesPeriodId_IgnoreBonusBudget_9A6C4").HasFillFactor(90);

            entity.HasIndex(e => new { e.ProductLineDeliveryId, e.SalesPeriodId, e.IgnoreBonusBudget }, "Missing_IXNC_ShopDeliveries_ProductLineDeliveryId_SalesPeriodId_IgnoreBonusBudget_C7B56").HasFillFactor(90);

            entity.HasIndex(e => new { e.ProductLineDeliveryId, e.SalesPeriodId, e.IgnoreBonusBudget, e.ShopDeliveryReferenceId }, "Missing_IXNC_ShopDeliveries_ProductLineDeliveryId_SalesPeriodId_IgnoreBonusBudget_ShopDeliveryReferenceId_544C0").HasFillFactor(90);

            entity.HasIndex(e => new { e.ProductLineDeliveryId, e.SalesPeriodId, e.ShopDeliveryStateId }, "Missing_IXNC_ShopDeliveries_ProductLineDeliveryId_SalesPeriodId_ShopDeliveryStateId_DF953").HasFillFactor(90);

            entity.HasIndex(e => new { e.ProductLineDeliveryId, e.SalesPeriodId, e.ShopDeliveryStateId, e.ShopId }, "Missing_IXNC_ShopDeliveries_ProductLineDeliveryId_SalesPeriodId_ShopDeliveryStateId_ShopId_CEE40").HasFillFactor(90);

            entity.HasIndex(e => new { e.ProductLineDeliveryId, e.SalesPeriodId, e.ShopId }, "Missing_IXNC_ShopDeliveries_ProductLineDeliveryId_SalesPeriodId_ShopId_6261E").HasFillFactor(90);

            entity.HasIndex(e => new { e.SalesPeriodId, e.ProductLineDeliveryId, e.OrderAmount }, "Missing_IXNC_ShopDeliveries_SalesPeriodId_ProductLineDeliveryId_OrderAmount_100F7").HasFillFactor(90);

            entity.HasIndex(e => new { e.ShopDeliveryReferenceId, e.ProductLineDeliveryId, e.SalesPeriodId }, "Missing_IXNC_ShopDeliveries_ShopDeliveryReferenceId_ProductLineDeliveryId_SalesPeriodId_4D1F0").HasFillFactor(90);

            entity.HasIndex(e => new { e.ShopDeliveryReferenceId, e.SalesPeriodId }, "Missing_IXNC_ShopDeliveries_ShopDeliveryReferenceId_SalesPeriodId_6F78B").HasFillFactor(90);

            entity.HasIndex(e => e.ShopId, "Missing_IXNC_ShopDeliveries_ShopId_306A0").HasFillFactor(90);

            entity.HasIndex(e => e.ShopId, "Missing_IXNC_ShopDeliveries_ShopId_3EB0D");

            entity.HasIndex(e => new { e.ShopId, e.ProductLineDeliveryId, e.SalesPeriodId }, "Missing_IXNC_ShopDeliveries_ShopId_ProductLineDeliveryId_SalesPeriodId_545FA").HasFillFactor(90);

            entity.HasIndex(e => new { e.ShopId, e.ProductLineDeliveryId, e.SalesPeriodId }, "Missing_IXNC_ShopDeliveries_ShopId_ProductLineDeliveryId_SalesPeriodId_7E2A6").HasFillFactor(90);

            entity.HasIndex(e => new { e.ShopId, e.ProductLineDeliveryId, e.SalesPeriodId, e.Id }, "Missing_IXNC_ShopDeliveries_ShopId_ProductLineDeliveryId_SalesPeriodId_Id_B6A09").HasFillFactor(90);

            entity.Property(e => e.BudgetAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.MarginPercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.OrderAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Country).WithMany(p => p.ShopDeliveries)
                .HasForeignKey(d => d.CountryId)
                .HasConstraintName("FK_dbo.ShopDeliveries_dbo.Countries_CountryId");

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.ShopDeliveries)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopDeliveries_dbo.ProductLineDeliveries_ProductLineDeliveryId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.ShopDeliveries)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopDeliveries_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.ShopDeliveryOrigin).WithMany(p => p.ShopDeliveries)
                .HasForeignKey(d => d.ShopDeliveryOriginId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopDeliveries_dbo.ShopDeliveryOrigins_ShopDeliveryOriginId");

            entity.HasOne(d => d.ShopDeliveryReference).WithMany(p => p.InverseShopDeliveryReference)
                .HasForeignKey(d => d.ShopDeliveryReferenceId)
                .HasConstraintName("FK_dbo.ShopDeliveries_dbo.ShopDeliveries_ShopDeliveryReferenceId");

            entity.HasOne(d => d.ShopDeliveryState).WithMany(p => p.ShopDeliveries)
                .HasForeignKey(d => d.ShopDeliveryStateId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopDeliveries_dbo.ShopDeliveryStates_ShopDeliveryStateId");

            entity.HasOne(d => d.ShopDeliveryType).WithMany(p => p.ShopDeliveries)
                .HasForeignKey(d => d.ShopDeliveryTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopDeliveries_dbo.ShopDeliveryTypes_ShopDeliveryTypeId");

            entity.HasOne(d => d.Shop).WithMany(p => p.ShopDeliveries)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("FK_dbo.ShopDeliveries_dbo.Shops_ShopId");

            entity.HasOne(d => d.Showroom).WithMany(p => p.ShopDeliveries)
                .HasForeignKey(d => d.ShowroomId)
                .HasConstraintName("FK_dbo.ShopDeliveries_dbo.Showrooms_ShowroomId");

            entity.HasOne(d => d.StockLocation).WithMany(p => p.ShopDeliveries)
                .HasForeignKey(d => d.StockLocationId)
                .HasConstraintName("FK_dbo.ShopDeliveries_dbo.StockLocations_StockLocationId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShopDeliveries)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopDeliveries_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShopDeliveryOrigin>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShopDeliveryOrigins");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShopDeliveryOrigins)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopDeliveryOrigins_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShopDeliveryState>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShopDeliveryStates");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShopDeliveryStates)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopDeliveryStates_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShopDeliveryType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShopDeliveryTypes");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(15);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShopDeliveryTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopDeliveryTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShopGender>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShopGenders");

            entity.HasIndex(e => e.GenderId, "IX_GenderId").HasFillFactor(90);

            entity.HasIndex(e => e.ShopId, "IX_Shop_Id").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ShopId).HasColumnName("Shop_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Gender).WithMany(p => p.ShopGenders)
                .HasForeignKey(d => d.GenderId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopGenders_dbo.Genders_GenderId");

            entity.HasOne(d => d.Shop).WithMany(p => p.ShopGenders)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("FK_dbo.ShopGenders_dbo.Shops_Shop_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShopGenders)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopGenders_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShopLine>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShopLines");

            entity.HasIndex(e => e.LineId, "IX_LineId").HasFillFactor(90);

            entity.HasIndex(e => e.ShopId, "IX_Shop_Id").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ShopId).HasColumnName("Shop_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Line).WithMany(p => p.ShopLines)
                .HasForeignKey(d => d.LineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopLines_dbo.Lines_LineId");

            entity.HasOne(d => d.Shop).WithMany(p => p.ShopLines)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("FK_dbo.ShopLines_dbo.Shops_Shop_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShopLines)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopLines_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShopPicture>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShopPictures");

            entity.HasIndex(e => e.ShopId, "IX_Shop_Id").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ShopId).HasColumnName("Shop_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Picture).WithMany(p => p.ShopPictures)
                .HasForeignKey(d => d.PictureId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopPictures_dbo.Pictures_PictureId");

            entity.HasOne(d => d.Shop).WithMany(p => p.ShopPictures)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("FK_dbo.ShopPictures_dbo.Shops_Shop_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShopPictures)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopPictures_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShopSegmentType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShopSegmentTypes");

            entity.HasIndex(e => e.SegmentTypeId, "IX_SegmentTypeId").HasFillFactor(90);

            entity.HasIndex(e => e.ShopId, "IX_Shop_Id").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ShopId).HasColumnName("Shop_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.SegmentType).WithMany(p => p.ShopSegmentTypes)
                .HasForeignKey(d => d.SegmentTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopSegmentTypes_dbo.SegmentTypes_SegmentTypeId");

            entity.HasOne(d => d.Shop).WithMany(p => p.ShopSegmentTypes)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("FK_dbo.ShopSegmentTypes_dbo.Shops_Shop_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShopSegmentTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopSegmentTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShopSupplierCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShopSupplierCodes");

            entity.HasIndex(e => e.ShopId, "IX_Shop_Id").HasFillFactor(90);

            entity.HasIndex(e => e.SupplierId, "IX_SupplierId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.ShopId).HasColumnName("Shop_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Shop).WithMany(p => p.ShopSupplierCodes)
                .HasForeignKey(d => d.ShopId)
                .HasConstraintName("FK_dbo.ShopSupplierCodes_dbo.Shops_Shop_Id");

            entity.HasOne(d => d.Supplier).WithMany(p => p.ShopSupplierCodes)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopSupplierCodes_dbo.Suppliers_SupplierId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShopSupplierCodes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopSupplierCodes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShopType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShopTypes");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShopTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShopVisit>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShopVisits");

            entity.HasIndex(e => e.ShopId, "IX_ShopId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Shop).WithMany(p => p.ShopVisits)
                .HasForeignKey(d => d.ShopId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopVisits_dbo.Shops_ShopId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShopVisits)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopVisits_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShopifyFashionProductColor>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShopifyFashionProductColors");

            entity.HasIndex(e => e.FashionProductColorId, "IX_FashionProductColorId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.FarfetchScrapeDate).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.FashionProductColor).WithMany(p => p.ShopifyFashionProductColors)
                .HasForeignKey(d => d.FashionProductColorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopifyFashionProductColors_dbo.FashionProductColors_FashionProductColorId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShopifyFashionProductColors)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopifyFashionProductColors_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShopifyProcessedOrder>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShopifyProcessedOrders");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShopifyProcessedOrders)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShopifyProcessedOrders_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Showroom>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Showrooms");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(20);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Surface).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Contact).WithMany(p => p.Showrooms)
                .HasForeignKey(d => d.ContactId)
                .HasConstraintName("FK_dbo.Showrooms_dbo.Contacts_ContactId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Showrooms)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Showrooms_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShowroomAppointment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShowroomAppointments");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(90);

            entity.HasIndex(e => e.ShowroomId, "IX_ShowroomId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.SchedaEnteredDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ShowroomAppointment)
                .HasForeignKey<ShowroomAppointment>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShowroomAppointments_dbo.Appointments_Id");

            entity.HasOne(d => d.Showroom).WithMany(p => p.ShowroomAppointments)
                .HasForeignKey(d => d.ShowroomId)
                .HasConstraintName("FK_dbo.ShowroomAppointments_dbo.Showrooms_ShowroomId");
        });

        modelBuilder.Entity<ShowroomAppointmentSalesCondition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShowroomAppointmentSalesConditions");

            entity.HasIndex(e => e.SalesConditionId, "IX_SalesConditionId").HasFillFactor(90);

            entity.HasIndex(e => e.ShowroomAppointmentId, "IX_ShowroomAppointmentId").HasFillFactor(90);

            entity.HasIndex(e => e.ShowroomAppointmentId, "IX_dbo__ShowroomAppointmentSalesCondition").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ContractState).WithMany(p => p.ShowroomAppointmentSalesConditionContractStates)
                .HasForeignKey(d => d.ContractStateId)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditions_dbo.ContractStates_ContractStateId");

            entity.HasOne(d => d.SalesCondition).WithMany(p => p.ShowroomAppointmentSalesConditions)
                .HasForeignKey(d => d.SalesConditionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditions_dbo.SalesConditions_SalesConditionId");

            entity.HasOne(d => d.ShowroomAppointment).WithMany(p => p.ShowroomAppointmentSalesConditions)
                .HasForeignKey(d => d.ShowroomAppointmentId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditions_dbo.ShowroomAppointments_ShowroomAppointmentId");

            entity.HasOne(d => d.ShowroomAppointmentSalesConditionReason).WithMany(p => p.ShowroomAppointmentSalesConditionShowroomAppointmentSalesConditionReasons)
                .HasForeignKey(d => d.ShowroomAppointmentSalesConditionReasonId)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditions_dbo.ShowroomAppointmentSalesConditionReasons_ShowroomAppointmentSalesConditionReasonId");

            entity.HasOne(d => d.ShowroomAppointmentSalesConditionResponse).WithMany(p => p.ShowroomAppointmentSalesConditions)
                .HasForeignKey(d => d.ShowroomAppointmentSalesConditionResponseId)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditions_dbo.ShowroomAppointmentSalesConditionResponses_ShowroomAppointmentSalesConditionRespon");

            entity.HasOne(d => d.ShowroomAppointmentSalesConditionSellOut).WithMany(p => p.ShowroomAppointmentSalesConditions)
                .HasForeignKey(d => d.ShowroomAppointmentSalesConditionSellOutId)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditions_dbo.ShowroomAppointmentSalesConditionSellOuts_ShowroomAppointmentSalesConditionSellOut");

            entity.HasOne(d => d.ShowroomAppointmentSalesConditionSellOutReason).WithMany(p => p.ShowroomAppointmentSalesConditionShowroomAppointmentSalesConditionSellOutReasons)
                .HasForeignKey(d => d.ShowroomAppointmentSalesConditionSellOutReasonId)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditions_dbo.ShowroomAppointmentSalesConditionReasons_ShowroomAppointmentSalesConditionSellOutR");

            entity.HasOne(d => d.UpfrontPaymentContractState).WithMany(p => p.ShowroomAppointmentSalesConditionUpfrontPaymentContractStates)
                .HasForeignKey(d => d.UpfrontPaymentContractStateId)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditions_dbo.ContractStates_UpfrontPaymentContractStateId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShowroomAppointmentSalesConditions)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditions_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShowroomAppointmentSalesConditionReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShowroomAppointmentSalesConditionReasons");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShowroomAppointmentSalesConditionReasons)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditionReasons_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShowroomAppointmentSalesConditionResponse>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShowroomAppointmentSalesConditionResponses");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShowroomAppointmentSalesConditionResponses)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditionResponses_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShowroomAppointmentSalesConditionSellOut>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShowroomAppointmentSalesConditionSellOuts");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShowroomAppointmentSalesConditionSellOuts)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditionSellOuts_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShowroomAppointmentSalesConditionShop>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShowroomAppointmentSalesConditionShops");

            entity.HasIndex(e => e.ShowroomAppointmentSalesConditionId, "IX_ShowroomAppointmentSalesConditionId").HasFillFactor(95);

            entity.HasIndex(e => new { e.ShopId, e.ShowroomAppointmentSalesConditionId, e.ShowroomAppointmentSalesConditionShopActionId }, "IX_dbo_ShowroomAppointmentSalesConditio_covering").HasFillFactor(95);

            entity.HasIndex(e => e.ShowroomAppointmentSalesConditionShopActionId, "Missing_IXNC_ShowroomAppointmentSalesConditionShops_ShowroomAppointmentSalesConditionShopActionId_DFBBF").HasFillFactor(95);

            entity.HasIndex(e => e.ShowroomAppointmentSalesConditionShopActionId, "Missing_IXNC_ShowroomAppointmentSalesConditionShops_ShowroomAppointmentSalesConditionShopActionId_EE4D6").HasFillFactor(95);

            entity.HasIndex(e => new { e.ShowroomAppointmentSalesConditionShopActionId, e.IsUpdated, e.OrderAmount }, "Missing_IXNC_ShowroomAppointmentSalesConditionShops_ShowroomAppointmentSalesConditionShopActionId_IsUpdated_OrderAmount_D7E32").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.OrderAmount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Shop).WithMany(p => p.ShowroomAppointmentSalesConditionShops)
                .HasForeignKey(d => d.ShopId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditionShops_dbo.Shops_ShopId");

            entity.HasOne(d => d.ShowroomAppointmentSalesCondition).WithMany(p => p.ShowroomAppointmentSalesConditionShops)
                .HasForeignKey(d => d.ShowroomAppointmentSalesConditionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditionShops_dbo.ShowroomAppointmentSalesConditions_ShowroomAppointmentSalesConditionId");

            entity.HasOne(d => d.ShowroomAppointmentSalesConditionShopAction).WithMany(p => p.ShowroomAppointmentSalesConditionShops)
                .HasForeignKey(d => d.ShowroomAppointmentSalesConditionShopActionId)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditionShops_dbo.ShowroomAppointmentSalesConditionShopActions_ShowroomAppointmentSalesCondition");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShowroomAppointmentSalesConditionShops)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditionShops_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShowroomAppointmentSalesConditionShopAction>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShowroomAppointmentSalesConditionShopActions");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShowroomAppointmentSalesConditionShopActions)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditionShopActions_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShowroomAppointmentSalesConditionSigning>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShowroomAppointmentSalesConditionSignings");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ContractUnsignedReason).WithMany(p => p.ShowroomAppointmentSalesConditionSigningContractUnsignedReasons)
                .HasForeignKey(d => d.ContractUnsignedReasonId)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditionSignings_dbo.ShowroomAppointmentSalesConditionUnsignedReasons_ContractUnsignedReasonId");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.ShowroomAppointmentSalesConditionSigning)
                .HasForeignKey<ShowroomAppointmentSalesConditionSigning>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditionSignings_dbo.ShowroomAppointmentSalesConditions_Id");

            entity.HasOne(d => d.OrderUnsignedReason).WithMany(p => p.ShowroomAppointmentSalesConditionSigningOrderUnsignedReasons)
                .HasForeignKey(d => d.OrderUnsignedReasonId)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditionSignings_dbo.ShowroomAppointmentSalesConditionUnsignedReasons_OrderUnsignedReasonId");

            entity.HasOne(d => d.PrepaymentUnsignedReason).WithMany(p => p.ShowroomAppointmentSalesConditionSigningPrepaymentUnsignedReasons)
                .HasForeignKey(d => d.PrepaymentUnsignedReasonId)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditionSignings_dbo.ShowroomAppointmentSalesConditionUnsignedReasons_PrepaymentUnsignedReasonId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShowroomAppointmentSalesConditionSignings)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditionSignings_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ShowroomAppointmentSalesConditionUnsignedReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ShowroomAppointmentSalesConditionUnsignedReasons");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ShowroomAppointmentSalesConditionUnsignedReasons)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ShowroomAppointmentSalesConditionUnsignedReasons_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Size>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Sizes");

            entity.HasIndex(e => e.SizeScaleId, "IX_SizeScaleId").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.HasIndex(e => e.Order, "IX_dbo_Sizes_Order").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.SizeScale).WithMany(p => p.Sizes)
                .HasForeignKey(d => d.SizeScaleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Sizes_dbo.SizeScales_SizeScaleId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Sizes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Sizes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SizePack>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SizePacks");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.SizePacks)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SizePacks_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.SizePacks)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SizePacks_dbo.Suppliers_SupplierId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SizePacks)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SizePacks_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SizePackQuantity>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SizePackQuantities");

            entity.HasIndex(e => e.SizeId, "IX_SizeId").HasFillFactor(95);

            entity.HasIndex(e => e.SizePackId, "IX_SizePack_Id").HasFillFactor(95);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.HasIndex(e => e.Quantity, "IX_dbo_SizePackQuantities_Quantity").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.SizePackId).HasColumnName("SizePack_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Size).WithMany(p => p.SizePackQuantities)
                .HasForeignKey(d => d.SizeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SizePackQuantities_dbo.Sizes_SizeId");

            entity.HasOne(d => d.SizePack).WithMany(p => p.SizePackQuantities)
                .HasForeignKey(d => d.SizePackId)
                .HasConstraintName("FK_dbo.SizePackQuantities_dbo.SizePacks_SizePack_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SizePackQuantities)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SizePackQuantities_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SizeScale>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SizeScales");

            entity.HasIndex(e => e.SizeTypeId, "IX_SizeTypeId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.SizeType).WithMany(p => p.SizeScales)
                .HasForeignKey(d => d.SizeTypeId)
                .HasConstraintName("FK_dbo.SizeScales_dbo.SizeTypes_SizeTypeId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SizeScales)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SizeScales_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SizeType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SizeTypes");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SizeTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SizeTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Spanco>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Spancos");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Spancos)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Spancos_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<StockLocation>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.StockLocations");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.IsOb).HasColumnName("IsOB");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.ShowOnB2c).HasColumnName("ShowOnB2C");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Contact).WithMany(p => p.StockLocations)
                .HasForeignKey(d => d.ContactId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.StockLocations_dbo.Contacts_ContactId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.StockLocations)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.StockLocations_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Subselect>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("subselect");

            entity.HasIndex(e => e.Id, "CI_subselectID")
                .IsClustered()
                .HasFillFactor(90);

            entity.Property(e => e.Accountingcode)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("accountingcode");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("amount");
            entity.Property(e => e.Blockedtype)
                .HasMaxLength(500)
                .HasColumnName("blockedtype");
            entity.Property(e => e.Brand)
                .HasMaxLength(500)
                .HasColumnName("brand");
            entity.Property(e => e.Brandid).HasColumnName("brandid");
            entity.Property(e => e.City)
                .HasMaxLength(500)
                .HasColumnName("city");
            entity.Property(e => e.Country)
                .HasMaxLength(10)
                .HasColumnName("country");
            entity.Property(e => e.Customercodeid).HasColumnName("customercodeid");
            entity.Property(e => e.Customerid).HasColumnName("customerid");
            entity.Property(e => e.Customername)
                .HasMaxLength(500)
                .HasColumnName("customername");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("DATE");
            entity.Property(e => e.Deliverydate)
                .HasColumnType("datetime")
                .HasColumnName("deliverydate");
            entity.Property(e => e.Discount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("discount");
            entity.Property(e => e.Documentdeliverystate)
                .HasMaxLength(500)
                .HasColumnName("documentdeliverystate");
            entity.Property(e => e.Documentdeliverystateid).HasColumnName("documentdeliverystateid");
            entity.Property(e => e.Documentstate)
                .HasMaxLength(500)
                .HasColumnName("documentstate");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(500)
                .HasColumnName("documenttype");
            entity.Property(e => e.Documenttypeid).HasColumnName("documenttypeid");
            entity.Property(e => e.Fileimportlog)
                .HasMaxLength(250)
                .HasColumnName("fileimportlog");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Kvk)
                .HasMaxLength(25)
                .HasColumnName("kvk");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasColumnName("name");
            entity.Property(e => e.Paymentcondition)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("paymentcondition");
            entity.Property(e => e.Postalcode)
                .HasMaxLength(50)
                .HasColumnName("postalcode");
            entity.Property(e => e.Purchaseamount)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("purchaseamount");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.Rate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("rate");
            entity.Property(e => e.Restquantity).HasColumnName("restquantity");
            entity.Property(e => e.Salesperiod)
                .HasMaxLength(10)
                .HasColumnName("salesperiod");
            entity.Property(e => e.Salesperiodid).HasColumnName("salesperiodid");
            entity.Property(e => e.Supplier)
                .HasMaxLength(500)
                .HasColumnName("supplier");
            entity.Property(e => e.Transferedfromname)
                .HasMaxLength(500)
                .HasColumnName("transferedfromname");
            entity.Property(e => e.Transferquantity).HasColumnName("transferquantity");
            entity.Property(e => e.Upfrontpayment)
                .HasMaxLength(500)
                .HasColumnName("upfrontpayment");
            entity.Property(e => e.Vat)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("vat");
            entity.Property(e => e.Vatnr)
                .HasMaxLength(25)
                .HasColumnName("vatnr");
        });

        modelBuilder.Entity<Subselect2>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("subselect2");

            entity.Property(e => e.Accountingcode)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("accountingcode");
            entity.Property(e => e.Amount)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("amount");
            entity.Property(e => e.Blockedtype)
                .HasMaxLength(500)
                .HasColumnName("blockedtype");
            entity.Property(e => e.Brand)
                .HasMaxLength(500)
                .HasColumnName("brand");
            entity.Property(e => e.Brandid).HasColumnName("brandid");
            entity.Property(e => e.City)
                .HasMaxLength(500)
                .HasColumnName("city");
            entity.Property(e => e.Country)
                .HasMaxLength(10)
                .HasColumnName("country");
            entity.Property(e => e.Customercodeid).HasColumnName("customercodeid");
            entity.Property(e => e.Customerid).HasColumnName("customerid");
            entity.Property(e => e.Customername)
                .HasMaxLength(500)
                .HasColumnName("customername");
            entity.Property(e => e.Date)
                .HasColumnType("datetime")
                .HasColumnName("DATE");
            entity.Property(e => e.Deliverydate)
                .HasColumnType("datetime")
                .HasColumnName("deliverydate");
            entity.Property(e => e.Discount)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("discount");
            entity.Property(e => e.Documentdeliverystate)
                .HasMaxLength(500)
                .HasColumnName("documentdeliverystate");
            entity.Property(e => e.Documentdeliverystateid).HasColumnName("documentdeliverystateid");
            entity.Property(e => e.Documentstate)
                .HasMaxLength(500)
                .HasColumnName("documentstate");
            entity.Property(e => e.Documenttype)
                .HasMaxLength(500)
                .HasColumnName("documenttype");
            entity.Property(e => e.Documenttypeid).HasColumnName("documenttypeid");
            entity.Property(e => e.Fileimportlog)
                .HasMaxLength(250)
                .HasColumnName("fileimportlog");
            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Kvk)
                .HasMaxLength(25)
                .HasColumnName("kvk");
            entity.Property(e => e.Name)
                .HasMaxLength(500)
                .HasColumnName("name");
            entity.Property(e => e.Paymentcondition)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("paymentcondition");
            entity.Property(e => e.Postalcode)
                .HasMaxLength(50)
                .HasColumnName("postalcode");
            entity.Property(e => e.Purchaseamount)
                .HasColumnType("decimal(38, 2)")
                .HasColumnName("purchaseamount");
            entity.Property(e => e.Quantity).HasColumnName("quantity");
            entity.Property(e => e.Rate)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("rate");
            entity.Property(e => e.Restquantity).HasColumnName("restquantity");
            entity.Property(e => e.Salesperiod)
                .HasMaxLength(10)
                .HasColumnName("salesperiod");
            entity.Property(e => e.Salesperiodid).HasColumnName("salesperiodid");
            entity.Property(e => e.Supplier)
                .HasMaxLength(500)
                .HasColumnName("supplier");
            entity.Property(e => e.Transferedfromname)
                .HasMaxLength(500)
                .HasColumnName("transferedfromname");
            entity.Property(e => e.Transferquantity).HasColumnName("transferquantity");
            entity.Property(e => e.Upfrontpayment)
                .HasMaxLength(500)
                .HasColumnName("upfrontpayment");
            entity.Property(e => e.Vat)
                .IsRequired()
                .HasMaxLength(10)
                .HasColumnName("vat");
            entity.Property(e => e.Vatnr)
                .HasMaxLength(25)
                .HasColumnName("vatnr");
        });

        modelBuilder.Entity<Supplier>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Suppliers");

            entity.HasIndex(e => e.ReturnResponsibleId, "IX_ReturnResponsibleId").HasFillFactor(95);

            entity.Property(e => e.Bic).HasMaxLength(20);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DeliveryPercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Iban).HasMaxLength(37);
            entity.Property(e => e.MarginPercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.PurchasePercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SampleRate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.UpfrontBeneficiaryName).HasMaxLength(100);
            entity.Property(e => e.UpfrontBeneficiaryPostalCode).HasMaxLength(10);
            entity.Property(e => e.UpfrontBeneficiaryStreet).HasMaxLength(100);
            entity.Property(e => e.UpfrontBic).HasMaxLength(20);
            entity.Property(e => e.UpfrontIban).HasMaxLength(37);
            entity.Property(e => e.VatNr).HasMaxLength(50);

            entity.HasOne(d => d.AccountingCode).WithMany(p => p.Suppliers)
                .HasForeignKey(d => d.AccountingCodeId)
                .HasConstraintName("FK_dbo.Suppliers_dbo.AccountingCodes_AccountingCodeId");

            entity.HasOne(d => d.Address).WithMany(p => p.Suppliers)
                .HasForeignKey(d => d.AddressId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Suppliers_dbo.Addresses_AddressId");

            entity.HasOne(d => d.Currency).WithMany(p => p.Suppliers)
                .HasForeignKey(d => d.CurrencyId)
                .HasConstraintName("FK_dbo.Suppliers_dbo.Currencies_CurrencyId");

            entity.HasOne(d => d.Language).WithMany(p => p.Suppliers)
                .HasForeignKey(d => d.LanguageId)
                .HasConstraintName("FK_dbo.Suppliers_dbo.Languages_LanguageId");

            entity.HasOne(d => d.ReturnResponsible).WithMany(p => p.Suppliers)
                .HasForeignKey(d => d.ReturnResponsibleId)
                .HasConstraintName("FK_dbo.Suppliers_dbo.Employees_ReturnResponsibleId");

            entity.HasOne(d => d.SupplierContact).WithMany(p => p.Suppliers)
                .HasForeignKey(d => d.SupplierContactId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Suppliers_dbo.SupplierContacts_SupplierContactId");

            entity.HasOne(d => d.TrackList).WithMany(p => p.Suppliers)
                .HasForeignKey(d => d.TrackListId)
                .HasConstraintName("FK_dbo.Suppliers_dbo.TrackLists_TrackListId");

            entity.HasOne(d => d.UpfrontBeneficiaryCity).WithMany(p => p.Suppliers)
                .HasForeignKey(d => d.UpfrontBeneficiaryCityId)
                .HasConstraintName("FK_dbo.Suppliers_dbo.Cities_UpfrontBeneficiaryCityId");

            entity.HasOne(d => d.UpfrontPayment).WithMany(p => p.Suppliers)
                .HasForeignKey(d => d.UpfrontPaymentId)
                .HasConstraintName("FK_dbo.Suppliers_dbo.UpfrontPayments_UpfrontPaymentId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Suppliers)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Suppliers_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SupplierContact>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SupplierContacts");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Contact).WithMany(p => p.SupplierContacts)
                .HasForeignKey(d => d.ContactId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SupplierContacts_dbo.Contacts_ContactId");

            entity.HasOne(d => d.ContactType).WithMany(p => p.SupplierContacts)
                .HasForeignKey(d => d.ContactTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SupplierContacts_dbo.ContactTypes_ContactTypeId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SupplierContacts)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SupplierContacts_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SupplierMarkup>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SupplierMarkups");

            entity.HasIndex(e => e.ProductLineDeliveryId, "IX_ProductLineDeliveryId");

            entity.HasIndex(e => e.RegionId, "IX_RegionId");

            entity.HasIndex(e => e.SalesPeriodId, "IX_SalesPeriodId");

            entity.HasIndex(e => e.SupplierId, "IX_SupplierId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.MarginPercentage).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.SupplierMarkups)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SupplierMarkups_dbo.ProductLineDeliveries_ProductLineDeliveryId");

            entity.HasOne(d => d.Region).WithMany(p => p.SupplierMarkups)
                .HasForeignKey(d => d.RegionId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SupplierMarkups_dbo.Regions_RegionId");

            entity.HasOne(d => d.SalesPeriod).WithMany(p => p.SupplierMarkups)
                .HasForeignKey(d => d.SalesPeriodId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SupplierMarkups_dbo.SalesPeriods_SalesPeriodId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.SupplierMarkups)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SupplierMarkups_dbo.Suppliers_SupplierId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SupplierMarkups)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SupplierMarkups_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SupplierSalesCondition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SupplierSalesConditions");

            entity.HasIndex(e => e.LanguageId, "IX_LanguageId").HasFillFactor(90);

            entity.HasIndex(e => e.SupplierId, "IX_Supplier_Id").HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.SupplierId).HasColumnName("Supplier_Id");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Language).WithMany(p => p.SupplierSalesConditions)
                .HasForeignKey(d => d.LanguageId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SupplierSalesConditions_dbo.Languages_LanguageId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.SupplierSalesConditions)
                .HasForeignKey(d => d.SupplierId)
                .HasConstraintName("FK_dbo.SupplierSalesConditions_dbo.Suppliers_Supplier_Id");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SupplierSalesConditions)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SupplierSalesConditions_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<SupplierVat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SupplierVats");

            entity.HasIndex(e => e.AccountingCodeId, "IX_AccountingCodeId");

            entity.HasIndex(e => e.BehaccountingCodeId, "IX_BEHAccountingCodeId");

            entity.HasIndex(e => e.CountryId, "IX_CountryId");

            entity.HasIndex(e => e.ExcludedAccountingCodeId, "IX_ExcludedAccountingCodeId");

            entity.HasIndex(e => e.SupplierId, "IX_SupplierId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.HasIndex(e => e.VatId, "IX_VatId");

            entity.Property(e => e.BehaccountingCodeId).HasColumnName("BEHAccountingCodeId");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.AccountingCode).WithMany(p => p.SupplierVatAccountingCodes)
                .HasForeignKey(d => d.AccountingCodeId)
                .HasConstraintName("FK_dbo.SupplierVats_dbo.AccountingCodes_AccountingCodeId");

            entity.HasOne(d => d.BehaccountingCode).WithMany(p => p.SupplierVatBehaccountingCodes)
                .HasForeignKey(d => d.BehaccountingCodeId)
                .HasConstraintName("FK_dbo.SupplierVats_dbo.AccountingCodes_BEHAccountingCodeId");

            entity.HasOne(d => d.Country).WithMany(p => p.SupplierVats)
                .HasForeignKey(d => d.CountryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SupplierVats_dbo.Countries_CountryId");

            entity.HasOne(d => d.ExcludedAccountingCode).WithMany(p => p.SupplierVatExcludedAccountingCodes)
                .HasForeignKey(d => d.ExcludedAccountingCodeId)
                .HasConstraintName("FK_dbo.SupplierVats_dbo.AccountingCodes_ExcludedAccountingCodeId");

            entity.HasOne(d => d.Supplier).WithMany(p => p.SupplierVats)
                .HasForeignKey(d => d.SupplierId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SupplierVats_dbo.Suppliers_SupplierId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.SupplierVats)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SupplierVats_dbo.Users_UserCreatedId");

            entity.HasOne(d => d.Vat).WithMany(p => p.SupplierVats)
                .HasForeignKey(d => d.VatId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SupplierVats_dbo.Vats_VatId");
        });

        modelBuilder.Entity<SuspendedDeliveryRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.SuspendedDeliveryRule");

            entity.ToTable("SuspendedDeliveryRule");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.FromDate).HasColumnType("datetime");
            entity.Property(e => e.ToDate).HasColumnType("datetime");

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.SuspendedDeliveryRule)
                .HasForeignKey<SuspendedDeliveryRule>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.SuspendedDeliveryRule_dbo.Rules_Id");
        });

        modelBuilder.Entity<Target>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Targets");

            entity.HasIndex(e => e.ExternalPosId, "IX_ExternalPosId");

            entity.HasIndex(e => e.StockLocationId, "IX_StockLocationId");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.SalesResult).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.SalesResultPy)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("SalesResultPY");
            entity.Property(e => e.SalesTarget).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.ExternalPos).WithMany(p => p.Targets)
                .HasForeignKey(d => d.ExternalPosId)
                .HasConstraintName("FK_dbo.Targets_dbo.ExternalPos_ExternalPosId");

            entity.HasOne(d => d.StockLocation).WithMany(p => p.Targets)
                .HasForeignKey(d => d.StockLocationId)
                .HasConstraintName("FK_dbo.Targets_dbo.StockLocations_StockLocationId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Targets)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Targets_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<TimeframeDifferenceRule>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.TimeframeDifferenceRules");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(90);

            entity.HasIndex(e => e.ProductLineDeliveryId, "IX_ProductLineDeliveryId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.TimeframeDifferenceRule)
                .HasForeignKey<TimeframeDifferenceRule>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.TimeframeDifferenceRules_dbo.Rules_Id");

            entity.HasOne(d => d.ProductLineDelivery).WithMany(p => p.TimeframeDifferenceRules)
                .HasForeignKey(d => d.ProductLineDeliveryId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.TimeframeDifferenceRules_dbo.ProductLineDeliveries_ProductLineDeliveryId");
        });

        modelBuilder.Entity<ToDo>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ToDoes");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.Employee).WithMany(p => p.ToDos)
                .HasForeignKey(d => d.EmployeeId)
                .HasConstraintName("FK_dbo.ToDoes_dbo.Employees_EmployeeId");

            entity.HasOne(d => d.ToDoStatus).WithMany(p => p.ToDos)
                .HasForeignKey(d => d.ToDoStatusId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ToDoes_dbo.ToDoStatus_ToDoStatusId");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ToDos)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ToDoes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<ToDoStatus>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.ToDoStatus");

            entity.ToTable("ToDoStatus");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.ToDoStatuses)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.ToDoStatus_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<TrackList>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.TrackLists");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.TrackLists)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.TrackLists_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<TransportType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.TransportTypes");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(95);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.TransportTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.TransportTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<UpfrontPayment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.UpfrontPayments");

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.HasIndex(e => e.Percentage, "IX_dbo_UpfrontPayments_Percentage").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.UpfrontPayments)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.UpfrontPayments_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Users");

            entity.Property(e => e.Login)
                .IsRequired()
                .HasMaxLength(200);

            entity.HasMany(d => d.ExternalSalesPlatformsNavigation).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "ExternalSalesPlatformUser",
                    r => r.HasOne<ExternalSalesPlatform>().WithMany()
                        .HasForeignKey("ExternalSalesPlatformId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.ExternalSalesPlatformUsers_dbo.ExternalSalesPlatforms_ExternalSalesPlatformId"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.ExternalSalesPlatformUsers_dbo.Users_UserId"),
                    j =>
                    {
                        j.HasKey("UserId", "ExternalSalesPlatformId").HasName("PK_dbo.ExternalSalesPlatformUsers");
                        j.ToTable("ExternalSalesPlatformUsers");
                        j.HasIndex(new[] { "ExternalSalesPlatformId" }, "IX_ExternalSalesPlatformId");
                        j.HasIndex(new[] { "UserId" }, "IX_UserId");
                    });

            entity.HasMany(d => d.Roles).WithMany(p => p.Users)
                .UsingEntity<Dictionary<string, object>>(
                    "UserRole",
                    r => r.HasOne<Role>().WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.UserRoles_dbo.Roles_RoleId"),
                    l => l.HasOne<User>().WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientSetNull)
                        .HasConstraintName("FK_dbo.UserRoles_dbo.Users_UserId"),
                    j =>
                    {
                        j.HasKey("UserId", "RoleId").HasName("PK_dbo.UserRoles");
                        j.ToTable("UserRoles");
                        j.HasIndex(new[] { "RoleId" }, "IX_RoleId").HasFillFactor(95);
                        j.HasIndex(new[] { "UserId" }, "IX_UserId").HasFillFactor(95);
                    });
        });

        modelBuilder.Entity<Vat>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Vats");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.HasIndex(e => e.VatTypeId, "IX_VatTypeId").HasFillFactor(90);

            entity.Property(e => e.Code)
                .IsRequired()
                .HasMaxLength(10);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Rate).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Vats)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Vats_dbo.Users_UserCreatedId");

            entity.HasOne(d => d.VatType).WithMany(p => p.Vats)
                .HasForeignKey(d => d.VatTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Vats_dbo.VatTypes_VatTypeId");
        });

        modelBuilder.Entity<VatType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.VatTypes");

            entity.HasIndex(e => e.Code, "IX_Code")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.Name, "IX_Name")
                .IsUnique()
                .HasFillFactor(90);

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.Code).HasMaxLength(10);
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.VatTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.VatTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Voucher>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Vouchers");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.HasIndex(e => e.VoucherOverruleReasonId, "IX_VoucherOverruleReasonId");

            entity.HasIndex(e => e.VoucherTypeId, "IX_VoucherTypeId").HasFillFactor(90);

            entity.Property(e => e.Amount).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.ExpireDate).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.TransferedToShopifyDate).HasColumnType("datetime");
            entity.Property(e => e.VoucherOverruleDate).HasColumnType("datetime");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Vouchers)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Vouchers_dbo.Users_UserCreatedId");

            entity.HasOne(d => d.VoucherOverruleReason).WithMany(p => p.Vouchers)
                .HasForeignKey(d => d.VoucherOverruleReasonId)
                .HasConstraintName("FK_dbo.Vouchers_dbo.VoucherOverruleReasons_VoucherOverruleReasonId");

            entity.HasOne(d => d.VoucherType).WithMany(p => p.Vouchers)
                .HasForeignKey(d => d.VoucherTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Vouchers_dbo.VoucherTypes_VoucherTypeId");
        });

        modelBuilder.Entity<VoucherBarcode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.VoucherBarcodes");

            entity.HasIndex(e => e.Id, "IX_Id").HasFillFactor(90);

            entity.HasIndex(e => e.VoucherId, "IX_VoucherId").HasFillFactor(90);

            entity.Property(e => e.Id).ValueGeneratedNever();

            entity.HasOne(d => d.IdNavigation).WithOne(p => p.VoucherBarcode)
                .HasForeignKey<VoucherBarcode>(d => d.Id)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.VoucherBarcodes_dbo.Barcodes_Id");

            entity.HasOne(d => d.Voucher).WithMany(p => p.VoucherBarcodes)
                .HasForeignKey(d => d.VoucherId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.VoucherBarcodes_dbo.Vouchers_VoucherId");
        });

        modelBuilder.Entity<VoucherOverruleReason>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.VoucherOverruleReasons");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.VoucherOverruleReasons)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.VoucherOverruleReasons_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<VoucherType>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.VoucherTypes");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.VoucherTypes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.VoucherTypes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<Weather>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.Weathers");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId");

            entity.Property(e => e.CloudCover).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Date).HasColumnType("datetime");
            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Humidity).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Precipitation).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Pressure).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TempAfternoon).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TempEvening).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TempMax).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TempMin).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TempMorning).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.TempNight).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();
            entity.Property(e => e.WindDirection).HasColumnType("decimal(18, 2)");
            entity.Property(e => e.WindSpeed).HasColumnType("decimal(18, 2)");

            entity.HasOne(d => d.UserCreated).WithMany(p => p.Weathers)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.Weathers_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<WebPlatformClient>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.WebPlatformClients");

            entity.HasIndex(e => e.WebPlatformDomainId, "IX_WebPlatformDomainId");

            entity.HasOne(d => d.WebPlatformDomain).WithMany(p => p.WebPlatformClients)
                .HasForeignKey(d => d.WebPlatformDomainId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.WebPlatformClients_dbo.WebPlatformDomains_WebPlatformDomainId");
        });

        modelBuilder.Entity<WebPlatformClientContact>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.WebPlatformClientContacts");

            entity.HasIndex(e => e.WebPlatformClientId, "IX_WebPlatformClientId");

            entity.HasOne(d => d.WebPlatformClient).WithMany(p => p.WebPlatformClientContacts)
                .HasForeignKey(d => d.WebPlatformClientId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.WebPlatformClientContacts_dbo.WebPlatformClients_WebPlatformClientId");
        });

        modelBuilder.Entity<WebPlatformContact>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.WebPlatformContacts");
        });

        modelBuilder.Entity<WebPlatformDomain>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.WebPlatformDomains");
        });

        modelBuilder.Entity<WebUser>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.WebUsers");

            entity.HasIndex(e => e.Login, "Missing_IXNC_WebUsers_Login_835A4").HasFillFactor(90);

            entity.Property(e => e.Login)
                .IsRequired()
                .HasMaxLength(200);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(200);
        });

        modelBuilder.Entity<WifiCode>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.WifiCodes");

            entity.HasIndex(e => e.UserCreatedId, "IX_UserCreatedId").HasFillFactor(90);

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.Name).HasMaxLength(500);
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.WifiCodes)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.WifiCodes_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<WpsPrePayment>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.WpsPrePayments");

            entity.Property(e => e.DateCreated).HasColumnType("datetime");
            entity.Property(e => e.DatePayed).HasColumnType("datetime");
            entity.Property(e => e.Timestamp)
                .IsRequired()
                .IsRowVersion()
                .IsConcurrencyToken();

            entity.HasOne(d => d.UserCreated).WithMany(p => p.WpsPrePayments)
                .HasForeignKey(d => d.UserCreatedId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_dbo.WpsPrePayments_dbo.Users_UserCreatedId");
        });

        modelBuilder.Entity<WpsToken>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_dbo.WpsTokens");
        });
        modelBuilder.HasSequence("AccountingSessionNumberSequence")
            .StartsAt(1514L)
            .HasMin(0L);
        modelBuilder.HasSequence("AllocationNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("B2CLinkedNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("B2CReturnNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("B2CUploadNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("BackOrderNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("BatchNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("BleckmannInventoryNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("BlockedDeliveryNumberSequence")
            .StartsAt(10893L)
            .HasMin(0L);
        modelBuilder.HasSequence("BorrowNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("brandMIRACLESEanCodeSequence")
            .StartsAt(540084680000L)
            .HasMin(540084680000L)
            .HasMax(540084690000L);
        modelBuilder.HasSequence("brandSVNTYEanCodeSequence")
            .StartsAt(540084601712L)
            .HasMin(540084000000L);
        modelBuilder.HasSequence("brandWildwonEanCodeSequence")
            .StartsAt(540084690228L)
            .HasMin(540084690000L)
            .HasMax(540084700000L);
        modelBuilder.HasSequence("BulkConfirmationNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("BulkDeliveryNumberSequence")
            .StartsAt(81L)
            .HasMin(0L);
        modelBuilder.HasSequence("BulkOrderNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("BulkReturnIncomingNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("BulkReturnPacklistNumberSequence")
            .StartsAt(170L)
            .HasMin(0L);
        modelBuilder.HasSequence("CanceledNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("ColorSkuSequence").StartsAt(200000L);
        modelBuilder.HasSequence("ConfirmationNumberSequence")
            .StartsAt(42661L)
            .HasMin(0L);
        modelBuilder.HasSequence("ConsignmentNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("DebitCreditNoteNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("DebitNoteNumberSequence")
            .StartsAt(55L)
            .HasMin(0L);
        modelBuilder.HasSequence("DeliveryNoteNumberSequence")
            .StartsAt(55122L)
            .HasMin(0L);
        modelBuilder.HasSequence("DraftNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("EanCodeSequence")
            .StartsAt(8933300L)
            .HasMin(0L);
        modelBuilder.HasSequence("FcStoreConfirmationNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("FcStoreDeliveryNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("FcStoreReceptionNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("IncomingBulkDeliveryNumberSequence")
            .StartsAt(41L)
            .HasMin(0L);
        modelBuilder.HasSequence("IncomingDeliveryNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("IncomingOccasionalNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("IncomingPackingListNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("InventoryNumberSequence")
            .StartsAt(1199L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201500").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201501").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201502")
            .StartsAt(9123L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201503")
            .StartsAt(46L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201504").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201505")
            .StartsAt(286L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201506")
            .StartsAt(317L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201507").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201508")
            .StartsAt(38L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201509").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201510").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201511").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201512").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201513")
            .StartsAt(7L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201514").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201515").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201516")
            .StartsAt(8L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201517")
            .StartsAt(43L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201518")
            .StartsAt(129L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201519").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201520")
            .StartsAt(161L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201521").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201522").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201523").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201524").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201525").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201526")
            .StartsAt(5L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201527").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201528")
            .StartsAt(2L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201529")
            .StartsAt(196L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201530").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201531").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201532").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201533").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201534").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201535").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201536")
            .StartsAt(2L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201537")
            .StartsAt(2L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201538").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201539")
            .StartsAt(268L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201540")
            .StartsAt(451L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201541")
            .StartsAt(385L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201542").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201543")
            .StartsAt(8L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201544")
            .StartsAt(28L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201545")
            .StartsAt(251L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201546")
            .StartsAt(2L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201547").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201548").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201549")
            .StartsAt(12L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201550").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201551").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201552").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201553").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201554").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201555").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201556").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201557")
            .StartsAt(3L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201558").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201559")
            .StartsAt(386L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201560").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201561").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201562").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201563").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201564").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201565")
            .StartsAt(26L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201566").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201567").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201568").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201569")
            .StartsAt(17L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201570")
            .StartsAt(123L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201571").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201572").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201573").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201574").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201575")
            .StartsAt(82L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201576")
            .StartsAt(223L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201577").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201578")
            .StartsAt(3L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201579")
            .StartsAt(58L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201580").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201581")
            .StartsAt(437L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201582").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201583").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201584").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201585").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201586").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201587")
            .StartsAt(33L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201588")
            .StartsAt(408L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201589")
            .StartsAt(32L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201590").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201591").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201592")
            .StartsAt(2L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201595")
            .StartsAt(10757L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201597")
            .StartsAt(313L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201599").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201600")
            .StartsAt(32L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201602")
            .StartsAt(7478L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201605").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201606")
            .StartsAt(433L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201608").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201609").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201610").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201611").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201614").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201615").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201616").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201617").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201618").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201620").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201622")
            .StartsAt(9L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201624").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201625").StartsAt(9L);
        modelBuilder.HasSequence("InvoiceNumberSequence201627").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201629").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201630").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201632").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201638")
            .StartsAt(10L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201639")
            .StartsAt(18L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201640")
            .StartsAt(703L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201641").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201642").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201645").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201647").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201648").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201650").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201654").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201656")
            .StartsAt(12L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201659").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201661").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201662").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201664").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201665").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201667")
            .StartsAt(1139L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201668").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201669").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201670")
            .StartsAt(11L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201672").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201675").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201676").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201679").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201681")
            .StartsAt(23L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201688")
            .StartsAt(618L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201692")
            .StartsAt(7L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201695").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201697")
            .StartsAt(409L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201700").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201702")
            .StartsAt(6653L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201706")
            .StartsAt(2771L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201710").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201711").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201714").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201720").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201722").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201724").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201727").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201729").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201730").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201734").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201738").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201739").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201740")
            .StartsAt(1010L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201741").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201742").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201745")
            .StartsAt(28L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201748").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201756").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201759").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201761").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201764").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201765").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201767")
            .StartsAt(1032L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201768").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201770").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201772")
            .StartsAt(181L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201776").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201779").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201781").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201784").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201788").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201792").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201793")
            .StartsAt(3L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201795").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201797")
            .StartsAt(1712L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201799")
            .StartsAt(36L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201800").StartsAt(290L);
        modelBuilder.HasSequence("InvoiceNumberSequence2018000").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201802")
            .StartsAt(5871L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201803").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201806").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201809").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201810").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201811").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201814").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201815").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201817").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201820").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201821")
            .StartsAt(137L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201822").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201823").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201826").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201827").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201829").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201830").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2018300").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2018301").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2018302").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201831").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201835").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201836").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201837").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201838").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201839").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201840").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201842").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201843")
            .StartsAt(5L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201844")
            .StartsAt(8L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201845").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2018501").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201852")
            .StartsAt(3L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201854").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201856").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201859").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201867").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201868").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201871").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201876").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201879").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201881").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201884").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201886").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201888")
            .StartsAt(228L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201892").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201893")
            .StartsAt(12L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201897").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201899")
            .StartsAt(31L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201900")
            .StartsAt(123L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence201903").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019301")
            .StartsAt(5693L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019302").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019402")
            .StartsAt(1393L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019403").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019405").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019409").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019413").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019414").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019415").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019416").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019419").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019420").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019421").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019422").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019423").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019424").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019425").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019426").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019428").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019429").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019430").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019431").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019433").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019435").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019438").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019439").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019440").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019441").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019443")
            .StartsAt(5L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019444").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019446").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019454").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019458").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019459").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019467").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019468").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019471").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019476").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019481").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019483").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019484").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019488").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019497").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019499")
            .StartsAt(16L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019501")
            .StartsAt(1695L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019520").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2019530").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence202000").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence202010").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020301")
            .StartsAt(6271L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020302")
            .StartsAt(5L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020400").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020402").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020403").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020405").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020409").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020413").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020414").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020415")
            .StartsAt(418L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020420").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020422").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020425").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020426").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020428").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020429").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020430").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020431").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020433").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020434").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020436").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020439").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020440").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020441").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020443")
            .StartsAt(22L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020444").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020458").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020471").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020476").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020484").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020488")
            .StartsAt(628L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020497").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020499").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020501")
            .StartsAt(1697L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020520").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020530").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2020601")
            .StartsAt(875L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence202100").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence202110").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021301")
            .StartsAt(317L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021403").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021404").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021408").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021412").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021414").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021415").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021416").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021420").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021425").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021426").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021428").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021429").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021430").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021433").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021434").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021436").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021443").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021444").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021452").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021458").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021462").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021484").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021488").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021497").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021499").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021501")
            .StartsAt(40L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence202151").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021520").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021530").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021601")
            .StartsAt(56L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021701")
            .StartsAt(40L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2021801").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence202200")
            .StartsAt(56L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022301")
            .StartsAt(3902L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022403").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022404").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022405").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022407").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022408").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022410").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022412").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022413").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022415").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022416").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022419").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022420").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022426").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022429").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022430").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022434").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022443").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022444").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022452").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022458").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022462").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022465").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022475").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022476").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022484").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022488").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022497").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022499").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022501")
            .StartsAt(191L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022520").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022530").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022601")
            .StartsAt(1553L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022701").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2022801").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence202300").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence202310").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023301")
            .StartsAt(3749L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023403").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023404").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023407").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023408").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023410").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023413").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023415").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023416")
            .StartsAt(607L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023417").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023420").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023426").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023427").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023429").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023432").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023434").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023441").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023443").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023444").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023458").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023462").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023465").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023475").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023484").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023488").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023499").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023501").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023520").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023530").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023601").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023701").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2023801").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence202400")
            .StartsAt(121L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024301")
            .StartsAt(486L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024303")
            .StartsAt(73L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024307").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024403")
            .StartsAt(985L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024407")
            .StartsAt(181L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024408").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024414").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024415").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024416").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024417").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024420").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024426").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024427").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024429").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024432").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024435")
            .StartsAt(30L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024437").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024441").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024443").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024445").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024458").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024465").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024475").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024484").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024488").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024499")
            .StartsAt(2L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024501")
            .StartsAt(459L)
            .HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024520").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024530").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024601").HasMin(0L);
        modelBuilder.HasSequence("InvoiceNumberSequence2024801").HasMin(0L);
        modelBuilder.HasSequence("MancoNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("MiscInvoiceNumberSequence").StartsAt(80750L);
        modelBuilder.HasSequence("MiscProformaNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("OccasionalStockNumberSequence")
            .StartsAt(317L)
            .HasMin(0L);
        modelBuilder.HasSequence("OrderAtSupplierNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("OrderNumberSequence")
            .StartsAt(6L)
            .HasMin(0L);
        modelBuilder.HasSequence("PackingListNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("PosCancelledTicketNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("PosInvoiceNumberSequence2016492")
            .StartsAt(3614L)
            .HasMin(0L);
        modelBuilder.HasSequence("PosInvoiceNumberSequence2017492")
            .StartsAt(1378L)
            .HasMin(0L);
        modelBuilder.HasSequence("PosInvoiceNumberSequence2018492")
            .StartsAt(2459L)
            .HasMin(0L);
        modelBuilder.HasSequence("PosInvoiceNumberSequence2019492")
            .StartsAt(1789L)
            .HasMin(0L);
        modelBuilder.HasSequence("PosInvoiceNumberSequence2020492")
            .StartsAt(105L)
            .HasMin(0L);
        modelBuilder.HasSequence("PosInvoiceNumberSequence2021492").HasMin(0L);
        modelBuilder.HasSequence("PosInvoiceNumberSequence2022492").HasMin(0L);
        modelBuilder.HasSequence("PosInvoiceNumberSequence2023492")
            .StartsAt(789L)
            .HasMin(0L);
        modelBuilder.HasSequence("PosInvoiceNumberSequence2024492").HasMin(0L);
        modelBuilder.HasSequence("PosITSRequestIdNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("PosNumberSequence")
            .StartsAt(7348L)
            .HasMin(0L);
        modelBuilder.HasSequence("PosParkedTicketNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("PosReceiverNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("PosSenderNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("PosTransportNumberSequence")
            .StartsAt(20L)
            .HasMin(0L);
        modelBuilder.HasSequence("ReorderNumberSequence")
            .StartsAt(2239L)
            .HasMin(0L);
        modelBuilder.HasSequence("ReturnNumberSequence")
            .StartsAt(34447L)
            .HasMin(0L);
        modelBuilder.HasSequence("SampleLoanNumberSequence")
            .StartsAt(888L)
            .HasMin(0L);
        modelBuilder.HasSequence("SampleSelectionNumberSequence")
            .StartsAt(952L)
            .HasMin(0L);
        modelBuilder.HasSequence("SampleToFC70NumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("SampleToPressNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("SampleToReturn")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("SampleToReturnNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("ShoppingBasketNumberSequence").HasMin(0L);
        modelBuilder.HasSequence("StockAdjustmentNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("StockDeliveryNumberSequence")
            .StartsAt(362L)
            .HasMin(0L);
        modelBuilder.HasSequence("StockOrderNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("StockReceiveTransferNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("StockSendTransferNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("SvntyWebOrderNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("SwapBasketNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("SwapNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("TheftNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("UndefinedStockNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);
        modelBuilder.HasSequence("WebOrderNumberSequence")
            .StartsAt(0L)
            .HasMin(0L);

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}