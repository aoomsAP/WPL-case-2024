// <auto-generated />
using System;
using FCentricProspections.Server.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FCentricProspections.Server.Migrations
{
    [DbContext(typeof(FCentricContext))]
    [Migration("20241218023419_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Prospection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BestBrands")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ContactTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateLastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Extra")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewBrands")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<string>("TerminatedBrands")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trends")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.Property<string>("VisitContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("VisitTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("WorstBrands")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("VisitTypeId");

                    b.ToTable("Prospections");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionBrand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProspectionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Sellout")
                        .HasColumnType("int");

                    b.Property<string>("SelloutRemark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProspectionId");

                    b.ToTable("ProspectionBrands");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionBrandInterest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProspectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProspectionId");

                    b.ToTable("ProspectionBrandInterests");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionCompetitorBrand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CompetitorBrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProspectionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProspectionId");

                    b.ToTable("ProspectionCompetitorBrands");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionContactType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProspectionContactTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Owner"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Buyer"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Salesperson"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionToDo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ProspectionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ToDoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProspectionId");

                    b.HasIndex("ToDoId");

                    b.ToTable("ProspectionToDos");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionVisitType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProspectionVisitTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Prospection"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Swap"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Key account meeting"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ShopTypes");

                    b.HasData(
                        new
                        {
                            Id = 6L,
                            DateCreated = new DateTime(2024, 12, 18, 3, 34, 19, 486, DateTimeKind.Local).AddTicks(2508),
                            Name = "Prospection",
                            UserCreatedId = 103L
                        });
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ToDo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("ToDoStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("ToDoTypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ToDoStatusId");

                    b.HasIndex("ToDoTypeId");

                    b.ToTable("ToDos");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ToDoEmployee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<long>("ToDoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ToDoId");

                    b.ToTable("ToDoEmployees");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ToDoStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ToDoStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateCreated = new DateTime(2024, 12, 18, 3, 34, 19, 485, DateTimeKind.Local).AddTicks(2825),
                            Name = "Ongoing",
                            UserCreatedId = 103L
                        });
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ToDoType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AssignEmployeesQuery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("ToDoTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            DateCreated = new DateTime(2024, 12, 18, 3, 34, 19, 485, DateTimeKind.Local).AddTicks(2661),
                            Name = "New contact info",
                            UserCreatedId = 103L
                        },
                        new
                        {
                            Id = 2L,
                            DateCreated = new DateTime(2024, 12, 18, 3, 34, 19, 485, DateTimeKind.Local).AddTicks(2772),
                            Name = "New brands",
                            UserCreatedId = 103L
                        },
                        new
                        {
                            Id = 3L,
                            DateCreated = new DateTime(2024, 12, 18, 3, 34, 19, 485, DateTimeKind.Local).AddTicks(2777),
                            Name = "Brand interests",
                            UserCreatedId = 103L
                        },
                        new
                        {
                            Id = 4L,
                            DateCreated = new DateTime(2024, 12, 18, 3, 34, 19, 485, DateTimeKind.Local).AddTicks(2782),
                            Name = "Other",
                            UserCreatedId = 103L
                        });
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Prospection", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.ProspectionContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.ProspectionVisitType", "VisitType")
                        .WithMany()
                        .HasForeignKey("VisitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactType");

                    b.Navigation("VisitType");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionBrand", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Prospection", "Prospection")
                        .WithMany("Brands")
                        .HasForeignKey("ProspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prospection");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionBrandInterest", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Prospection", "Prospection")
                        .WithMany("BrandInterests")
                        .HasForeignKey("ProspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prospection");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionCompetitorBrand", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Prospection", "Prospection")
                        .WithMany("CompetitorBrands")
                        .HasForeignKey("ProspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prospection");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionToDo", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Prospection", "Prospection")
                        .WithMany("ProspectionToDos")
                        .HasForeignKey("ProspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.ToDo", "ToDo")
                        .WithMany("ProspectionToDos")
                        .HasForeignKey("ToDoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prospection");

                    b.Navigation("ToDo");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ToDo", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.ToDoStatus", "ToDoStatus")
                        .WithMany("ToDos")
                        .HasForeignKey("ToDoStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.ToDoType", "ToDoType")
                        .WithMany("ToDos")
                        .HasForeignKey("ToDoTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ToDoStatus");

                    b.Navigation("ToDoType");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ToDoEmployee", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.ToDo", "ToDo")
                        .WithMany("ToDoEmployees")
                        .HasForeignKey("ToDoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ToDo");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Prospection", b =>
                {
                    b.Navigation("BrandInterests");

                    b.Navigation("Brands");

                    b.Navigation("CompetitorBrands");

                    b.Navigation("ProspectionToDos");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ToDo", b =>
                {
                    b.Navigation("ProspectionToDos");

                    b.Navigation("ToDoEmployees");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ToDoStatus", b =>
                {
                    b.Navigation("ToDos");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ToDoType", b =>
                {
                    b.Navigation("ToDos");
                });
#pragma warning restore 612, 618
        }
    }
}
