// <auto-generated />
using System;
using FCentricProspections.Server.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FCentricProspections.Server.Migrations
{
    [DbContext(typeof(FCentricSmallContext))]
    [Migration("20241026190149_InitialMigration2")]
    partial class InitialMigration2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Attention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.AgeCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("AgeCategory");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.BlockedType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("BlockedType");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DeliveryFeePercentage")
                        .HasColumnType("float");

                    b.Property<long?>("Ean")
                        .HasColumnType("bigint");

                    b.Property<double?>("MinBulkDeliveryPercentage")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("SearchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProvinceId");

                    b.HasIndex("RegionId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CommercialLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("CommercialLocation");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CompetitorBrand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("CompetitorBrands");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupplierContact")
                        .HasColumnType("bit");

                    b.Property<long?>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WebUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ContactType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsLocation")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ContactType");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PaymentConditionId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VatTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PaymentConditionId");

                    b.HasIndex("UserCreatedId");

                    b.HasIndex("VatTypeId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountNr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AccountingCodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AgentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("AgreeToUseTheirData")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AnniversaryDay")
                        .HasColumnType("datetime2");

                    b.Property<int>("AttendedCollectionSale")
                        .HasColumnType("int");

                    b.Property<long?>("BankCityId")
                        .HasColumnType("bigint");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BlockedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BlockedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BlockedTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("CanAlwaysSwap")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollectionSaleCustomerCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerLoyaltyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Dd")
                        .HasColumnType("bit");

                    b.Property<long>("DeliveryLocationTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeliveryMethodId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<string>("GlobalLocationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iban")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IgnoreAutomaticOverrule")
                        .HasColumnType("bit");

                    b.Property<bool>("IgnoreInReporting")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKeyAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKeyClient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPosCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<long?>("KeyAccountManagerId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("MaximumBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MiscAccountingCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PaymentConditionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Top50")
                        .HasColumnType("bit");

                    b.Property<long?>("UpfrontPaymentId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VatTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BankCityId");

                    b.HasIndex("BlockedTypeId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerTypeId");

                    b.HasIndex("GenderId");

                    b.HasIndex("KeyAccountManagerId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CustomerCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsWpsNotified")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("CustomerCode");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CustomerLegalHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CustomerCodeId")
                        .HasColumnType("bigint");

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Kvk")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("LegalContactId")
                        .HasColumnType("bigint");

                    b.Property<long?>("LegalFormId")
                        .HasColumnType("bigint");

                    b.Property<string>("RequestIdentifier")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.Property<string>("VatCheckDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VatCheckState")
                        .HasColumnType("int");

                    b.Property<string>("VatNr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VatNrSearch")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerCodeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("LegalContactId");

                    b.HasIndex("LegalFormId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("CustomerLegalHistory");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CustomerShop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("CustomerShop");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CustomerType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("ExludeVat")
                        .HasColumnType("bit");

                    b.Property<bool>("HasToOptIn")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("CustomerType");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AgentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HideForAgenda")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Pin")
                        .HasColumnType("int");

                    b.Property<long?>("RecurringAppointmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("TelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Gender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DocumentDefault")
                        .HasColumnType("bit");

                    b.Property<bool>("DocumentSupported")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.LegalForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("LegalForm");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Line", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Line");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.PaymentCondition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("DueDateCalculator")
                        .HasColumnType("int");

                    b.Property<bool>("Fdi")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConsignment")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameEn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameFr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("PaymentCondition");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProductLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AgeCategoryId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("FashionLevel")
                        .HasColumnType("int");

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCompetitor")
                        .HasColumnType("bit");

                    b.Property<long>("LineId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RadiusExclusivity")
                        .HasColumnType("int");

                    b.Property<long>("SegmentTypeId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AgeCategoryId");

                    b.HasIndex("BrandId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LineId");

                    b.HasIndex("SegmentTypeId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ProductLine");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProductLineDelivery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInUse")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductLineDeliveryRelatedId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductLineId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SalesPeriodTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("SalesTime")
                        .HasColumnType("int");

                    b.Property<string>("SupplierReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductLineDeliveryRelatedId");

                    b.HasIndex("ProductLineId");

                    b.HasIndex("SalesPeriodTypeId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ProductLineDelivery");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Prospection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BestBrands")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BrandsOut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ContactPersonTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateLastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Extra")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<string>("Trends")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("VisitContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("VisitTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("WorstBrands")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserId");

                    b.ToTable("Prospections");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionBrand", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<string>("CommercialSupport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProspectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("SalesRepresentative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Sellout")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProspectionId");

                    b.ToTable("ProspectionBrands");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionBrandInterest", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProspectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Sales")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProspectionId");

                    b.ToTable("ProspectionBrandInterests");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionCompetitorBrand", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("CompetitorBrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProspectionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorBrandId");

                    b.HasIndex("ProspectionId");

                    b.ToTable("ProspectionCompetitorBrands");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionContactType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProspectionContactTypes");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionVisitType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProspectionVisitTypes");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Province", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Province");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsSalesPeriodPriceRegion")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.SalesPeriod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryBeginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InflationPercentage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LendingPeriodEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SalesPeriodTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShopifySales")
                        .HasColumnType("bit");

                    b.Property<string>("ShortCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowInWebshop")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("TransportCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransportCostLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.Property<string>("WpsCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WpsYear")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SalesPeriodTypeId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("SalesPeriod");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.SalesPeriodType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MainAcceptDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MainDeliveryStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("MainDeliveryStopDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PreAcceptDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PreDeliveryStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PreDeliveryStopDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("SalesPeriodType");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.SegmentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("SegmentType");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Shop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("Area")
                        .HasColumnType("int");

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DisplayWindows")
                        .HasColumnType("int");

                    b.Property<int?>("Floors")
                        .HasColumnType("int");

                    b.Property<bool>("IsParallelSales")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SalesPeople")
                        .HasColumnType("int");

                    b.Property<string>("SearchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ShopTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SpancoId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ShopTypeId");

                    b.HasIndex("SpancoId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopCommercialLocation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CommercialLocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CommercialLocationId");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ShopCommercialLocation");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopCompetitorBrand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CompetitorBrandId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorBrandId");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ShopCompetitorBrand");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopCompetitorProductLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProductLineId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductLineId");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ShopCompetitorProductLine");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<long>("ContactTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ShopContact");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopDelivery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("BonusBudget")
                        .HasColumnType("int");

                    b.Property<decimal?>("BudgetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BudgetQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("CanSwap")
                        .HasColumnType("bit");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IgnoreBonusBudget")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MarginPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("OrderAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OrderQuantity")
                        .HasColumnType("int");

                    b.Property<long>("ProductLineDeliveryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SalesPeriodId")
                        .HasColumnType("bigint");

                    b.Property<long>("ShopDeliveryOriginId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShopDeliveryReferenceId")
                        .HasColumnType("bigint");

                    b.Property<long>("ShopDeliveryStateId")
                        .HasColumnType("bigint");

                    b.Property<long>("ShopDeliveryTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShowroomId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StockLocationId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProductLineDeliveryId");

                    b.HasIndex("SalesPeriodId");

                    b.HasIndex("ShopDeliveryOriginId");

                    b.HasIndex("ShopDeliveryReferenceId");

                    b.HasIndex("ShopDeliveryStateId");

                    b.HasIndex("ShopDeliveryTypeId");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ShopDelivery");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopDeliveryOrigin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ShopDeliveryOrigin");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopDeliveryState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ShopDeliveryState");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopDeliveryType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCustomer")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowOnConfirmation")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ShopDeliveryType");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopGender", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ShopGender");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("LineId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ShopLine");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ShopType");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Spanco", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Spanco");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.VatType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsTaxLevy")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("VatType");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Address", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Addresses")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.AgeCategory", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("AgeCategories")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.BlockedType", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("BlockedTypes")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Brand", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Brands")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.City", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Province", "Province")
                        .WithMany("Cities")
                        .HasForeignKey("ProvinceId");

                    b.HasOne("FCentricProspections.Server.DataModels.Region", "Region")
                        .WithMany("Cities")
                        .HasForeignKey("RegionId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Cities")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Province");

                    b.Navigation("Region");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CommercialLocation", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("CommercialLocations")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CompetitorBrand", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("CompetitorBrands")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Contact", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Address", "Address")
                        .WithMany("Contacts")
                        .HasForeignKey("AddressId");

                    b.HasOne("FCentricProspections.Server.DataModels.Language", "Language")
                        .WithMany("Contacts")
                        .HasForeignKey("LanguageId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Contacts")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Language");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ContactType", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ContactTypes")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Country", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Currency", "Currency")
                        .WithMany("Countries")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.PaymentCondition", "PaymentCondition")
                        .WithMany("Countries")
                        .HasForeignKey("PaymentConditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Countries")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.VatType", "VatType")
                        .WithMany("Countries")
                        .HasForeignKey("VatTypeId");

                    b.Navigation("Currency");

                    b.Navigation("PaymentCondition");

                    b.Navigation("UserCreated");

                    b.Navigation("VatType");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Currency", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Currencies")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Customer", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.City", "BankCity")
                        .WithMany("Customers")
                        .HasForeignKey("BankCityId");

                    b.HasOne("FCentricProspections.Server.DataModels.BlockedType", "BlockedType")
                        .WithMany("Customers")
                        .HasForeignKey("BlockedTypeId");

                    b.HasOne("FCentricProspections.Server.DataModels.Currency", "Currency")
                        .WithMany("Customers")
                        .HasForeignKey("CurrencyId");

                    b.HasOne("FCentricProspections.Server.DataModels.CustomerType", "CustomerType")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerTypeId");

                    b.HasOne("FCentricProspections.Server.DataModels.Gender", "Gender")
                        .WithMany("Customers")
                        .HasForeignKey("GenderId");

                    b.HasOne("FCentricProspections.Server.DataModels.Employee", "KeyAccountManager")
                        .WithMany("Customers")
                        .HasForeignKey("KeyAccountManagerId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Customers")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankCity");

                    b.Navigation("BlockedType");

                    b.Navigation("Currency");

                    b.Navigation("CustomerType");

                    b.Navigation("Gender");

                    b.Navigation("KeyAccountManager");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CustomerCode", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("CustomerCodes")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CustomerLegalHistory", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.CustomerCode", "CustomerCode")
                        .WithMany("CustomerLegalHistories")
                        .HasForeignKey("CustomerCodeId");

                    b.HasOne("FCentricProspections.Server.DataModels.Customer", "Customer")
                        .WithMany("CustomerLegalHistories")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Contact", "LegalContact")
                        .WithMany("CustomerLegalHistories")
                        .HasForeignKey("LegalContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.LegalForm", "LegalForm")
                        .WithMany("CustomerLegalHistories")
                        .HasForeignKey("LegalFormId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("CustomerLegalHistories")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("CustomerCode");

                    b.Navigation("LegalContact");

                    b.Navigation("LegalForm");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CustomerShop", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Customer", "Customer")
                        .WithMany("CustomerShops")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Shop", "Shop")
                        .WithMany("CustomerShops")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("CustomerShops")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Shop");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CustomerType", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("CustomerTypes")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Employee", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("EmployeeUserCreateds")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Gender", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Genders")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Language", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Languages")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.LegalForm", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("LegalForms")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Line", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Lines")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.PaymentCondition", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("PaymentConditions")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProductLine", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.AgeCategory", "AgeCategory")
                        .WithMany("ProductLines")
                        .HasForeignKey("AgeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Brand", "Brand")
                        .WithMany("ProductLines")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Gender", "Gender")
                        .WithMany("ProductLines")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Line", "Line")
                        .WithMany("ProductLines")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.SegmentType", "SegmentType")
                        .WithMany("ProductLines")
                        .HasForeignKey("SegmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ProductLines")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AgeCategory");

                    b.Navigation("Brand");

                    b.Navigation("Gender");

                    b.Navigation("Line");

                    b.Navigation("SegmentType");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProductLineDelivery", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.ProductLineDelivery", "ProductLineDeliveryRelated")
                        .WithMany("InverseProductLineDeliveryRelated")
                        .HasForeignKey("ProductLineDeliveryRelatedId");

                    b.HasOne("FCentricProspections.Server.DataModels.ProductLine", "ProductLine")
                        .WithMany("ProductLineDeliveries")
                        .HasForeignKey("ProductLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.SalesPeriodType", "SalesPeriodType")
                        .WithMany("ProductLineDeliveries")
                        .HasForeignKey("SalesPeriodTypeId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ProductLineDeliveries")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductLine");

                    b.Navigation("ProductLineDeliveryRelated");

                    b.Navigation("SalesPeriodType");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Prospection", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Shop", "Shop")
                        .WithMany("Prospections")
                        .HasForeignKey("ShopId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Prospections_dbo.Shops_ShopId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shop");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionBrand", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Brand", "Brand")
                        .WithMany("ProspectionBrands")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Prospection", "Propsection")
                        .WithMany("Brands")
                        .HasForeignKey("ProspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Propsection");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionBrandInterest", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Brand", "Brand")
                        .WithMany("ProspectionBrandInterests")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Prospection", "Propsection")
                        .WithMany("BrandsInterest")
                        .HasForeignKey("ProspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Propsection");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionCompetitorBrand", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.CompetitorBrand", "CompetitorBrand")
                        .WithMany("ProspectionCompetitorBrands")
                        .HasForeignKey("CompetitorBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Prospection", "Prospection")
                        .WithMany("CompetitorBrands")
                        .HasForeignKey("ProspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitorBrand");

                    b.Navigation("Prospection");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Province", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Provinces")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Region", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Regions")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.SalesPeriod", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.SalesPeriodType", "SalesPeriodType")
                        .WithMany("SalesPeriods")
                        .HasForeignKey("SalesPeriodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("SalesPeriods")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesPeriodType");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.SalesPeriodType", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("SalesPeriodTypes")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.SegmentType", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("SegmentTypes")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Shop", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Contact", "Contact")
                        .WithMany("Shops")
                        .HasForeignKey("ContactId");

                    b.HasOne("FCentricProspections.Server.DataModels.ShopType", "ShopType")
                        .WithMany("Shops")
                        .HasForeignKey("ShopTypeId");

                    b.HasOne("FCentricProspections.Server.DataModels.Spanco", "Spanco")
                        .WithMany("Shops")
                        .HasForeignKey("SpancoId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Shops")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("ShopType");

                    b.Navigation("Spanco");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopCommercialLocation", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.CommercialLocation", "CommercialLocation")
                        .WithMany("ShopCommercialLocations")
                        .HasForeignKey("CommercialLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Shop", "Shop")
                        .WithMany("ShopCommercialLocations")
                        .HasForeignKey("ShopId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ShopCommercialLocations")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommercialLocation");

                    b.Navigation("Shop");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopCompetitorBrand", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.CompetitorBrand", "CompetitorBrand")
                        .WithMany("ShopCompetitorBrands")
                        .HasForeignKey("CompetitorBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Shop", "Shop")
                        .WithMany("ShopCompetitorBrands")
                        .HasForeignKey("ShopId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ShopCompetitorBrands")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitorBrand");

                    b.Navigation("Shop");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopCompetitorProductLine", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.ProductLine", "ProductLine")
                        .WithMany("ShopCompetitorProductLines")
                        .HasForeignKey("ProductLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Shop", "Shop")
                        .WithMany("ShopCompetitorProductLines")
                        .HasForeignKey("ShopId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ShopCompetitorProductLines")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductLine");

                    b.Navigation("Shop");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopContact", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Contact", "Contact")
                        .WithMany("ShopContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.ContactType", "ContactType")
                        .WithMany("ShopContacts")
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Shop", "Shop")
                        .WithMany("ShopContacts")
                        .HasForeignKey("ShopId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ShopContacts")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("ContactType");

                    b.Navigation("Shop");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopDelivery", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Country", "Country")
                        .WithMany("ShopDeliveries")
                        .HasForeignKey("CountryId");

                    b.HasOne("FCentricProspections.Server.DataModels.ProductLineDelivery", "ProductLineDelivery")
                        .WithMany("ShopDeliveries")
                        .HasForeignKey("ProductLineDeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.SalesPeriod", "SalesPeriod")
                        .WithMany("ShopDeliveries")
                        .HasForeignKey("SalesPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.ShopDeliveryOrigin", "ShopDeliveryOrigin")
                        .WithMany("ShopDeliveries")
                        .HasForeignKey("ShopDeliveryOriginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.ShopDelivery", "ShopDeliveryReference")
                        .WithMany("InverseShopDeliveryReference")
                        .HasForeignKey("ShopDeliveryReferenceId");

                    b.HasOne("FCentricProspections.Server.DataModels.ShopDeliveryState", "ShopDeliveryState")
                        .WithMany("ShopDeliveries")
                        .HasForeignKey("ShopDeliveryStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.ShopDeliveryType", "ShopDeliveryType")
                        .WithMany("ShopDeliveries")
                        .HasForeignKey("ShopDeliveryTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Shop", "Shop")
                        .WithMany("ShopDeliveries")
                        .HasForeignKey("ShopId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ShopDeliveries")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("ProductLineDelivery");

                    b.Navigation("SalesPeriod");

                    b.Navigation("Shop");

                    b.Navigation("ShopDeliveryOrigin");

                    b.Navigation("ShopDeliveryReference");

                    b.Navigation("ShopDeliveryState");

                    b.Navigation("ShopDeliveryType");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopDeliveryOrigin", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ShopDeliveryOrigins")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopDeliveryState", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ShopDeliveryStates")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopDeliveryType", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ShopDeliveryTypes")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopGender", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Gender", "Gender")
                        .WithMany("ShopGenders")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Shop", "Shop")
                        .WithMany("ShopGenders")
                        .HasForeignKey("ShopId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ShopGenders")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Shop");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopLine", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Line", "Line")
                        .WithMany("ShopLines")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Shop", "Shop")
                        .WithMany("ShopLines")
                        .HasForeignKey("ShopId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ShopLines")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("Shop");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopType", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ShopTypes")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Spanco", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Spancos")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.VatType", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("VatTypes")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Address", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.AgeCategory", b =>
                {
                    b.Navigation("ProductLines");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.BlockedType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Brand", b =>
                {
                    b.Navigation("ProductLines");

                    b.Navigation("ProspectionBrandInterests");

                    b.Navigation("ProspectionBrands");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CommercialLocation", b =>
                {
                    b.Navigation("ShopCommercialLocations");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CompetitorBrand", b =>
                {
                    b.Navigation("ProspectionCompetitorBrands");

                    b.Navigation("ShopCompetitorBrands");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Contact", b =>
                {
                    b.Navigation("CustomerLegalHistories");

                    b.Navigation("ShopContacts");

                    b.Navigation("Shops");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ContactType", b =>
                {
                    b.Navigation("ShopContacts");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Provinces");

                    b.Navigation("ShopDeliveries");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Currency", b =>
                {
                    b.Navigation("Countries");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Customer", b =>
                {
                    b.Navigation("CustomerLegalHistories");

                    b.Navigation("CustomerShops");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CustomerCode", b =>
                {
                    b.Navigation("CustomerLegalHistories");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CustomerType", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Employee", b =>
                {
                    b.Navigation("Customers");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Gender", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("ProductLines");

                    b.Navigation("ShopGenders");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Language", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.LegalForm", b =>
                {
                    b.Navigation("CustomerLegalHistories");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Line", b =>
                {
                    b.Navigation("ProductLines");

                    b.Navigation("ShopLines");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.PaymentCondition", b =>
                {
                    b.Navigation("Countries");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProductLine", b =>
                {
                    b.Navigation("ProductLineDeliveries");

                    b.Navigation("ShopCompetitorProductLines");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProductLineDelivery", b =>
                {
                    b.Navigation("InverseProductLineDeliveryRelated");

                    b.Navigation("ShopDeliveries");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Prospection", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("BrandsInterest");

                    b.Navigation("CompetitorBrands");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Province", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Region", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.SalesPeriod", b =>
                {
                    b.Navigation("ShopDeliveries");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.SalesPeriodType", b =>
                {
                    b.Navigation("ProductLineDeliveries");

                    b.Navigation("SalesPeriods");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.SegmentType", b =>
                {
                    b.Navigation("ProductLines");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Shop", b =>
                {
                    b.Navigation("CustomerShops");

                    b.Navigation("Prospections");

                    b.Navigation("ShopCommercialLocations");

                    b.Navigation("ShopCompetitorBrands");

                    b.Navigation("ShopCompetitorProductLines");

                    b.Navigation("ShopContacts");

                    b.Navigation("ShopDeliveries");

                    b.Navigation("ShopGenders");

                    b.Navigation("ShopLines");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopDelivery", b =>
                {
                    b.Navigation("InverseShopDeliveryReference");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopDeliveryOrigin", b =>
                {
                    b.Navigation("ShopDeliveries");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopDeliveryState", b =>
                {
                    b.Navigation("ShopDeliveries");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopDeliveryType", b =>
                {
                    b.Navigation("ShopDeliveries");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopType", b =>
                {
                    b.Navigation("Shops");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Spanco", b =>
                {
                    b.Navigation("Shops");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("AgeCategories");

                    b.Navigation("BlockedTypes");

                    b.Navigation("Brands");

                    b.Navigation("Cities");

                    b.Navigation("CommercialLocations");

                    b.Navigation("CompetitorBrands");

                    b.Navigation("ContactTypes");

                    b.Navigation("Contacts");

                    b.Navigation("Countries");

                    b.Navigation("Currencies");

                    b.Navigation("CustomerCodes");

                    b.Navigation("CustomerLegalHistories");

                    b.Navigation("CustomerShops");

                    b.Navigation("CustomerTypes");

                    b.Navigation("Customers");

                    b.Navigation("EmployeeUserCreateds");

                    b.Navigation("Genders");

                    b.Navigation("Languages");

                    b.Navigation("LegalForms");

                    b.Navigation("Lines");

                    b.Navigation("PaymentConditions");

                    b.Navigation("ProductLineDeliveries");

                    b.Navigation("ProductLines");

                    b.Navigation("Provinces");

                    b.Navigation("Regions");

                    b.Navigation("SalesPeriodTypes");

                    b.Navigation("SalesPeriods");

                    b.Navigation("SegmentTypes");

                    b.Navigation("ShopCommercialLocations");

                    b.Navigation("ShopCompetitorBrands");

                    b.Navigation("ShopCompetitorProductLines");

                    b.Navigation("ShopContacts");

                    b.Navigation("ShopDeliveries");

                    b.Navigation("ShopDeliveryOrigins");

                    b.Navigation("ShopDeliveryStates");

                    b.Navigation("ShopDeliveryTypes");

                    b.Navigation("ShopGenders");

                    b.Navigation("ShopLines");

                    b.Navigation("ShopTypes");

                    b.Navigation("Shops");

                    b.Navigation("Spancos");

                    b.Navigation("VatTypes");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.VatType", b =>
                {
                    b.Navigation("Countries");
                });
#pragma warning restore 612, 618
        }
    }
}
