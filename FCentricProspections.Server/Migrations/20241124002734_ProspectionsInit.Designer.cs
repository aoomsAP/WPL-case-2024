// <auto-generated />
using System;
using FCentricProspections.Server.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FCentricProspections.Server.Migrations
{
    [DbContext(typeof(FCentricContext))]
    [Migration("20241124002734_ProspectionsInit")]
    partial class ProspectionsInit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Attention")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AppointmentStateId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFixedAppointment")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecurringKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentStateId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.AppointmentState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("AppointmentStates");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Brand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<double?>("DeliveryFeePercentage")
                        .HasColumnType("float");

                    b.Property<long?>("Ean")
                        .HasColumnType("bigint");

                    b.Property<double?>("MinBulkDeliveryPercentage")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProvinceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("RegionId")
                        .HasColumnType("bigint");

                    b.Property<string>("SearchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CompetitorBrand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("CompetitorBrands");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsHidden")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupplierContact")
                        .HasColumnType("bit");

                    b.Property<long?>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchName2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("WebUserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PaymentConditionId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VatTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountNr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("AccountingCodeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AgentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("AgreeToUseTheirData")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("AnniversaryDay")
                        .HasColumnType("datetime2");

                    b.Property<int>("AttendedCollectionSale")
                        .HasColumnType("int");

                    b.Property<long?>("BankCityId")
                        .HasColumnType("bigint");

                    b.Property<string>("BankName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BlockedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BlockedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("BlockedTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("CanAlwaysSwap")
                        .HasColumnType("bit");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CollectionSaleCustomerCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerLoyaltyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CustomerTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Dd")
                        .HasColumnType("bit");

                    b.Property<long>("DeliveryLocationTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DeliveryMethodId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<string>("GlobalLocationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Iban")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IgnoreAutomaticOverrule")
                        .HasColumnType("bit");

                    b.Property<bool>("IgnoreInReporting")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKeyAccount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKeyClient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPosCustomer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<long?>("KeyAccountManagerId")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("MaximumBudget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("MiscAccountingCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PaymentConditionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SearchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<bool>("Top50")
                        .HasColumnType("bit");

                    b.Property<long?>("UpfrontPaymentId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("VatTypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BankCityId");

                    b.HasIndex("KeyAccountManagerId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CustomerShop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CustomerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("CustomerShops");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AgentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HideForAgenda")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("Pin")
                        .HasColumnType("int");

                    b.Property<long?>("RecurringAppointment_Id")
                        .HasColumnType("bigint");

                    b.Property<string>("TelNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProductLine", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AgeCategoryId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int>("FashionLevel")
                        .HasColumnType("int");

                    b.Property<long>("GenderId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsCompetitor")
                        .HasColumnType("bit");

                    b.Property<long>("LineId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RadiusExclusivity")
                        .HasColumnType("int");

                    b.Property<long>("SegmentTypeId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ProductLines");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProductLineDelivery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsInUse")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ProductLineDeliveryRelatedId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProductLineId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SalesPeriodTypeId")
                        .HasColumnType("bigint");

                    b.Property<int>("SalesTime")
                        .HasColumnType("int");

                    b.Property<string>("SupplierReference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProductLineDeliveryRelatedId");

                    b.HasIndex("ProductLineId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ProductLineDeliveries");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Prospection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BestBrands")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ContactTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateLastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<long>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Extra")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NewBrands")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<string>("TerminatedBrands")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trends")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("VisitContext")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VisitDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("VisitTypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("WorstBrands")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactTypeId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserId");

                    b.HasIndex("VisitTypeId");

                    b.ToTable("Prospections");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionBrand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProspectionId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Sellout")
                        .HasColumnType("int");

                    b.Property<string>("SelloutRemark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProspectionId");

                    b.ToTable("ProspectionBrands");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionBrandInterest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProspectionId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("ProspectionId");

                    b.ToTable("ProspectionBrandInterests");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionCompetitorBrand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CompetitorBrandId")
                        .HasColumnType("bigint");

                    b.Property<long>("ProspectionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompetitorBrandId");

                    b.HasIndex("ProspectionId");

                    b.ToTable("ProspectionCompetitorBrands");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionContactType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProspectionContactTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Owner"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Buyer"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Salesperson"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionToDo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ProspectionId")
                        .HasColumnType("bigint");

                    b.Property<long>("ToDoId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProspectionId");

                    b.HasIndex("ToDoId");

                    b.ToTable("ProspectionToDos");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionVisitType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProspectionVisitTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Prospection"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Swap"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Key account meeting"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.SalesPeriod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("BeginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryBeginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("InflationPercentage")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LendingPeriodEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SalesPeriodTypeId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShopifySales")
                        .HasColumnType("bit");

                    b.Property<string>("ShortCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowInWebshop")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<decimal>("TransportCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TransportCostLimit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.Property<string>("WpsCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WpsYear")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("SalesPeriods");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Shop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("Area")
                        .HasColumnType("int");

                    b.Property<long?>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DisplayWindows")
                        .HasColumnType("int");

                    b.Property<int?>("Floors")
                        .HasColumnType("int");

                    b.Property<bool>("IsParallelSales")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SalesPeople")
                        .HasColumnType("int");

                    b.Property<string>("SearchName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("ShopTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SpancoId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopDelivery", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("BonusBudget")
                        .HasColumnType("int");

                    b.Property<decimal?>("BudgetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("BudgetQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("CanSwap")
                        .HasColumnType("bit");

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IgnoreBonusBudget")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MarginPercentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long?>("Order")
                        .HasColumnType("bigint");

                    b.Property<decimal?>("OrderAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("OrderQuantity")
                        .HasColumnType("int");

                    b.Property<long>("ProductLineDeliveryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SalesPeriodId")
                        .HasColumnType("bigint");

                    b.Property<long>("ShopDeliveryOriginId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShopDeliveryReferenceId")
                        .HasColumnType("bigint");

                    b.Property<long>("ShopDeliveryStateId")
                        .HasColumnType("bigint");

                    b.Property<long>("ShopDeliveryTypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShopId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ShowroomId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StockLocationId")
                        .HasColumnType("bigint");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("ProductLineDeliveryId");

                    b.HasIndex("SalesPeriodId");

                    b.HasIndex("ShopDeliveryReferenceId");

                    b.HasIndex("ShopId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ShopDeliveries");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ToDo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<long?>("EmployeeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<long>("ToDoStatusId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ToDoStatusId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ToDoes");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ToDoStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Timestamp")
                        .HasColumnType("varbinary(max)");

                    b.Property<long>("UserCreatedId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("ToDoStatus");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("Blocked")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Address", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Addresses")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Appointment", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.AppointmentState", "AppointmentState")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentStateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Employee", "Employee")
                        .WithMany("Appointments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Appointments")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppointmentState");

                    b.Navigation("Employee");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.AppointmentState", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("AppointmentStates")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Brand", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Brands")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.City", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Country", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Cities")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CompetitorBrand", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("CompetitorBrands")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Contact", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Address", "Address")
                        .WithMany("Contacts")
                        .HasForeignKey("AddressId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Contacts")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Country", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Countries")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Customer", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.City", "BankCity")
                        .WithMany("Customers")
                        .HasForeignKey("BankCityId");

                    b.HasOne("FCentricProspections.Server.DataModels.Employee", "KeyAccountManager")
                        .WithMany("Customers")
                        .HasForeignKey("KeyAccountManagerId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Customers")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BankCity");

                    b.Navigation("KeyAccountManager");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.CustomerShop", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Customer", "Customer")
                        .WithMany("CustomerShops")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Shop", "Shop")
                        .WithMany("CustomerShops")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("CustomerShops")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Shop");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Employee", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("EmployeeUserCreateds")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProductLine", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Brand", "Brand")
                        .WithMany("ProductLines")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ProductLines")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProductLineDelivery", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.ProductLineDelivery", "ProductLineDeliveryRelated")
                        .WithMany("InverseProductLineDeliveryRelated")
                        .HasForeignKey("ProductLineDeliveryRelatedId");

                    b.HasOne("FCentricProspections.Server.DataModels.ProductLine", "ProductLine")
                        .WithMany("ProductLineDeliveries")
                        .HasForeignKey("ProductLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ProductLineDeliveries")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductLine");

                    b.Navigation("ProductLineDeliveryRelated");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Prospection", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.ProspectionContactType", "ContactType")
                        .WithMany()
                        .HasForeignKey("ContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Shop", "Shop")
                        .WithMany("Prospections")
                        .HasForeignKey("ShopId")
                        .IsRequired()
                        .HasConstraintName("FK_dbo.Prospections_dbo.Shops_ShopId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "User")
                        .WithMany("Prospections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.ProspectionVisitType", "VisitType")
                        .WithMany()
                        .HasForeignKey("VisitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContactType");

                    b.Navigation("Employee");

                    b.Navigation("Shop");

                    b.Navigation("User");

                    b.Navigation("VisitType");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionBrand", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Prospection", "Prospection")
                        .WithMany("Brands")
                        .HasForeignKey("ProspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Prospection");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionBrandInterest", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Prospection", "Prospection")
                        .WithMany("BrandInterests")
                        .HasForeignKey("ProspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Prospection");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionCompetitorBrand", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.CompetitorBrand", "CompetitorBrand")
                        .WithMany()
                        .HasForeignKey("CompetitorBrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.Prospection", "Prospection")
                        .WithMany("CompetitorBrands")
                        .HasForeignKey("ProspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompetitorBrand");

                    b.Navigation("Prospection");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProspectionToDo", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Prospection", "Prospection")
                        .WithMany("ProspectionToDos")
                        .HasForeignKey("ProspectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.ToDo", "ToDo")
                        .WithMany("ProspectionToDos")
                        .HasForeignKey("ToDoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prospection");

                    b.Navigation("ToDo");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.SalesPeriod", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("SalesPeriods")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Shop", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Contact", "Contact")
                        .WithMany("Shops")
                        .HasForeignKey("ContactId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("Shops")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopDelivery", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Country", "Country")
                        .WithMany("ShopDeliveries")
                        .HasForeignKey("CountryId");

                    b.HasOne("FCentricProspections.Server.DataModels.ProductLineDelivery", "ProductLineDelivery")
                        .WithMany("ShopDeliveries")
                        .HasForeignKey("ProductLineDeliveryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.SalesPeriod", "SalesPeriod")
                        .WithMany("ShopDeliveries")
                        .HasForeignKey("SalesPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.ShopDelivery", "ShopDeliveryReference")
                        .WithMany("InverseShopDeliveryReference")
                        .HasForeignKey("ShopDeliveryReferenceId");

                    b.HasOne("FCentricProspections.Server.DataModels.Shop", "Shop")
                        .WithMany("ShopDeliveries")
                        .HasForeignKey("ShopId");

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ShopDeliveries")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("ProductLineDelivery");

                    b.Navigation("SalesPeriod");

                    b.Navigation("Shop");

                    b.Navigation("ShopDeliveryReference");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ToDo", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.Employee", "Employee")
                        .WithMany("ToDos")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("FCentricProspections.Server.DataModels.ToDoStatus", "ToDoStatus")
                        .WithMany("ToDos")
                        .HasForeignKey("ToDoStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ToDos")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ToDoStatus");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ToDoStatus", b =>
                {
                    b.HasOne("FCentricProspections.Server.DataModels.User", "UserCreated")
                        .WithMany("ToDoStatuses")
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Address", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.AppointmentState", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Brand", b =>
                {
                    b.Navigation("ProductLines");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.City", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Customers");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Contact", b =>
                {
                    b.Navigation("Shops");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Country", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("ShopDeliveries");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Customer", b =>
                {
                    b.Navigation("CustomerShops");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Employee", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Customers");

                    b.Navigation("ToDos");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProductLine", b =>
                {
                    b.Navigation("ProductLineDeliveries");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ProductLineDelivery", b =>
                {
                    b.Navigation("InverseProductLineDeliveryRelated");

                    b.Navigation("ShopDeliveries");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Prospection", b =>
                {
                    b.Navigation("BrandInterests");

                    b.Navigation("Brands");

                    b.Navigation("CompetitorBrands");

                    b.Navigation("ProspectionToDos");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.SalesPeriod", b =>
                {
                    b.Navigation("ShopDeliveries");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.Shop", b =>
                {
                    b.Navigation("CustomerShops");

                    b.Navigation("Prospections");

                    b.Navigation("ShopDeliveries");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ShopDelivery", b =>
                {
                    b.Navigation("InverseShopDeliveryReference");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ToDo", b =>
                {
                    b.Navigation("ProspectionToDos");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.ToDoStatus", b =>
                {
                    b.Navigation("ToDos");
                });

            modelBuilder.Entity("FCentricProspections.Server.DataModels.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("AppointmentStates");

                    b.Navigation("Appointments");

                    b.Navigation("Brands");

                    b.Navigation("Cities");

                    b.Navigation("CompetitorBrands");

                    b.Navigation("Contacts");

                    b.Navigation("Countries");

                    b.Navigation("CustomerShops");

                    b.Navigation("Customers");

                    b.Navigation("EmployeeUserCreateds");

                    b.Navigation("ProductLineDeliveries");

                    b.Navigation("ProductLines");

                    b.Navigation("Prospections");

                    b.Navigation("SalesPeriods");

                    b.Navigation("ShopDeliveries");

                    b.Navigation("Shops");

                    b.Navigation("ToDoStatuses");

                    b.Navigation("ToDos");
                });
#pragma warning restore 612, 618
        }
    }
}
